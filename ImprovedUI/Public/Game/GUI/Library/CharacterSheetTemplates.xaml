<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
			        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity" 
                    xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
                    xmlns:System="clr-namespace:System;assembly=mscorlib"
                    xmlns:ls="clr-namespace:ls;assembly=SharedGUI"
                    xmlns:noesis="clr-namespace:NoesisGUIExtensions;assembly=Noesis.GUI.Extensions"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    mc:Ignorable="d"
					>

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="../Library/Tooltips.xaml"/>
        <ResourceDictionary Source="../Library/PanelAnimations.xaml"/>
    </ResourceDictionary.MergedDictionaries>
    
    <Style x:Key="CharacterSheetBaseTextStyle" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource LS_PrimaryColor}" />
    </Style>

    <Style x:Key="ResistanceImage" TargetType="Image">
        <Setter Property="Source" Value="{x:Null}"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding IDString}" Value="SlashingResistance">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_dmg_slashing.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="PiercingResistance">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_dmg_piercing.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="BludgeoningResistance">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_dmg_blunt.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="AcidResistance">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_dmg_acid.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="ThunderResistance">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_dmg_thunder.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="NecroticResistance">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_dmg_necrotic.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="FireResistance">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_dmg_fire.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="LightningResistance">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_dmg_lightning.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="ColdResistance">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_dmg_cold.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="PsychicResistance">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_dmg_psychic.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="PoisonResistance">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_dmg_poison.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="RadiantResistance">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_dmg_radiant.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="ForceResistance">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_dmg_force.png"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ActionResourcesTemplateSelector" TargetType="ls:LSActionPointResources">
        <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.FallbackActionPointGroup}"/>
        <Setter Property="MaxGroupActionPoints" Value="4"/>
        <Setter Property="ActionPointSize" Value="44" />
        <Setter Property="LabelForeground" Value="{DynamicResource ActionResource.Default}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding TypeId}" Value="SorceryPoint">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.SorceryPointGroup}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="48" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding TypeId}" Value="SorceryPoint"/>
                    <Condition Binding="{Binding Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-15,0,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
			<!-- MOD START - Custom action resources -->
			<DataTrigger Binding="{Binding ActionResource.TypeId}" Value="SneakAttack">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.SneakAttackDieGroup}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="48" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ActionResource.TypeId}" Value="SneakAttack"/>
                    <Condition Binding="{Binding ActionResource.Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-15,0,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding TypeId}" Value="PsiPoint">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.PsiPointGroup}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="48" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding TypeId}" Value="PsiPoint"/>
                    <Condition Binding="{Binding Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-15,0,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding TypeId}" Value="PsiPointMastery">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.PsiPointGroup}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="48" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding TypeId}" Value="PsiPointMastery"/>
                    <Condition Binding="{Binding Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-15,0,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding TypeId}" Value="HitDice">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.HitDiceGroup}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="48" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding TypeId}" Value="HitDice"/>
                    <Condition Binding="{Binding Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-15,0,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding TypeId}" Value="RampageDie">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.RampageDieGroup}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="48" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding TypeId}" Value="RampageDie"/>
                    <Condition Binding="{Binding Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-15,0,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding TypeId}" Value="MartialArtsDieD4">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.MartialArtsDieGroup1}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="48" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding TypeId}" Value="MartialArtsDieD4"/>
                    <Condition Binding="{Binding Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-15,0,0"/>
                </MultiDataTrigger.Setters>
			</MultiDataTrigger>
			<DataTrigger Binding="{Binding TypeId}" Value="MartialArtsDieD6">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.MartialArtsDieGroup2}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="48" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding TypeId}" Value="MartialArtsDieD6"/>
                    <Condition Binding="{Binding Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-15,0,0"/>
                </MultiDataTrigger.Setters>
			</MultiDataTrigger>
			<DataTrigger Binding="{Binding TypeId}" Value="MartialArtsDieD8">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.MartialArtsDieGroup3}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="48" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding TypeId}" Value="MartialArtsDieD8"/>
                    <Condition Binding="{Binding Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-15,0,0"/>
                </MultiDataTrigger.Setters>
			</MultiDataTrigger>
			<DataTrigger Binding="{Binding TypeId}" Value="MartialArtsDieD10">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.MartialArtsDieGroup4}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="48" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding TypeId}" Value="MartialArtsDieD10"/>
                    <Condition Binding="{Binding Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-15,0,0"/>
                </MultiDataTrigger.Setters>
			</MultiDataTrigger>
			<DataTrigger Binding="{Binding TypeId}" Value="NecroThaum">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.NecroThaumGroup}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="48" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding TypeId}" Value="NecroThaum"/>
                    <Condition Binding="{Binding Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-15,0,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
			<!-- MOD END -->
            <DataTrigger Binding="{Binding TypeId}" Value="KiPoint">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.KiActionGroup}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="48" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding TypeId}" Value="KiPoint"/>
                    <Condition Binding="{Binding Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-15,0,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding TypeId}" Value="Rage">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.RageActionGroup}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="48" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding TypeId}" Value="Rage"/>
                    <Condition Binding="{Binding Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-15,0,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="BardicInspiration">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.InspirationActionGroup}"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding TypeId}" Value="BardicInspiration"/>
                    <Condition Binding="{Binding Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-15,0,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding TypeId}" Value="ChannelDivinity">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.DivinityActionGroup}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="48" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding TypeId}" Value="ChannelDivinity"/>
                    <Condition Binding="{Binding Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-15,0,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding TypeId}" Value="SuperiorityDie">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.SuperiorityDieActionGroup}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="48" />
                <Setter Property="LabelForeground" Value="{DynamicResource ActionResource.SuperiorityDie}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding TypeId}" Value="SuperiorityDie"/>
                    <Condition Binding="{Binding Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-15,0,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding TypeId}" Value="ArcaneRecoveryPoint">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.ArcaneRecoveryActionGroup}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="48" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding TypeId}" Value="ArcaneRecoveryPoint"/>
                    <Condition Binding="{Binding Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-15,0,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding TypeId}" Value="ActionPoint">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.DefaultActionPointGroup}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TypeId}" Value="BonusActionPoint">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.BonusActionPointGroup}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TypeId}" Value="ReactionActionPoint">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.ReactionActionPointGroup}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TypeId}" Value="SpellSlot">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.SpellSlot}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TypeId}" Value="WarlockSpellSlot">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.WarlockSpellSlot}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TypeId}" Value="NaturalRecoveryPoint">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.NaturalRecoveryPointActionGroup}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="48" />
                <Setter Property="LabelForeground" Value="{DynamicResource ActionResource.NaturalRecovery}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding TypeId}" Value="NaturalRecoveryPoint"/>
                    <Condition Binding="{Binding Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-15,0,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding TypeId}" Value="WildShape">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.WildShapeActionGroup}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="48" />
                <Setter Property="LabelForeground" Value="{DynamicResource ActionResource.WildShape}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding TypeId}" Value="WildShape"/>
                    <Condition Binding="{Binding Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-15,0,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding TypeId}" Value="TidesOfChaos">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.TidesOfChaosActionGroup}"/>
                <Setter Property="ActionPointSize" Value="48" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="BarBaseTextStyle" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{StaticResource LS_extraspecialTxtColor}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="FontSize" Value="{DynamicResource MediumFontSize}"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="noesis:Text.Stroke" Value="Black" />
        <Setter Property="noesis:Text.StrokeThickness" Value="2" />
    </Style>

    <!-- Ability Text, adds a signed improvement number to the end of the title unless 'IsValueInName' is set -->
    <ControlTemplate x:Key="AbilityText">
        <TextBlock FontSize="{DynamicResource MediumFontSize}" Foreground="{DynamicResource LS_PrimaryColor}" TextWrapping="Wrap" LineHeight="{StaticResource MediumFontSizeLineHeight}" LineStackingStrategy="BlockLineHeight">
            <Run Text="{Binding Name}"/><Run x:Name="AbilitySuffix" Text="{Binding Value, StringFormat={}{0: +#; -#; +0}}"/>
        </TextBlock>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding IsValueInName}" Value="True">
                <Setter TargetName="AbilitySuffix" Property="Text" Value=""/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="WeightBarTemplate" TargetType="Control">
        <Grid ToolTipService.Placement="Top" ToolTipService.VerticalOffset="4" Background="Transparent">
            <Grid.Resources>
                <Style TargetType="TextBlock" BasedOn="{StaticResource BarBaseTextStyle}"/>
            </Grid.Resources>

            <Grid.ToolTip>
                <ls:LSTooltip Content="{Binding Source='h97226633g565ag44c0gbd64g89e70c886cba',Converter={StaticResource TranslatedStringConverter}}"/>
            </Grid.ToolTip>

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>

            <!-- Weight icon -->
            <Image x:Name="currentWeightIcon" Grid.Column="0" HorizontalAlignment="Right" VerticalAlignment="Top" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Weight_Encumbrance/ico_weight_normal.png" Stretch="None" Margin="0,0,-6,0"/>

            <!-- Weight bar -->
            <Grid Grid.Column="1" Margin="0,12,0,0">
                <!-- Bar background -->
                <Image VerticalAlignment="Top" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/bar_mainFooter.png" Stretch="None"/>
                <Image x:Name="barBackgroundCarryLimit" VerticalAlignment="Top" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Weight_Encumbrance/bar_mainFooter_carryLimit.png" Stretch="None"/>

                <!-- Bar -->
                <Grid HorizontalAlignment="Left" VerticalAlignment="Top" Margin="28,12,0,0">
                    <Grid.Resources>
                        <System:Double x:Key="weightBarWidth">448</System:Double>
                    </Grid.Resources>

                    <Grid HorizontalAlignment="Left" VerticalAlignment="Top" MaxWidth="{StaticResource weightBarWidth}" Width="{StaticResource weightBarWidth}" Height="12">
                        <!-- Encumbrance limits -->
                        <Grid HorizontalAlignment="Left" Width="{StaticResource weightBarWidth}" ToolTipService.Placement="Top" ToolTipService.VerticalOffset="4">
                            <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Weight_Encumbrance/bar_weight_heavilyEncumbered_disabled.png" Stretch="Fill"/>
                            <Grid.ToolTip>
                                <ls:LSTooltip>
                                    <TextBlock>
                                        <Run Text="{Binding Source='h18065f0dg0169g4560gaff3g46fea09fd366',Converter={StaticResource TranslatedStringConverter}, StringFormat='{}{0}:'}"/>
                                        <Run Foreground="{StaticResource LS_bar100TxtColor}">
                                            <Run.Text>
                                                <MultiBinding StringFormat="{}{0} ~ {1}">
                                                    <Binding Path="EncumbranceStats.WeightHeavy" Converter="{StaticResource UnitConverter}" ConverterParameter="Weight N2 Short"/>
                                                    <Binding Path="EncumbranceStats.WeightMaximum" Converter="{StaticResource UnitConverter}" ConverterParameter="Weight N2 Short"/>
                                                </MultiBinding>
                                            </Run.Text>
                                        </Run>
                                    </TextBlock>
                                </ls:LSTooltip>
                            </Grid.ToolTip>
                        </Grid>
                        <Grid HorizontalAlignment="Left" Width="{Binding EncumbranceStats.WeightHeavyPercentage, Converter={StaticResource MultiplierConverter}, ConverterParameter={StaticResource weightBarWidth}}" ToolTipService.Placement="Top" ToolTipService.VerticalOffset="4">
                            <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Weight_Encumbrance/bar_weight_encumbered_disabled.png" Stretch="Fill"/>
                            <Grid.ToolTip>
                                <ls:LSTooltip>
                                    <TextBlock>
                                        <Run Text="{Binding Source='h4bffc7fbgfeaag44d9gb179gfd55c807b440',Converter={StaticResource TranslatedStringConverter}, StringFormat='{}{0}:'}"/>
                                        <Run Foreground="{StaticResource LS_bar50TxtColor}">
                                            <Run.Text>
                                                <MultiBinding StringFormat="{}{0} ~ {1}">
                                                    <Binding Path="EncumbranceStats.WeightLight" Converter="{StaticResource UnitConverter}" ConverterParameter="Weight N2 Short"/>
                                                    <Binding Path="EncumbranceStats.WeightHeavy" Converter="{StaticResource UnitConverter}" ConverterParameter="Weight N2 Short"/>
                                                </MultiBinding>
                                            </Run.Text>
                                        </Run>
                                    </TextBlock>
                                </ls:LSTooltip>
                            </Grid.ToolTip>
                        </Grid>
                        <Image HorizontalAlignment="Left" Width="{Binding EncumbranceStats.WeightLightPercentage, Converter={StaticResource MultiplierConverter}, ConverterParameter={StaticResource weightBarWidth}}"
                               Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Weight_Encumbrance/bar_weight_normal_disabled.png" Stretch="Fill"/>

                        <!-- Current weight bar -->
                        <ProgressBar x:Name="currentWeightBar" Value="{Binding Inventory.Weight, Mode=OneWay}" Minimum="0" Maximum="{Binding EncumbranceStats.WeightMaximum}" Background="Transparent" BorderBrush="Transparent" IsHitTestVisible="False">
                            <ProgressBar.Foreground>
                                <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Weight_Encumbrance/bar_weight_normal_d.png"/>
                            </ProgressBar.Foreground>
                        </ProgressBar>
                    </Grid>

                    <!-- Current weight pointer -->
                    <Grid HorizontalAlignment="Left" IsHitTestVisible="False" MaxWidth="{StaticResource weightBarWidth}" Width="{Binding EncumbranceStats.WeightCurrentPercentage, Converter={StaticResource MultiplierConverter}, ConverterParameter={StaticResource weightBarWidth}}">
                        <Canvas HorizontalAlignment="Right">
                            <Image x:Name="currentWeightPointer" Margin="-14,-25,0,0" ClipToBounds="False" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Weight_Encumbrance/pointer_weight.png" Stretch="None"/>
                            <TextBlock x:Name="currentWeightText" Text="{Binding Inventory.Weight, Converter={StaticResource UnitConverter}, ConverterParameter='Weight N2'}" Margin="0,14,0,0"
                                       Canvas.Left="{Binding ActualWidth, RelativeSource={RelativeSource Self}, Converter={StaticResource DivideConverter}, ConverterParameter=-2}"/>
                        </Canvas>
                    </Grid>

                    <!-- Dividers -->
                    <Image HorizontalAlignment="Left" IsHitTestVisible="False" Margin="-2,0,0,0" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/bar_divider.png" Stretch="None">
                        <Image.RenderTransform>
                            <TranslateTransform X="{Binding EncumbranceStats.WeightLightPercentage, Converter={StaticResource MultiplierConverter}, ConverterParameter={StaticResource weightBarWidth}}"/>
                        </Image.RenderTransform>
                    </Image>

                    <Image HorizontalAlignment="Left" IsHitTestVisible="False" Margin="-2,0,0,0" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/bar_divider.png" Stretch="None">
                        <Image.RenderTransform>
                            <TranslateTransform X="{Binding EncumbranceStats.WeightHeavyPercentage, Converter={StaticResource MultiplierConverter}, ConverterParameter={StaticResource weightBarWidth}}"/>
                        </Image.RenderTransform>
                    </Image>
                </Grid>

                <!-- Bar overlay -->
                <Image VerticalAlignment="Top" Margin="0,10,0,0" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/bar_mainFooter_overlay.png" Stretch="None" IsHitTestVisible="False"/>
                
                <!-- Carry limit exceeded text -->
                <Canvas HorizontalAlignment="Center" VerticalAlignment="Bottom">
                    <TextBlock x:Name="carryLimitText" Margin="0,-24,0,0" MaxWidth="380" ClipToBounds="False" TextAlignment="Center" TextWrapping="Wrap" Foreground="{StaticResource LS_bar100TxtColor}"
                           Text="{Binding Source='h5f15514bgc4fcg4386ga1c3g65fbf8bc2ef5', Converter={StaticResource TranslatedStringConverter}}"
                           Canvas.Left="{Binding ActualWidth, RelativeSource={RelativeSource Self}, Converter={StaticResource DivideConverter}, ConverterParameter=-2}"/>
                </Canvas>
            </Grid>

            <!-- Max weight -->
            <TextBlock x:Name="maxWeightText" Grid.Column="2" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="8,10,0,0" Text="{Binding EncumbranceStats.WeightMaximum, Converter={StaticResource UnitConverter}, ConverterParameter='Weight N2'}"/>

            <!-- Triggers -->
            <i:Interaction.Triggers>
                <!-- No encumbrance -->
                <ei:PropertyChangedTrigger Binding="{Binding Path=Inventory.Weight}">
                    <i:Interaction.Behaviors>
                        <ei:ConditionBehavior>
                            <ei:ConditionalExpression>
                                <ei:ComparisonCondition LeftOperand="{Binding Inventory.Weight}" Operator="LessThanOrEqual" RightOperand="{Binding EncumbranceStats.WeightLight}"/>
                            </ei:ConditionalExpression>
                        </ei:ConditionBehavior>
                    </i:Interaction.Behaviors>
                    <ei:ChangePropertyAction TargetName="currentWeightIcon" PropertyName="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Weight_Encumbrance/ico_weight_normal.png"/>
                    <ei:ChangePropertyAction TargetName="currentWeightBar" PropertyName="Foreground">
                        <ei:ChangePropertyAction.Value>
                            <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Weight_Encumbrance/bar_weight_normal_d.png"/>
                        </ei:ChangePropertyAction.Value>
                    </ei:ChangePropertyAction>
                    <ei:ChangePropertyAction TargetName="currentWeightPointer" PropertyName="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Weight_Encumbrance/pointer_weight.png"/>
                    <ei:ChangePropertyAction TargetName="currentWeightText" PropertyName="Foreground" Value="{StaticResource LS_extraspecialTxtColor}"/>
                </ei:PropertyChangedTrigger>

                <!-- Light encumbrance -->
                <ei:PropertyChangedTrigger Binding="{Binding Path=Inventory.Weight}">
                    <i:Interaction.Behaviors>
                        <ei:ConditionBehavior>
                            <ei:ConditionalExpression>
                                <ei:ComparisonCondition LeftOperand="{Binding Inventory.Weight}" Operator="GreaterThan" RightOperand="{Binding EncumbranceStats.WeightLight}"/>
                                <ei:ComparisonCondition LeftOperand="{Binding Inventory.Weight}" Operator="LessThanOrEqual" RightOperand="{Binding EncumbranceStats.WeightHeavy}"/>
                            </ei:ConditionalExpression>
                        </ei:ConditionBehavior>
                    </i:Interaction.Behaviors>
                    <ei:ChangePropertyAction TargetName="currentWeightIcon" PropertyName="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Weight_Encumbrance/ico_weight_encumbered.png"/>
                    <ei:ChangePropertyAction TargetName="currentWeightBar" PropertyName="Foreground">
                        <ei:ChangePropertyAction.Value>
                            <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Weight_Encumbrance/bar_weight_encumbered_d.png"/>
                        </ei:ChangePropertyAction.Value>
                    </ei:ChangePropertyAction>
                    <ei:ChangePropertyAction TargetName="currentWeightPointer" PropertyName="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Weight_Encumbrance/pointer_encumbrance.png"/>
                    <ei:ChangePropertyAction TargetName="currentWeightText" PropertyName="Foreground" Value="{StaticResource LS_bar50TxtColor}"/>
                </ei:PropertyChangedTrigger>

                <!-- Heavy encumbrance -->
                <ei:PropertyChangedTrigger Binding="{Binding Path=Inventory.Weight}">
                    <i:Interaction.Behaviors>
                        <ei:ConditionBehavior>
                            <ei:ConditionalExpression>
                                <ei:ComparisonCondition LeftOperand="{Binding Inventory.Weight}" Operator="GreaterThan" RightOperand="{Binding EncumbranceStats.WeightHeavy}"/>
                            </ei:ConditionalExpression>
                        </ei:ConditionBehavior>
                    </i:Interaction.Behaviors>
                    <ei:ChangePropertyAction TargetName="currentWeightIcon" PropertyName="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Weight_Encumbrance/ico_weight_heavilyEncumbered.png"/>
                    <ei:ChangePropertyAction TargetName="currentWeightBar" PropertyName="Foreground">
                        <ei:ChangePropertyAction.Value>
                            <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Weight_Encumbrance/bar_weight_heavilyEncumbered_d.png"/>
                        </ei:ChangePropertyAction.Value>
                    </ei:ChangePropertyAction>
                    <ei:ChangePropertyAction TargetName="currentWeightPointer" PropertyName="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Weight_Encumbrance/pointer_heavyEncumbrance.png"/>
                    <ei:ChangePropertyAction TargetName="currentWeightText" PropertyName="Foreground" Value="{StaticResource LS_bar100TxtColor}"/>
                </ei:PropertyChangedTrigger>

                <!-- Under carry limit -->
                <ei:PropertyChangedTrigger Binding="{Binding Path=Inventory.Weight}">
                    <i:Interaction.Behaviors>
                        <ei:ConditionBehavior>
                            <ei:ConditionalExpression>
                                <ei:ComparisonCondition LeftOperand="{Binding Inventory.Weight}" Operator="LessThanOrEqual" RightOperand="{Binding EncumbranceStats.WeightMaximum}"/>
                            </ei:ConditionalExpression>
                        </ei:ConditionBehavior>
                    </i:Interaction.Behaviors>
                    <ei:ChangePropertyAction TargetName="barBackgroundCarryLimit" PropertyName="Visibility" Value="Collapsed"/>
                    <ei:ChangePropertyAction TargetName="maxWeightText" PropertyName="Foreground" Value="{StaticResource LS_extraspecialTxtColor}"/>
                    <ei:ChangePropertyAction TargetName="carryLimitText" PropertyName="Visibility" Value="Collapsed"/>
                </ei:PropertyChangedTrigger>

                <!-- Over carry limit -->
                <ei:PropertyChangedTrigger Binding="{Binding Path=Inventory.Weight}">
                    <i:Interaction.Behaviors>
                        <ei:ConditionBehavior>
                            <ei:ConditionalExpression>
                                <ei:ComparisonCondition LeftOperand="{Binding Inventory.Weight}" Operator="GreaterThan" RightOperand="{Binding EncumbranceStats.WeightMaximum}"/>
                            </ei:ConditionalExpression>
                        </ei:ConditionBehavior>
                    </i:Interaction.Behaviors>
                    <ei:ChangePropertyAction TargetName="currentWeightIcon" PropertyName="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Weight_Encumbrance/ico_weight_weightLimit.png"/>
                    <ei:ChangePropertyAction TargetName="barBackgroundCarryLimit" PropertyName="Visibility" Value="Visible"/>
                    <ei:ChangePropertyAction TargetName="maxWeightText" PropertyName="Foreground" Value="{StaticResource LS_bar100TxtColor}"/>
                    <ei:ChangePropertyAction TargetName="carryLimitText" PropertyName="Visibility" Value="Visible"/>
                </ei:PropertyChangedTrigger>
            </i:Interaction.Triggers>
        </Grid>
    </ControlTemplate>

    <!-- XP bar -->
    <ControlTemplate x:Key="XPBarTemplate" TargetType="Control">
        <Grid ToolTipService.Placement="Center" ToolTipService.VerticalOffset="-100" Background="Transparent">
            <Grid.Resources>
                <Style TargetType="TextBlock" BasedOn="{StaticResource BarBaseTextStyle}"/>
                <System:Double x:Key="xpBarWidth">448</System:Double>
            </Grid.Resources>
            
            <Grid.ToolTip>
                <ls:LSTooltip>
                    <ls:LSTooltip.Resources>
                        <System:Double x:Key="MaxTooltipContentWidth">720</System:Double>
                    </ls:LSTooltip.Resources>
                    <TextBlock TextWrapping="Wrap" MaxWidth="700" HorizontalAlignment="Center">
						<i:Interaction.Behaviors>
							<ls:CtxTransStringRunGeneratorBehavior Source="{Binding Stats.Level.Description}" ParamRunStyle="{StaticResource TooltipUnitParamRun}"/>
						</i:Interaction.Behaviors>
                    </TextBlock>
                </ls:LSTooltip>
            </Grid.ToolTip>

            <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" TextAlignment="Center" Text="{Binding Source='h33818cfagfc3bg4ba8g8d37g45c69b3fb3cf',Converter={StaticResource TranslatedStringConverter}}"
                       Visibility="{Binding Stats.Level.MaximumXpCapReached, Converter={StaticResource BoolToVisibleConverter}}"/>

            <Grid HorizontalAlignment="Center" VerticalAlignment="Top" Visibility="{Binding Stats.Level.MaximumXpCapReached, Converter={StaticResource BoolToCollapsedConverter}}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                
                <!-- Current level -->
                <TextBlock Grid.Column="0" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,10,8,0" Text="{Binding Stats.Level.Value}"/>

                <!-- Experience bar -->
                <Grid Grid.Column="1" Margin="0,12,0,0">
                    <!-- Bar background -->
                    <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/bar_mainFooter.png" Stretch="None"/>

                    <!-- Bar -->
                    <Grid HorizontalAlignment="Left" VerticalAlignment="Top" MaxWidth="{StaticResource xpBarWidth}" Width="{StaticResource xpBarWidth}" Height="12" Margin="28,12,0,0">
                        <ProgressBar Grid.Column="1" Value="{Binding Stats.Level.FractionXPToNextLevel, Mode=OneWay}" Minimum="0" Maximum="1" BorderBrush="Transparent">
                            <ProgressBar.Foreground>
                                <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/bar_experience_d.png"/>
                            </ProgressBar.Foreground>
                            <ProgressBar.Background>
                                <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/bar_experience_bg.png"/>
                            </ProgressBar.Background>
                        </ProgressBar>
                    </Grid>

                    <!-- Bar overlay -->
                    <Image VerticalAlignment="Top" Margin="0,10,0,0" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/bar_mainFooter_overlay.png" Stretch="None"/>
                </Grid>

                <!-- Next level -->
                <TextBlock Grid.Column="2" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="8,10,0,0" Text="{Binding Stats.Level.Value, Converter={StaticResource AddConverter}, ConverterParameter='1'}"/>
            </Grid>
        </Grid>
    </ControlTemplate>

    <!-- SpellSlots bar -->
    <ControlTemplate x:Key="SpellSlotsBarTemplate" TargetType="Control">
        <Grid ToolTipService.Placement="Top" ToolTipService.VerticalOffset="4" Background="Transparent">
            <Grid.Resources>
                <Style TargetType="TextBlock" BasedOn="{StaticResource BarBaseTextStyle}">
                    <Setter Property="Foreground" Value="{StaticResource LS_barMagicTxtColor}"/>
                </Style>
            </Grid.Resources>
            
            <Grid.ToolTip>
                <ls:LSTooltip Content="{Binding Source='hc84846e9gc9ddg4180g9dafg4c006d6ad2f7',Converter={StaticResource TranslatedStringConverter}}"/>
            </Grid.ToolTip>
            
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>

            <!-- Prepared spells icon -->
            <Image Grid.Column="0" HorizontalAlignment="Right" VerticalAlignment="Top" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/PreparedSpells/ico_preparedSpells.png" Stretch="None" Margin="0,0,-6,0"/>

            <!-- Prepared spells bar -->
            <Grid Grid.Column="1" Margin="0,12,0,0">
                <!-- Bar title -->
                <Canvas HorizontalAlignment="Center" VerticalAlignment="Top">
                    <TextBlock MaxWidth="380" ClipToBounds="False" TextAlignment="Center" TextWrapping="Wrap"
                           Text="{Binding Source='hb59e5cdegee72g4e11gabb3g8a3a071ae557', Converter={StaticResource TranslatedStringConverter}}"
                           Canvas.Left="{Binding ActualWidth, RelativeSource={RelativeSource Self}, Converter={StaticResource DivideConverter}, ConverterParameter=-2}"
                           Canvas.Top="{Binding ActualHeight, RelativeSource={RelativeSource Self}, Converter={StaticResource MultiplierConverter}, ConverterParameter=-1}"/>
                </Canvas>
                
                <!-- Bar background -->
                <Image VerticalAlignment="Top" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/bar_mainFooter.png" Stretch="None"/>
                <Image x:Name="barBackgroundPrepareLimit" VerticalAlignment="Top" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/PreparedSpells/bar_mainFooter_prepareLimit.png" Stretch="None"/>

                <!-- Bar -->
                <Grid HorizontalAlignment="Left" VerticalAlignment="Top" Margin="28,12,0,0">
                    <Grid.Resources>
                        <System:Double x:Key="preparedSpellsBarWidth">448</System:Double>
                    </Grid.Resources>

                    <Grid HorizontalAlignment="Left" VerticalAlignment="Top" MaxWidth="{StaticResource preparedSpellsBarWidth}" Width="{StaticResource preparedSpellsBarWidth}" Height="12">
                        <!-- Current prepared spells bar -->
                        <ls:LSProgressBar Value="{Binding PreparedSpells.Value, Mode=OneWay}" Minimum="0" Maximum="{Binding PreparedSpells.Max, Mode=OneWay}" BorderBrush="Transparent" Steps="{Binding PreparedSpells.Max, Mode=OneWay}" StepsSeparatorPath="/Assets/Shared/bar_divider.dds">
                            <ls:LSProgressBar.Foreground>
                                <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/PreparedSpells/bar_prepareSpell_d.png"/>
                            </ls:LSProgressBar.Foreground>
                            <ls:LSProgressBar.Background>
                                <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/PreparedSpells/bar_prepareSpell_disabled.png"/>
                            </ls:LSProgressBar.Background>
                        </ls:LSProgressBar>
                    </Grid>

                    <!-- Current prepared spells pointer -->
                    <Grid HorizontalAlignment="Left" MaxWidth="{StaticResource preparedSpellsBarWidth}" Width="{Binding PreparedSpells.PercentValue, Converter={StaticResource MultiplierConverter}, ConverterParameter={StaticResource preparedSpellsBarWidth}}">
                        <Canvas HorizontalAlignment="Right">
                            <Image Margin="-14,-25,0,0" ClipToBounds="False" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/PreparedSpells/pointer_preparedSpells.png" Stretch="None"/>
                            <TextBlock x:Name="currentPreparedSpellsText" Text="{Binding PreparedSpells.Value}" Margin="0,14,0,0"
                                       Canvas.Left="{Binding ActualWidth, RelativeSource={RelativeSource Self}, Converter={StaticResource DivideConverter}, ConverterParameter=-2}"/>
                        </Canvas>
                    </Grid>
                </Grid>
                
                <!-- Bar overlay -->
                <Image VerticalAlignment="Top" Margin="0,10,0,0" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/bar_mainFooter_overlay.png" Stretch="None"/>
            </Grid>

            <!-- Max prepared spells -->
            <TextBlock Grid.Column="2" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="8,10,0,0" Text="{Binding PreparedSpells.Max}"/>
            
            <!-- Triggers -->
            <i:Interaction.Triggers>
                <!-- Under maximum prepared spells -->
                <ei:PropertyChangedTrigger Binding="{Binding Path=PreparedSpells.Value}">
                    <i:Interaction.Behaviors>
                        <ei:ConditionBehavior>
                            <ei:ConditionalExpression>
                                <ei:ComparisonCondition LeftOperand="{Binding PreparedSpells.Value}" Operator="LessThan" RightOperand="{Binding PreparedSpells.Max}"/>
                            </ei:ConditionalExpression>
                        </ei:ConditionBehavior>
                    </i:Interaction.Behaviors>
                    <ei:ChangePropertyAction TargetName="barBackgroundPrepareLimit" PropertyName="Visibility" Value="Collapsed"/>
                    <ei:ChangePropertyAction TargetName="currentPreparedSpellsText" PropertyName="Text" Value="{Binding PreparedSpells.Value, Converter={StaticResource ToStringConverter}}"/>
                </ei:PropertyChangedTrigger>

                <!-- Maximum prepared spells -->
                <ei:PropertyChangedTrigger Binding="{Binding Path=PreparedSpells.Value}">
                    <i:Interaction.Behaviors>
                        <ei:ConditionBehavior>
                            <ei:ConditionalExpression>
                                <ei:ComparisonCondition LeftOperand="{Binding PreparedSpells.Value}" Operator="Equal" RightOperand="{Binding PreparedSpells.Max}"/>
                            </ei:ConditionalExpression>
                        </ei:ConditionBehavior>
                    </i:Interaction.Behaviors>
                    <ei:ChangePropertyAction TargetName="barBackgroundPrepareLimit" PropertyName="Visibility" Value="Visible"/>
                    <ei:ChangePropertyAction TargetName="currentPreparedSpellsText" PropertyName="Text" Value="{Binding Source='h66e29a09gf5d0g4433gb9e0ge87039171a9a', Converter={StaticResource TranslatedStringConverter}}"/>
                </ei:PropertyChangedTrigger>
            </i:Interaction.Triggers>
        </Grid>
    </ControlTemplate>

    <!-- Equipment -->
    <Style x:Key="PartyListBoxStyle" TargetType="ListBox" BasedOn="{StaticResource {x:Type ListBox}}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
    </Style>

    <!-- Style for the character slot listbox -->
    <Style x:Key="PartyMemberStyle" TargetType="ListBoxItem" BasedOn="{StaticResource {x:Type ListBoxItem}}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="BorderThickness" Value="0" />
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderBrush" Value="Transparent" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderBrush" Value="Transparent" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Available Equipment Grid Cell -->
    <DataTemplate x:Key="EquipmentCellTemplate">
        <ContentControl ToolTip="{StaticResource ManagedTooltip}" ToolTipService.Placement="Relative" ToolTipService.VerticalOffset="52">
            <i:Interaction.Triggers>
                <!-- up event because Drag also uses the down event -->
                <i:EventTrigger EventName="MouseLeftButtonUp" >
                    <i:InvokeCommandAction 
                        Command="{Binding DataContext.EquipItemCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" 
                        CommandParameter="{Binding}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseEnter">
                    <i:InvokeCommandAction 
                        Command="{Binding DataContext.ClearItemNewFlag, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" 
                        CommandParameter="{Binding Item}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseEnter">
                    <i:InvokeCommandAction 
                        Command="{Binding DataContext.ShowEquipmentComparisonCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" 
                        CommandParameter="{Binding}"/>
                    <ls:LSPlaySound Sound="UI_HUD_Inventory_Over"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseLeave">
                    <i:InvokeCommandAction 
                        Command="{Binding DataContext.HideEquipmentComparisonCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" 
                        CommandParameter="{Binding}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>
            <Grid >
                <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Inventory/inventorySlot_filledOverlay.png"></Image>
                <Grid Width="{DynamicResource ItemIconSize}" Height="{DynamicResource ItemIconSize}">
                    <Rectangle Style="{StaticResource RarityFrameBackgroundRectangleStyle}"/>
                    <ls:LSEntityObject EntityRef="{Binding Item.EntityHandle}" Context="Inventory" Background="{Binding Item.Icon}">
                        <Image IsHitTestVisible="False" VerticalAlignment="Center" HorizontalAlignment="Center" Stretch="None">
                            <Image.Style>
                                <Style TargetType="{x:Type Image}">
                                    <Setter Property="Visibility" Value="Collapsed" />
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Item.Equipped}" Value="ThisEquipped">
                                            <Setter Property="Visibility" Value="Visible" />
                                            <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/removeFromSlot_overlay.png"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding Item.Equipped}" Value="OtherEquipped">
                                            <Setter Property="Visibility" Value="Visible" />
                                            <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/check_blue.png"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Image.Style>
                        </Image>
                        <Image IsHitTestVisible="False" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_newItem.png" VerticalAlignment="Top" HorizontalAlignment="Right" Stretch="None">
                            <Image.Style>
                                <Style TargetType="{x:Type Image}">
                                    <Setter Property="Visibility" Value="Collapsed" />
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Item.IsNew}" Value="True">
                                            <Setter Property="Visibility" Value="Visible" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Image.Style>
                        </Image>
                    </ls:LSEntityObject>
                    <Image Style="{StaticResource RarityFrameForegroundImageStyle}"/>
                </Grid>

                <!-- Highlight slot when hovered -->
                <Canvas IsHitTestVisible="False">
                    <Canvas.Style>
                        <Style TargetType="Canvas">
                            <Setter Property="Background" Value="Transparent"/>
                            <Style.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background">
                                        <Setter.Value>
                                            <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/selector_slot_inv.png"/>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </Canvas.Style>
                </Canvas>

            </Grid>
        </ContentControl>
    </DataTemplate>

    <!--Available Equipment Grid -->
    <ControlTemplate x:Key="AvailableEquipmentGrid">
        <ItemsControl ItemsSource="{Binding EquipmentView.InventoryViewSlots}" ItemTemplate="{StaticResource EquipmentCellTemplate}">
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <ls:LSGrid x:Name="EquipGrid" Columns="{DynamicResource invCols}" Rows="{DynamicResource invRows}" 
                                Visibility="{Binding ShowAvailableEquipment, Converter={StaticResource BoolToVisibleConverter}, ConverterParameter='True'}"
                                ContainerData="{Binding EquipmentView}" Background="{StaticResource InventoryCell2x2Brush}"
                                CellWidth="{DynamicResource InvSlotSize}" CellHeight="{DynamicResource InvSlotSize}" 
                                VerticalSpacing="{DynamicResource InvSpacing}" HorizontalSpacing="{DynamicResource InvSpacing}" 
                                ActionUpEvent="UIUp" ActionDownEvent="UIDown" ActionRightEvent="UIRight" ActionLeftEvent="UILeft">
                        <i:Interaction.Behaviors>
                            <ls:DropOnInventoryGridBehavior />
                            <ls:DragGameObjectGridBehavior/>
                        </i:Interaction.Behaviors>
                    </ls:LSGrid>
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
        </ItemsControl>
    </ControlTemplate>

    <Style x:Key="EquipmentSlotTemplateStyle" TargetType="Control">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid Background="{DynamicResource EquipmentSlotBg}" Width="{DynamicResource ItemIconSize}" Height="{DynamicResource ItemIconSize}">
                        <Rectangle Style="{StaticResource RarityFrameBackgroundRectangleStyle}"/>
                        <ls:LSEntityObject EntityRef="{Binding Item.EntityHandle}" Context="Inventory" Background="{Binding Item.Icon}"/>
                        <Image Style="{StaticResource RarityFrameForegroundImageStyle}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Opacity" Value="1.0"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding EquippedType}" Value="None">
                <Setter Property="Template" >
                    <Setter.Value>
                        <ControlTemplate >
                            <Grid Width="{DynamicResource ItemIconSize}" Height="{DynamicResource ItemIconSize}" Background="Transparent"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Tag,ElementName=equipmentPanel}" Value="False">
                <Setter Property="Opacity" Value="{DynamicResource OtherPlayersItemOpacity}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding EquippedType}" Value="FromTwoHanded">
                <Setter Property="Opacity" Value="0.75"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="SelectedEquipmentSlotTextBlockStyle" TargetType="TextBlock">
        <Setter Property="FontSize" Value="{DynamicResource SmallFontSize}"/>
        <Setter Property="Foreground" Value="{DynamicResource LS_InfoColor1}"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding SelectedSlotType}" Value="Helmet">
                <Setter Property="Text" Value="{Binding Source='h58b71a66g5678g4147g937cg48c99e07c2d5',Converter={StaticResource TranslatedStringConverter}, ConverterParameter='ToUpper'}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SelectedSlotType}" Value="Breast">
                <Setter Property="Text" Value="{Binding Source='h68f694c7g0fb3g4834gaac5gf97f2b38c8a7',Converter={StaticResource TranslatedStringConverter}, ConverterParameter='ToUpper'}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SelectedSlotType}" Value="Cloak">
                <Setter Property="Text" Value="{Binding Source='h964f4414g7c0bg4715g831eg39bf21ce2745',Converter={StaticResource TranslatedStringConverter}, ConverterParameter='ToUpper'}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SelectedSlotType}" Value="MeleeMainHand">
                <Setter Property="Text" Value="{Binding Source='h0e518959g37d5g4e35gbf7egc6afda67a039',Converter={StaticResource TranslatedStringConverter}, ConverterParameter='ToUpper'}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SelectedSlotType}" Value="MeleeOffHand">
                <Setter Property="Text" Value="{Binding Source='h7cdae3b4g06abg4a48g8823ge88f2a4780f4',Converter={StaticResource TranslatedStringConverter}, ConverterParameter='ToUpper'}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SelectedSlotType}" Value="RangedMainHand">
                <Setter Property="Text" Value="{Binding Source='hc329f807gcc38g44ecgb42eg48c2cb68decf',Converter={StaticResource TranslatedStringConverter}, ConverterParameter='ToUpper'}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SelectedSlotType}" Value="RangedOffHand">
                <Setter Property="Text" Value="{Binding Source='hfa1f065fgade6g4c9bg994dgb9878543c145',Converter={StaticResource TranslatedStringConverter}, ConverterParameter='ToUpper'}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SelectedSlotType}" Value="Ring">
                <Setter Property="Text" Value="{Binding Source='hc30ca60cgaa5cg40c5gad5dgd3f1d5857138',Converter={StaticResource TranslatedStringConverter}, ConverterParameter='ToUpper'}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SelectedSlotType}" Value="Belt">
                <Setter Property="Text" Value="{Binding Source='h0f579c48g7258g4366g96e7g01c5b072eacc',Converter={StaticResource TranslatedStringConverter}, ConverterParameter='ToUpper'}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SelectedSlotType}" Value="Boots">
                <Setter Property="Text" Value="{Binding Source='h7391420agc641g4cc8gae1bgb575af1ddf56',Converter={StaticResource TranslatedStringConverter}, ConverterParameter='ToUpper'}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SelectedSlotType}" Value="Gloves">
                <Setter Property="Text" Value="{Binding Source='h9f02bd2dg175fg4d2eg9c98gc24da803a7da',Converter={StaticResource TranslatedStringConverter}, ConverterParameter='ToUpper'}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SelectedSlotType}" Value="Amulet">
                <Setter Property="Text" Value="{Binding Source='hcfa38834g8bc7g4cfbg9ceag7fcea042f28f',Converter={StaticResource TranslatedStringConverter}, ConverterParameter='ToUpper'}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SelectedSlotType}" Value="Ring2">
                <Setter Property="Text" Value="{Binding Source='h46199a04ga3a5g4e27g8d33g96a06b50041c',Converter={StaticResource TranslatedStringConverter}, ConverterParameter='ToUpper'}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SelectedSlotType}" Value="Wings">
                <Setter Property="Text" Value="{Binding Source='h0aa05fd8gb25fg4ef7g8b8dga1aae9ff63dc',Converter={StaticResource TranslatedStringConverter}, ConverterParameter='ToUpper'}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SelectedSlotType}" Value="Horns">
                <Setter Property="Text" Value="{Binding Source='ha8c9326bg7634g4eb0gb4d0gef8807e3f0a9',Converter={StaticResource TranslatedStringConverter}, ConverterParameter='ToUpper'}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SelectedSlotType}" Value="Overhead">
                <Setter Property="Text" Value="{Binding Source='hd3cef5d2g4c6bg47f5g8b25g8500cb389599',Converter={StaticResource TranslatedStringConverter}, ConverterParameter='ToUpper'}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="CarouselOverview">
        <ListBox ItemsSource="{Binding ComboItems}" SelectedItem="{Binding SelectedItem}" IsHitTestVisible="False" Background="Transparent" BorderBrush="Transparent">
            <ListBox.ItemsPanel>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Height="24"/>
                </ItemsPanelTemplate>
            </ListBox.ItemsPanel>
            <ListBox.ItemContainerStyle>
                <Style TargetType="ListBoxItem">
                    <Setter Property="BorderThickness" Value="0" />
                    <Setter Property="BorderBrush" Value="Transparent" />
                    <Setter Property="Background" Value="Transparent" />
                    <Setter Property="Padding" Value="0" />
                    <Setter Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterCreation/overview_default.png" Stretch="None"/>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                    <Style.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="BorderBrush" Value="Transparent" />
                            <Setter Property="Background" Value="Transparent" />
                            <Setter Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterCreation/overview_active.png" Stretch="None"/>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </ListBox.ItemContainerStyle>
        </ListBox>
    </ControlTemplate>

    <ControlTemplate x:Key="StdFrameContentTemplate">
        <Grid x:Name="ContentContainer" Tag="" Background="{TemplateBinding Background}">
            <i:Interaction.Triggers>
                <!--FROM Other Panel-->
                <i:EventTrigger EventName="Loaded">
                    <i:Interaction.Behaviors>
                        <ei:ConditionBehavior>
                            <ei:ConditionalExpression>
                                <ei:ComparisonCondition LeftOperand="{Binding Tag, ElementName=ContentContainer}" RightOperand=""/>
                            </ei:ConditionalExpression>
                        </ei:ConditionBehavior>
                    </i:Interaction.Behaviors>
                    <ei:ControlStoryboardAction ControlStoryboardOption="Play">
                        <ei:ControlStoryboardAction.Storyboard>
                            <Storyboard>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)">
                                    <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="frFader" >
                                    <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="bgFader" BeginTime="0:0:0.12">
                                    <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                </DoubleAnimationUsingKeyFrames>

                                <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="frFader">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0.0" Value="{x:Static Visibility.Collapsed}"/>
                                </ObjectAnimationUsingKeyFrames>

                                <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="bgFader">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0.0" Value="{x:Static Visibility.Collapsed}"/>
                                </ObjectAnimationUsingKeyFrames>
                            </Storyboard>
                        </ei:ControlStoryboardAction.Storyboard>
                    </ei:ControlStoryboardAction>
                </i:EventTrigger>
                <!--FROM HUD-->
                <i:EventTrigger EventName="Loaded">
                    <i:Interaction.Behaviors>
                        <ei:ConditionBehavior>
                            <ei:ConditionalExpression>
                                <ei:ComparisonCondition LeftOperand="{Binding Tag, ElementName=ContentContainer}" RightOperand="FromHud"/>
                            </ei:ConditionalExpression>
                        </ei:ConditionBehavior>
                    </i:Interaction.Behaviors>
                    <ei:ControlStoryboardAction ControlStoryboardOption="Play">
                        <ei:ControlStoryboardAction.Storyboard>
                            <Storyboard>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)">
                                    <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.40" Value="1">
                                        <EasingDoubleKeyFrame.EasingFunction>
                                            <CubicEase EasingMode="EaseInOut"/>
                                        </EasingDoubleKeyFrame.EasingFunction>
                                    </EasingDoubleKeyFrame>
                                </DoubleAnimationUsingKeyFrames>
                                <Storyboard  BeginTime="0:0:0.20">
                                    <Storyboard.Children>
                                        <Storyboard Children="{StaticResource FadeOutBlackElements}"  />
                                    </Storyboard.Children>
                                </Storyboard>
                            </Storyboard>
                        </ei:ControlStoryboardAction.Storyboard>
                    </ei:ControlStoryboardAction>
                </i:EventTrigger>
            </i:Interaction.Triggers>
            
            <!--This introduces a small graceperiod that ignores input(spam) opening-->
            <ls:LSInputBinding x:Name="InputCooldown" AnyKey="True" PlayerId="{Binding CurrentPlayer.PlayerId}" >
                <ls:LSInputBinding.Triggers>
                    <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                        <BeginStoryboard>
                            <Storyboard>
                                <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.IsEnabled)" Storyboard.TargetName="InputCooldown">
                                    <DiscreteBooleanKeyFrame KeyTime="0:0:0.0" Value="True"/>
                                    <DiscreteBooleanKeyFrame KeyTime="{StaticResource PanelInputCooldownTime}" Value="False"/>
                                </BooleanAnimationUsingKeyFrames>
                            </Storyboard>
                        </BeginStoryboard>
                    </EventTrigger>
                </ls:LSInputBinding.Triggers>
            </ls:LSInputBinding>
            <Rectangle x:Name="bgFader" Fill="Black" IsHitTestVisible="False"/>
            <ContentPresenter/>
            <Rectangle x:Name="frFader" Fill="Black" IsHitTestVisible="False"/>
            
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding PreviousSourceState}" Value="">
                <Setter Property="Tag" Value="FromHud" TargetName="ContentContainer"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding PreviousSourceState}" Value="PlayerHUD">
                <Setter Property="Tag" Value="FromHud" TargetName="ContentContainer"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding PreviousSourceState}" Value="PlayerPanels">
                <Setter Property="Tag" Value="FromHud" TargetName="ContentContainer"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding PreviousSourceState}" Value="PanelSelect_c">
                <Setter Property="Tag" Value="FromHud" TargetName="ContentContainer"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding DataContext.CurrentPlayer.UIData.PreviousState , RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="CharacterOverview"/>
                    <Condition Binding="{Binding DataContext.CurrentPlayer.UIData.ActiveState , RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value=""/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Tag" Value="" TargetName="ContentContainer"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <ControlTemplate x:Key="InfoBar">
        <ControlTemplate.Resources>
            <Style TargetType="TextBlock">
                <Setter Property="Foreground" Value="{DynamicResource LS_PrimaryColor}"/>
            </Style>
            <ImageSource x:Key="frame">pack://application:,,,/GustavNoesisGUI;component/Assets/SheetGeneral/frame_listItem.png</ImageSource>
        </ControlTemplate.Resources>
        <Grid HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,2,0,2">
            <Image Source="{DynamicResource frame}" Stretch="None"/>
            <ContentPresenter/>
            <Image x:Name="highlight" Visibility="Hidden" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/SheetGeneral/selector_listItem.png" Stretch="None" IsHitTestVisible="False"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="highlight" Property="Visibility" Value="Visible"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="IconBar">
        <ContentControl Template="{StaticResource InfoBar}">
            <ContentControl.Resources>
                <ImageSource x:Key="frame">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/frame_listItemIcon.png</ImageSource>
            </ContentControl.Resources>
            <ContentPresenter/>
        </ContentControl>
    </ControlTemplate>

    <Style x:Key="icon" TargetType="Image">
        <Setter Property="DockPanel.Dock" Value="Left"/>
        <Setter Property="Stretch" Value="None"/>
        <Setter Property="Margin" Value="14,0,0,0"/>
    </Style>
    <Style x:Key="leftText" TargetType="TextBlock">
        <Setter Property="DockPanel.Dock" Value="Left"/>
        <Setter Property="Foreground" Value="{DynamicResource LS_PrimaryColor}"/>
        <Setter Property="Margin" Value="28,4,0,0"/>
    </Style>
    <Style x:Key="rightText" TargetType="TextBlock">
        <Setter Property="DockPanel.Dock" Value="Right"/>
        <Setter Property="TextAlignment" Value="Right"/>
        <Setter Property="Foreground" Value="{DynamicResource LS_PrimaryColor}"/>
        <Setter Property="Margin" Value="0,4,28,0"/>
    </Style>

    <ControlTemplate x:Key="CharacterSheetFeature">
        <Grid ToolTip="{StaticResource ManagedTooltip}" ToolTipService.Placement="Left" Margin="60,0,0,0">
            <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/SheetGeneral/ico_bullet.png" Stretch="None" HorizontalAlignment="Left"/>
            <ContentPresenter VerticalAlignment="Center" Margin="26,8,26,8"/>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="CharacterSheetProgressionFeatures">
        <StackPanel>
            <ItemsControl ItemsSource="{Binding Features.Boosts}">
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <ContentControl Template="{DynamicResource CharacterSheetDecorativeBoxFrame}" ToolTip="{StaticResource ManagedTooltip}">
                            <ContentControl Template="{StaticResource CharacterSheetFeature}" >
                                <TextBlock Foreground="{DynamicResource LS_PrimaryColor}" FontSize="{DynamicResource MediumFontSize}" TextWrapping="Wrap" >
                                    <i:Interaction.Behaviors>
                                        <ls:CtxTransStringRunGeneratorBehavior Source="{Binding NameCTS}" ParamRunStyle="{StaticResource TooltipUnitParamRun}"/>
                                    </i:Interaction.Behaviors>
                                </TextBlock>
                            </ContentControl>
                        </ContentControl>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
            <ItemsControl ItemsSource="{Binding Features.Abilities}">
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <ContentControl Template="{DynamicResource CharacterSheetDecorativeBoxFrame}" ToolTip="{StaticResource ManagedTooltip}">
                            <ContentControl Template="{StaticResource CharacterSheetFeature}" >
                                <Control Template="{StaticResource AbilityText}" />
                            </ContentControl>
                        </ContentControl>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
        </StackPanel>
    </ControlTemplate>

</ResourceDictionary>