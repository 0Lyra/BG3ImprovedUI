<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:System="clr-namespace:System;assembly=mscorlib"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
					xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
			        xmlns:b="http://schemas.microsoft.com/xaml/behaviors"

                    xmlns:ls="clr-namespace:ls;assembly=SharedGUI"
                    xmlns:noesis="clr-namespace:NoesisGUIExtensions;assembly=Noesis.GUI.Extensions"
					mc:Ignorable="d"   >

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/GustavNoesisGUI;component/Library/PanelAnimations.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/GustavNoesisGUI;component/Library/Tooltips.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <System:Double x:Key="HotBarSlotWidth">80</System:Double>
    <System:Double x:Key="HotBarSlotHeight">80</System:Double>
    <System:Int16 x:Key="MaxVisibleStatuses">3</System:Int16>
    
    <System:Double x:Key="ActionResources.ActionPointGroupSize">56</System:Double>
    <System:Double x:Key="ActionResources.ActionPointSize">48</System:Double>
    <System:Double x:Key="ActionResources.ActionPointSmallSize">24</System:Double>

	<BitmapImage x:Key="InvSlot_FilledOverlay" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Inventory/inventorySlot_filledOverlay.png" />
	<BitmapImage x:Key="InvSlot_Selector" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Inventory/selector_slot_inv.png" />
	<BitmapImage  x:Key="GoldIconImg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_gold.png" />

    <Style x:Key="VendorAttitudeImageStyle" TargetType="Image" >
        <Setter Property="DockPanel.Dock" Value="Left"/>
        <Setter Property="Stretch" Value="None"/>
        <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/vendorAttitude_02.png" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Attitude, Converter={StaticResource LessThanConverter}, ConverterParameter=-29}" Value="True">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/vendorAttitude_01.png" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Attitude, Converter={StaticResource LessThanConverter}, ConverterParameter=25}" Value="False">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/vendorAttitude_03.png" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Attitude, Converter={StaticResource GreaterThanConverter}, ConverterParameter=69}" Value="True">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/vendorAttitude_04.png" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="CharacterClassList">
        <ItemsControl AlternationCount="{Binding Stats.ClassList.Count}" ItemsSource="{Binding Stats.ClassList}" HorizontalAlignment="Center">
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Horizontal"/>
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <TextBlock Text="{Binding ClassDisplayName}" Foreground="{DynamicResource LS_ActivePanelFontColor}"/>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
    </ControlTemplate>

    <Style x:Key="PortraitGridStyle" TargetType="Grid">
        <Setter Property="Opacity" Value="1"/>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsCurrentTurn}" Value="False"/>
                    <Condition Binding="{Binding InTurnBasedMode}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Opacity" Value="0.65"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="AbilityIconStyle" TargetType="Image">
        <Setter Property="Stretch" Value="None"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Ability}" Value="Strength">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/AbilityIcons/strength.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Ability}" Value="Constitution">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/AbilityIcons/constitution.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Ability}" Value="Dexterity">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/AbilityIcons/dexterity.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Ability}" Value="Intelligence">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/AbilityIcons/intelligence.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Ability}" Value="Wisdom">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/AbilityIcons/wisdom.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Ability}" Value="Charisma">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/AbilityIcons/charisma.png"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="AbilityIconStatStyle" TargetType="Image">
        <Setter Property="Stretch" Value="None"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding IDString}" Value="Strength">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/AbilityIcons/strength.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Constitution">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/AbilityIcons/constitution.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Dexterity">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/AbilityIcons/dexterity.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Intelligence">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/AbilityIcons/intelligence.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Wisdom">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/AbilityIcons/wisdom.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Charisma">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/AbilityIcons/charisma.png"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="MainClassIconStyle" TargetType="Image" >
        <Setter Property="Stretch" Value="None"/>
        <!-- MOD START - Generic icon for no class selected -->
        <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/Generic.png"/>
        <!-- MOD END -->
        <Style.Triggers>
            <DataTrigger Binding="{Binding IDString}" Value="Barbarian">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/barbarian.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Bard">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/bard.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Cleric">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/cleric.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Druid">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/druid.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Fighter">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/fighter.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Paladin">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/paladin.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Ranger">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/ranger.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Rogue">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/rogue.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Sorcerer">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/sorcerer.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Warlock">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/warlock.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Wizard">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/wizard.png"/>
            </DataTrigger>
            <!-- MOD START - Custom Class icons -->
			<DataTrigger Binding="{Binding IDString}" Value="Monk">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/Icon_Class_Monk.dds"/>
            </DataTrigger>
            <!-- MOD END -->

        </Style.Triggers>

    </Style>

    <Style x:Key="MainClassIconHotbarStyle" TargetType="Image" >
        <Setter Property="Stretch" Value="None"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding IDString}" Value="Barbarian">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/hotbar/barbarian.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Bard">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/hotbar/bard.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Cleric">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/hotbar/cleric.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Druid">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/hotbar/druid.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Fighter">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/hotbar/fighter.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Paladin">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/hotbar/paladin.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Ranger">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/hotbar/ranger.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Rogue">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/hotbar/rogue.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Sorcerer">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/hotbar/sorcerer.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Warlock">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/hotbar/warlock.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Wizard">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/hotbar/wizard.png"/>
            </DataTrigger>

        </Style.Triggers>

    </Style>

    <Style x:Key="ClassIconHotbarStyle" TargetType="Image" BasedOn="{StaticResource MainClassIconHotbarStyle}">
        <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/hotbar/generic.png"/>
        <Style.Triggers>
            <!-- Subclass -->
            <DataTrigger Binding="{Binding SubclassIDString}" Value="BerserkerPath">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/hotbar/barbarian_berserker.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="TotemWarriorPath">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/hotbar/barbarian_totemWarrior.png"/>
            </DataTrigger>
            <!-- MOD START - Add previously removed subclass icon-->
            <DataTrigger Binding="{Binding SubclassIDString}" Value="WildMagicPath">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/hotbar/barbarian_wildMagic.png"/>
            </DataTrigger>
            <!-- MOD END -->
            <DataTrigger Binding="{Binding SubclassIDString}" Value="LoreCollege">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/hotbar/bard_lore.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="ValorCollege">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/hotbar/bard_valor.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="LifeDomain">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/hotbar/cleric_life.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="TrickeryDomain">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/hotbar/cleric_trickery.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="LightDomain">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/hotbar/cleric_light.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="Fiend">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/hotbar/warlock_fiend.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="GreatOldOne">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/hotbar/warlock_greatOldOne.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="EvocationSchool">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/hotbar/wizard_evocation.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="AbjurationSchool">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/hotbar/wizard_abjuration.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="Thief">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/hotbar/rogue_thief.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="Arcane Trickster">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/hotbar/rogue_trickster.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="Hunter">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/hotbar/ranger_hunter.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="BeastMaster">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/hotbar/ranger_beastmaster.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="BattleMaster">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/hotbar/fighter_battlemaster.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="EldritchKnight">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/hotbar/fighter_eldritchKnight.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="CircleOfTheLand">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/hotbar/druid_circleOfLand.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="CircleOfTheMoon">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/hotbar/druid_circleOfMoon.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="DraconicBloodline">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/hotbar/sorcerer_dragoniceBloodline.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="WildMagic">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/hotbar/sorcerer_wildMagic.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="Ancients">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/hotbar/paladin_oath_of_ancients.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="Devotion">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/hotbar/paladin_oath_of_devotion.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="Oathbreaker">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/hotbar/paladin_oathbreaker.png"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ClassIconStyle" TargetType="Image" BasedOn="{StaticResource MainClassIconStyle}">
        <Style.Triggers>
            <!-- Subclass -->
            <DataTrigger Binding="{Binding SubclassIDString}" Value="BerserkerPath">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/barbarian_berserker.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="TotemWarriorPath">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/barbarian_totemWarrior.png"/>
            </DataTrigger>
            <!-- MOD START - Add previously removed subclass icon-->
            <DataTrigger Binding="{Binding SubclassIDString}" Value="WildMagicPath">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/barbarian_wildMagic.png"/>
            </DataTrigger>
            <!-- MOD END -->
            <DataTrigger Binding="{Binding SubclassIDString}" Value="LoreCollege">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/bard_lore.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="ValorCollege">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/bard_valor.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="LifeDomain">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/cleric_life.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="TrickeryDomain">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/cleric_trickery.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="LightDomain">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/cleric_light.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="Fiend">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/warlock_fiend.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="GreatOldOne">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/warlock_greatOldOne.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="EvocationSchool">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/wizard_evocation.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="AbjurationSchool">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/wizard_abjuration.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="Thief">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/rogue_thief.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="Arcane Trickster">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/rogue_trickster.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="Hunter">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/ranger_hunter.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="BeastMaster">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/ranger_beastmaster.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="BattleMaster">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/fighter_battlemaster.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="EldritchKnight">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/fighter_eldritchKnight.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="CircleOfTheLand">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/druid_circleOfLand.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="CircleOfTheMoon">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/druid_circleOfMoon.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="DraconicBloodline">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/sorcerer_dragoniceBloodline.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="WildMagic">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/sorcerer_wildMagic.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="Ancients">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/paladin_ancients.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="Devotion">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/paladin_devotion.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="Oathbreaker">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/paladin_oathbreaker.png"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="MainClassSmallIconStyle" TargetType="Image" >
        <Setter Property="Stretch" Value="None"/>
        <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Class/ico_class_m_barbarian.png"/>
        <Style.Triggers>

            <!-- No Subclass-->
            <DataTrigger Binding="{Binding IDString}" Value="Bard">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Class/ico_class_m_bard.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Cleric">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Class/ico_class_m_cleric.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Druid">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Class/ico_class_m_druid.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Fighter">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Class/ico_class_m_fighter.png"/>
            </DataTrigger>
            <!-- MOD START - Add previously removed class icon-->
            <DataTrigger Binding="{Binding IDString}" Value="Monk">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Class/ico_class_m_monk.png"/>
            </DataTrigger>
            <!-- MOD END -->
            <DataTrigger Binding="{Binding IDString}" Value="Paladin">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Class/ico_class_m_paladin.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Ranger">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Class/ico_class_m_ranger.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Rogue">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Class/ico_class_m_rogue.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Sorcerer">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Class/ico_class_m_sorcerer.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Warlock">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Class/ico_class_m_warlock.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Wizard">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Class/ico_class_m_wizard.png"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="ClassIconSmall" TargetType="Control">
        <Image Stretch="None" Style="{StaticResource MainClassSmallIconStyle}" />
    </ControlTemplate>


    <!-- Character View, Party View Mode Switch Buttons-->


    <ControlTemplate x:Key="InventoryFilterButtons">
        <ls:LSListBox x:Name="invViewList"  
                      ActionPrevEvent="UITabPrev" ActionNextEvent="UITabNext"
                      ItemsSource="{Binding CurrentPlayer.UIData.InventoryTabList}" 
                      SelectedItem="{Binding CurrentPlayer.UIData.CurrentInventoryTab, Mode=OneWay}" 
                      ItemContainerStyle="{DynamicResource InventoryViewTabStyle}" 
                      Background="Transparent" BorderBrush="Transparent" 
                      ScrollViewer.HorizontalScrollBarVisibility="Disabled" 
                      ScrollViewer.VerticalScrollBarVisibility="Disabled">
            <b:Interaction.Triggers>
                <b:EventTrigger EventName="SelectionChanged">
                    <b:InvokeCommandAction Command="{Binding SetPartyInventoryViewCommand}" CommandParameter="{Binding ElementName=invViewList, Path=SelectedItem}"/>
                </b:EventTrigger>
            </b:Interaction.Triggers>
            <ls:LSListBox.ItemsPanel>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel IsItemsHost="True" Orientation="Horizontal" KeyboardNavigation.TabNavigation="Cycle" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                </ItemsPanelTemplate>
            </ls:LSListBox.ItemsPanel>
        </ls:LSListBox>
    </ControlTemplate>

    <Style x:Key="RarityFrameForegroundImageStyle" TargetType="Image">
        <Setter Property="IsHitTestVisible" Value="False"/>
        <Setter Property="Visibility" Value="Collapsed"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Item.Rarity}" Value="Uncommon">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/rarityFrame_uncommon_front.png"/>
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Item.Rarity}" Value="Rare">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/rarityFrame_rare_front.png"/>
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Item.Rarity}" Value="VeryRare">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/rarityFrame_veryrare_front.png"/>
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Item.Rarity}" Value="Legendary">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/rarityFrame_legendary_front.png"/>
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
	        <DataTrigger Binding="{Binding RitualCastEnabled}" Value="True">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/frame_ritual_h.png"/>
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Item.IsStoryItem}" Value="True">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/rarityFrame_story_front.png"/>
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="RarityFrameBackgroundImageStyle" TargetType="Image">
        <Setter Property="IsHitTestVisible" Value="False"/>
        <Setter Property="Visibility" Value="Collapsed"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Item.Rarity}" Value="Uncommon">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/rarityFrame_uncommon_back.png"/>
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Item.Rarity}" Value="Rare">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/rarityFrame_rare_back.png"/>
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Item.Rarity}" Value="VeryRare">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/rarityFrame_veryrare_back.png"/>
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Item.Rarity}" Value="Legendary">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/rarityFrame_legendary_back.png"/>
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Item.IsStoryItem}" Value="True">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/rarityFrame_story_back.png"/>
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="InvContainerListBoxItemStyle" TargetType="ListBoxItem"  BasedOn="{StaticResource {x:Type ListBoxItem}}">
        <Setter Property="Padding" Value="0"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <ContentControl ToolTipService.Placement ="Right">
                        <ContentControl.ToolTip>
                            <ls:LSTooltip Content="{Binding DataContext.Item,RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                        </ContentControl.ToolTip>
                        <b:Interaction.Triggers>
                            <b:EventTrigger EventName="MouseDoubleClick" >
                                <b:InvokeCommandAction Command="{Binding DataContext.TakeItemCommand.ActionCommand,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding Item}" />
                            </b:EventTrigger>
                        </b:Interaction.Triggers>
                        <Grid  Width="{DynamicResource ContInvSlotSize}" Height="{DynamicResource ContInvSlotSize}">
                            <Image Source="{StaticResource InvSlot_FilledOverlay}"/>
                            <ContentPresenter />
                            <Image  x:Name="SelectedImg" Source="{StaticResource InvSlot_Selector}" IsHitTestVisible="False" Visibility="Hidden" Opacity="1.0" />
                        </Grid>
                    </ContentControl>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="SelectedImg" Property="Visibility" Value="Visible" />
                            <Setter TargetName="SelectedImg" Property="Opacity" Value="1.0"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="InventoryWaresCellItemImageStyle" TargetType="Image">
        <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_tab_wares.png" />
        <Setter Property="IsHitTestVisible" Value="False" />
        <Setter Property="Visibility" Value="Hidden" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Item.IsWare}" Value="True">
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="NewInventoryCellItemImageStyle" TargetType="Image">
        <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_newItem.png" />
        <Setter Property="Stretch" Value="None" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="IsHitTestVisible" Value="False" />
        <Setter Property="Visibility" Value="Collapsed" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Item.IsNew}" Value="True">
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="InventoryCellLabelStyle" TargetType="Label"  BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Content" Value="{Binding ItemViewAmount, Converter={StaticResource AbbreviateNumberConverter}}" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="VerticalAlignment" Value="Bottom" />
        <Setter Property="Foreground" Value="{DynamicResource LS_PrimaryColor}" />
        <Setter Property="FontSize" Value="{DynamicResource SmallFontSize}" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Background" Value="{x:Null}" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="noesis:Text.Stroke" Value="Black" />
        <Setter Property="noesis:Text.StrokeThickness" Value="8" />
        <Setter Property="Visibility" Value="Visible" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding ItemViewAmount}" Value="1">
                <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="InventoryInUseSlotIndicator">
        <Rectangle Name="active" Fill="White" Visibility="{Binding Item.IsInUse, Converter={StaticResource BoolToVisibleConverter}}">
            <Rectangle.Triggers>
                <EventTrigger RoutedEvent="Rectangle.Unloaded">
                    <StopStoryboard BeginStoryboardName="InUseSlotIndicatorAnim" />
                </EventTrigger>
            </Rectangle.Triggers>
        </Rectangle>
        <ControlTemplate.Triggers>
            <Trigger Property="Visibility" Value="Visible" SourceName="active">
                <Trigger.EnterActions>
                    <BeginStoryboard x:Name="InUseSlotIndicatorAnim">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="active" Storyboard.TargetProperty="Opacity" From="0.70" To="0.50" Duration="0:0:0.5" AutoReverse="True" RepeatBehavior="Forever">
                                <DoubleAnimation.EasingFunction>
                                    <PowerEase EasingMode="EaseInOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <StopStoryboard BeginStoryboardName="InUseSlotIndicatorAnim" />
                </Trigger.ExitActions>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <DataTemplate x:Key="InventoryItemCellTemplate">
        <Grid Width="{DynamicResource ItemIconSize}" Height="{DynamicResource ItemIconSize}">
            <Image Style="{StaticResource RarityFrameBackgroundImageStyle}"/>
            <ls:LSEntityObject Context="Inventory" EntityRef="{Binding Item.EntityHandle}" Background="{Binding Item.Icon}">
                <Image Style="{StaticResource InventoryWaresCellItemImageStyle}"/>
                <Label Style="{StaticResource InventoryCellLabelStyle}" IsHitTestVisible="False"/>
                <Image Style="{StaticResource NewInventoryCellItemImageStyle}"/>

                <!-- Disable slot if the item is in use -->
                <Control IsHitTestVisible="True" Template="{StaticResource InventoryInUseSlotIndicator}"/>

            </ls:LSEntityObject>
            <Image Style="{StaticResource RarityFrameForegroundImageStyle}"/>
        </Grid>
    </DataTemplate>


    <DataTemplate x:Key="Template.ContainerCell">
        <Grid Width="{DynamicResource ContItemIconSize}" Height="{DynamicResource ContItemIconSize}">
            <Image Style="{StaticResource RarityFrameBackgroundImageStyle}"/>
            <ls:LSEntityObject EntityRef="{Binding Item.EntityHandle}" Context="{Binding DataContext.ContainerContext,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Background="{Binding Item.Icon}">
                <Image Style="{StaticResource InventoryWaresCellItemImageStyle}"/>
                <Label Style="{StaticResource InventoryCellLabelStyle}" IsHitTestVisible="False"/>
            </ls:LSEntityObject>
            <Image Style="{StaticResource RarityFrameForegroundImageStyle}"/>
            <b:Interaction.Triggers>
                <b:EventTrigger EventName="MouseEnter">
                    <ls:LSPlaySound Sound="UI_Shared_Hover"/>
                </b:EventTrigger>
            </b:Interaction.Triggers>
        </Grid>
    </DataTemplate>

    <!-- Empty cell Representation -->
    <DataTemplate x:Key="EmptyCellTemplate">
        <Image Source="{DynamicResource InventoryCellImage}" Stretch="None"/>
    </DataTemplate>

    <ControlTemplate x:Key="InventoryCellTemplate" >
        <ControlTemplate.Resources>

        </ControlTemplate.Resources>
        <!-- This is a ContentControl to facilitate the interaction eventtriggers -->
        <ContentControl x:Name="invCellBase" ToolTipService.Placement="Right" Tag="{Binding DataContext,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
            <ContentControl.ToolTip>
                <ls:LSTooltip Content="{Binding Path=DataContext.Item, RelativeSource={RelativeSource Mode=TemplatedParent}}" ls:TooltipExtender.Owner="{Binding Tag.CurrentPlayer.SelectedCharacter, ElementName=invCellBase}"/>
            </ContentControl.ToolTip>
            <b:Interaction.Triggers>
                <b:EventTrigger EventName="MouseLeftButtonUp">
                    <b:InvokeCommandAction Command="{Binding DataContext.ToggleWare, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding Item}"/>
                </b:EventTrigger>
                <b:EventTrigger EventName="MouseDoubleClick" >
                    <b:Interaction.Behaviors>
                        <b:ConditionBehavior >
                            <b:ConditionalExpression>
                                <b:ComparisonCondition LeftOperand="{Binding DataContext.CurrentPlayer.UIData.CurrentExtractedPanelContext, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, FallbackValue=None}" Operator="Equal" RightOperand="None"/>
                            </b:ConditionalExpression>
                        </b:ConditionBehavior>
                    </b:Interaction.Behaviors>
                    <b:InvokeCommandAction Command="{Binding DataContext.UseGameObject,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding Item}" />
                </b:EventTrigger>
                <b:EventTrigger EventName="MouseDoubleClick" >
                    <b:Interaction.Behaviors>
                        <b:ConditionBehavior >
                            <b:ConditionalExpression>
                                <b:ComparisonCondition LeftOperand="{Binding DataContext.CurrentPlayer.UIData.CurrentExtractedPanelContext, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Operator="Equal" RightOperand="Combine"/>
                            </b:ConditionalExpression>
                        </b:ConditionBehavior>
                    </b:Interaction.Behaviors>
                    <b:InvokeCommandAction Command="{Binding DataContext.AddToCombine,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding Item}" />
                </b:EventTrigger>
                <b:EventTrigger EventName="MouseEnter">
                    <b:InvokeCommandAction Command="{Binding DataContext.ClearItemNewFlag, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding Item}"/>
                    <ls:LSPlaySound Sound="UI_Shared_Hover"/>
                </b:EventTrigger>
            </b:Interaction.Triggers>
            <Grid>
                <Image Source="{StaticResource InvSlot_FilledOverlay}" Width="{DynamicResource InvSlotSize}" Height="{DynamicResource InvSlotSize}"/>
                <ContentPresenter ContentTemplate="{StaticResource InventoryItemCellTemplate}"/>
                <Image  x:Name="SelectedImg" Source="{StaticResource InvSlot_Selector}" IsHitTestVisible="False" Visibility="Hidden" Stretch="None"/>
            </Grid>
        </ContentControl>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="SelectedImg" Property="Visibility" Value="Visible" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--Inventory Grid-->
    <Style TargetType="ListBox" x:Key="InventoryGrid" BasedOn="{StaticResource {x:Type ListBox}}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Visible" />
        <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Recycling"/>
        <Setter Property="VirtualizingPanel.ScrollUnit" Value="Pixel"/>
        <Setter Property="ItemsPanel" >
            <Setter.Value>
                <ItemsPanelTemplate>
                    <ls:LSGrid x:Name="InvGrid" Background="{StaticResource InventoryCell2x2Brush}" noesis:Element.PPAAMode="Disabled" SnapsToDevicePixels="True" ContainerData="{Binding }" 
                               Columns="{DynamicResource invCols}" Rows="{DynamicResource invRows}" ScrollAmount="114"
                               CellWidth="{DynamicResource InvSlotSize}" CellHeight="{DynamicResource InvSlotSize}" VerticalSpacing="{DynamicResource InvSpacing}" HorizontalSpacing="{DynamicResource InvSpacing}" 
                               ActionUpEvent="UIUp" ActionDownEvent="UIDown" ActionRightEvent="UIRight" ActionLeftEvent="UILeft">
                        <ls:LSGrid.Style>
                            <Style TargetType="ls:LSGrid">
                                <Setter Property="Margin" Value="0,4,0,0" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding DataContext.Data.UIInputMethod, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Controller">
                                        <Setter Property="Margin" Value="0,0,0,0" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ls:LSGrid.Style>
                        <b:Interaction.Behaviors>
                            <ls:DropOnInventoryGridBehavior />
                            <ls:DragGameObjectGridBehavior/>
                        </b:Interaction.Behaviors>
                        <b:Interaction.Triggers>
                            <b:EventTrigger EventName="WidgetClosing">
                                <b:InvokeCommandAction Command="{Binding DataContext.ClearInventoryNewFlags, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding }"/>
                            </b:EventTrigger>
                        </b:Interaction.Triggers>
                    </ls:LSGrid>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="ListBoxItem">
                    <Setter Property="Template" Value="{StaticResource InventoryCellTemplate}" />
                    <Setter Property="BorderBrush" Value="Transparent" />
                    <Setter Property="Background" Value="Transparent" />
                    <Setter Property="Width" Value="{DynamicResource InvSlotSize}" />
                    <Setter Property="Height" Value="{DynamicResource InvSlotSize}" />
                    <Setter Property="Padding" Value="0" />
                    <Setter Property="BorderThickness" Value="0" />
                    <Setter Property="VerticalContentAlignment" Value="Top"/>
                    <Style.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="BorderBrush" Value="Transparent" />
                            <Setter Property="Background" Value="Transparent" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="Transparent" />
                            <Setter Property="Background" Value="Transparent" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Character type textbox -->
    <DataTemplate x:Key="CharacterTypeTextbox">
        <TextBlock Height="20" Foreground="Black" FontSize="{DynamicResource TinyFontSize}">
            <TextBlock.Style>
                <Style TargetType="{x:Type TextBlock}">
                    <Setter Property="Text" Value="{x:Null}"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding CharacterType}" Value="Avatar">
                            <Setter Property="Text" Value="{Binding Source='ha635e2bfga0f5g4d71g8a1bg80dfebf93101', Converter={StaticResource TranslatedStringConverter}, ConverterParameter='ToUpper'}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding CharacterType}" Value="Companion">
                            <Setter Property="Text" Value="{Binding Source='h0f49a5c4g802ag496dg9fc0g6e6224307f51', Converter={StaticResource TranslatedStringConverter}, ConverterParameter='ToUpper'}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding CharacterType}" Value="Summon">
                            <Setter Property="Text" Value="{Binding Source='hce7e00b6ge11dg41f8ga991gf3eca0afb89f', Converter={StaticResource TranslatedStringConverter}, ConverterParameter='ToUpper'}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding CharacterType}" Value="Follower">
                            <Setter Property="Text" Value="{Binding Source='hd0338633ga351g4d67gac56ge2c21883f875', Converter={StaticResource TranslatedStringConverter}, ConverterParameter='ToUpper'}"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </TextBlock.Style>
        </TextBlock>
    </DataTemplate>

    <!--interrupts-->
	<BitmapImage x:Key="QuestionMarkIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Reactions/ico_questionMark.png"/>
    <BitmapImage x:Key="ReactionCheckImg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Reactions/ico_check_d.png"/>
    <BitmapImage x:Key="ReactionCheckImgH" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Reactions/ico_check_h.png"/>
    <System:Double x:Key="InterruptIconSize">80</System:Double>
    <System:Double x:Key="InterruptQuestionSize">48</System:Double>
    <System:Double x:Key="InterruptNumberFontSize">32</System:Double>
    <Style x:Key="InterruptIconRootStyle" TargetType="Grid">
        <Setter Property="ToolTipService.Placement" Value="Right"/>
    </Style>
    <DataTemplate x:Key="InterruptIcon" DataType="ls:VMInterrupt">
        <Grid x:Name="InterruptRoot" ToolTip="{StaticResource ManagedTooltip}" Style="{DynamicResource InterruptIconRootStyle}" Background="Transparent">
            <!--size is dynamic since it's different in hotbar-->
            <Rectangle Fill="{Binding Icon}" Width="{DynamicResource InterruptIconSize}" Height="{DynamicResource InterruptIconSize}" />
            <Rectangle x:Name="Overlay" Fill="{StaticResource LS_tint100}" Opacity="0.23" Visibility="Collapsed" noesis:Element.BlendingMode="Additive"/>
            <Image x:Name="QuestionIcon" Stretch="Uniform" Source="{StaticResource QuestionMarkIcon}" Visibility="{Binding Ask,Converter={StaticResource BoolToVisibleConverter}}" VerticalAlignment="Top" HorizontalAlignment="Right" Height="{DynamicResource InterruptQuestionSize}"/>
            <TextBlock x:Name="lvl" Text="{Binding Level , Converter={StaticResource DecimalToRomanConverter}}" Visibility="{Binding Level, Converter={StaticResource CountToVisibilityConverter}, ConverterParameter=1}" FontSize="{DynamicResource InterruptNumberFontSize}" HorizontalAlignment="Right" VerticalAlignment="Bottom" noesis:Text.Stroke="{StaticResource LS_tint00}" noesis:Text.StrokeThickness="4" Margin="0,0,0,-8"/>
            <Rectangle x:Name="DisabledOverlay" Fill="Black" Opacity="0.4" Visibility="Collapsed"/>
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding IsMouseOver,ElementName=InterruptRoot}" Value="True">
	            <Setter TargetName="Overlay" Property="Visibility" Value="Visible"/>
            </DataTrigger>
	        <DataTrigger Binding="{Binding Enabled}" Value="False">
                <Setter TargetName="DisabledOverlay" Property="Visibility" Value="Visible"/>
            </DataTrigger>
	        <DataTrigger Binding="{Binding Available}" Value="False">
		        <Setter TargetName="DisabledOverlay" Property="Opacity" Value="0.66"/>
		        <Setter TargetName="DisabledOverlay" Property="Visibility" Value="Visible"/>
	        </DataTrigger>
            <DataTrigger Binding="{Binding CanUse}" Value="False">
                <Setter TargetName="DisabledOverlay" Property="Visibility" Value="Visible"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <ControlTemplate x:Key="InterruptToggleBtnTemplate" TargetType="ToggleButton">
        <ControlTemplate.Resources>
            <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                <Setter Property="FontSize" Value="{DynamicResource ScaledSmallFontSize}" />
                <Setter Property="TextWrapping" Value="Wrap" />
                <Setter Property="MaxWidth" Value="600" />
                <Setter Property="IsHitTestVisible" Value="False" />
            </Style>
	        <BitmapImage x:Key="ReactionLiImg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Reactions/li_reaction_d_active.png"/>
            <Style TargetType="ContentPresenter">
                <Style.Resources>
                    <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                        <Setter Property="VerticalAlignment" Value="Center"/>
                        <Setter Property="TextWrapping" Value="Wrap" />
                        <Setter Property="Foreground" Value="{StaticResource LS_tint100}"/>
                    </Style>
                </Style.Resources>
            </Style>
	        <DataTemplate DataType="ls:VMInterrupt">
                <Grid >
	                <Grid.ColumnDefinitions>
	                    <ColumnDefinition Width="Auto"/>
	                    <ColumnDefinition />
	                </Grid.ColumnDefinitions>
	                <Grid.RowDefinitions>
	                    <RowDefinition/>
	                    <RowDefinition/>
	                </Grid.RowDefinitions>

	                <ContentPresenter x:Name="Icon" Grid.Column="0" Grid.RowSpan="2" ContentTemplate="{StaticResource InterruptIcon}" Content="{Binding .}" IsHitTestVisible="False" Margin="0,0,10,0" VerticalAlignment="Center"/>
	                <TextBlock x:Name="Name" Grid.Column="1" Text="{Binding Name}" Foreground="{StaticResource LS_tint100}" HorizontalAlignment="Left"/>
	                <ItemsControl x:Name="CostList" Grid.Column="1" Grid.Row="1" AlternationCount="{Binding Costs.Count}" ItemsSource="{Binding Costs}" Visibility="{Binding Costs.Count, Converter={StaticResource CountToVisibilityConverter}}" Margin="0,4,0,0">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <WrapPanel/>
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                    <ItemsControl.ItemTemplate>
                        <DataTemplate>
                            <StackPanel Orientation="Horizontal" ToolTip="{StaticResource ManagedTooltip}" ToolTipService.IsEnabled="True" ToolTipService.Placement="Right" >
	                            <TextBlock Style="{StaticResource SectionResourceNameStyle}" VerticalAlignment="Center" Text="{Binding MaxValue, StringFormat='{}{0}'}" Visibility="{Binding MaxValue, Converter={StaticResource CountToVisibilityConverter}, ConverterParameter='1'}" Margin="0,0,8,0"/>
	                            <Image Stretch="None" Style="{StaticResource SectionImageStyle}"/>
	                            <TextBlock Style="{StaticResource SectionResourceNameStyle}" VerticalAlignment="Center" Text="{Binding Level, Converter={StaticResource DecimalToRomanConverter}}" Visibility="{Binding Level, Converter={StaticResource CountToVisibilityConverter}, ConverterParameter='1'}" Margin="0,0,0,0"/>
                            </StackPanel>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
	                </ItemsControl>
                    <TextBlock x:Name="AvailableMsg" Grid.Column="1" Grid.Row="1" Text="{Binding Source=h7bb323e1g2294g4f5eg905eg82ae9d71abf0,Converter={StaticResource TranslatedStringConverter}}" Foreground="{StaticResource LS_alertTxtColor}" Visibility="Collapsed"/>
                </Grid>
                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding Enabled}" Value="False">
                        <Setter TargetName="Name" Property="Foreground" Value="{StaticResource LS_baseTxtColor}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Available}" Value="False">
                        <Setter TargetName="Name" Property="Foreground" Value="{StaticResource LS_accent00TxtColor}"/>
                        <Setter TargetName="CostList" Property="Visibility" Value="Collapsed"/>
                        <Setter TargetName="AvailableMsg" Property="Visibility" Value="Visible"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding CanUse}" Value="False">
                        <Setter TargetName="Name" Property="Foreground" Value="{StaticResource LS_baseTxtColor}"/>
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>
        </ControlTemplate.Resources>
        <Grid x:Name="rootIntTemp" ToolTipService.IsEnabled="False"  ToolTipService.Placement="Right" ToolTipService.VerticalOffset="-74">
            <Grid.ToolTip>
                <ls:LSTooltip x:Name="InterruptTooltip" Content="{Binding Path=Content, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
            </Grid.ToolTip>
	        <Image x:Name="BtnBG" Source="{StaticResource ReactionLiImg}" Stretch="None"/>
            <ContentPresenter Margin="60,14,10,14" />
            <Image x:Name="BtnCheck" Source="{StaticResource ReactionCheckImg}" Stretch="None" Visibility="Visible" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="-2,-6,0,0"/>
        </Grid>

        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=Content,Converter={StaticResource TypeConverter}, RelativeSource={RelativeSource Mode=Self}}" Value="ls.VMInterrupt">
                <Setter TargetName="rootIntTemp" Property="ToolTipService.ShowOnDisabled" Value="True"/>
                <Setter TargetName="rootIntTemp" Property="ToolTipService.IsEnabled" Value="True"/>
                <Setter TargetName="InterruptTooltip" Property="Content" Value="{Binding Path=Content, RelativeSource={RelativeSource Mode=Self}}" />

            </DataTrigger>
	        <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="BtnBG" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Reactions/li_reaction_h_active.png"/>
                <Setter TargetName="BtnCheck" Property="Source" Value="{StaticResource ReactionCheckImgH}"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="False">
                <Setter TargetName="BtnBG" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Reactions/li_reaction_d_inactive.png"/>
                <Setter TargetName="BtnCheck" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="IsChecked" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="BtnBG" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Reactions/li_reaction_h_inactive.png"/>
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="BtnBG" Property="Visibility" Value="Hidden"/>
            </Trigger>

            <DataTrigger Binding="{Binding Available}" Value="False">
                <Setter TargetName="BtnBG" Property="Visibility" Value="Visible"/>
                <Setter TargetName="BtnBG" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Reactions/li_reaction_d_disabled.png"/>
                <Setter TargetName="BtnCheck" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Reactions/ico_check_disabled.png"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <!-- HotBar BEGIN -->

    <ControlTemplate x:Key="HotBarActiveSlotIndicator">
        <Canvas>
            <ls:AnimatedImage x:Name="PassiveEnergyFill" Template="{StaticResource BaseAnimatedImage}" Canvas.Top="-63" Canvas.Left="-72" ClipSize="215,215" RepeatBehavior="Forever" Time="0:0:0.033" LastFrame="59" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/VFX/animSelected.png"/>
        </Canvas>
    </ControlTemplate>

    <ControlTemplate x:Key="HotBarActiveSlotIndicatorPassive">
        <Ellipse Name="PassiveSlotAnimFrame" StrokeThickness="4" Visibility="{Binding IsActive, Converter={StaticResource BoolToVisibleConverter}}">
            <Ellipse.Stroke>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="White" Offset="0"/>
                    <GradientStop Color="Transparent" Offset="1"/>
                </LinearGradientBrush>
            </Ellipse.Stroke>
            <Ellipse.Triggers>
                <EventTrigger RoutedEvent="FrameworkElement.Unloaded">
                    <StopStoryboard BeginStoryboardName="Bsb_Passive"/>
                </EventTrigger>
            </Ellipse.Triggers>
        </Ellipse>
        <ControlTemplate.Triggers>
            <Trigger Property="Visibility" Value="Visible" SourceName="PassiveSlotAnimFrame">
                <Trigger.EnterActions>
                    <BeginStoryboard x:Name="Bsb_Passive" Storyboard="{StaticResource GradientChaser}"/>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <StopStoryboard BeginStoryboardName="Bsb_Passive"/>
                </Trigger.ExitActions>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="HotBarActiveSlotIndicatorMetamagic">
        <Grid Width="{StaticResource HotBarSlotWidth}" Height="{StaticResource HotBarSlotHeight}">
            <ls:AnimatedImage x:Name="PassiveEnergyFill" Template="{StaticResource BaseAnimatedImage}" ClipSize="80,80" RepeatBehavior="1x" Time="0:0:0.033" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/VFX/roundEnergyFill.png" Visibility="Collapsed"/>
            <ls:AnimatedImage x:Name="PassiveFlameEdge" Template="{StaticResource BaseAnimatedImage}" ClipSize="80,80" LastFrame="41" RepeatBehavior="Forever" Time="0:0:0.033" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/VFX/roundFlameEdge.png" Opacity="0" Visibility="Collapsed"/>
            <Image x:Name="PassiveCover" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/VFX/roundIconCover.png" Visibility="Collapsed" Opacity="0"/>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding IsActive}" Value="True">
                <Setter Property="Visibility" Value="Visible" TargetName="PassiveEnergyFill"/>
                <Setter Property="Visibility" Value="Visible" TargetName="PassiveFlameEdge"/>
                <Setter Property="Visibility" Value="Visible" TargetName="PassiveCover"/>
                <DataTrigger.EnterActions>
                    <BeginStoryboard x:Name="FadeInPassiveFlameEdge">
                        <Storyboard RepeatBehavior="1x">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="PassiveFlameEdge">
                                <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0.0"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                    <BeginStoryboard x:Name="FadeInOutPassiveCover">
                        <Storyboard RepeatBehavior="1x">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="PassiveCover">
                                <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0.0"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>

                    <BeginStoryboard x:Name="LoopPassiveCover">
                        <Storyboard RepeatBehavior="Forever" BeginTime="0:0:0.5">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="PassiveCover">
                                <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:1" Value="0.6"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:2" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <StopStoryboard BeginStoryboardName="FadeInPassiveFlameEdge"/>
                    <StopStoryboard BeginStoryboardName="FadeInOutPassiveCover"/>
                    <StopStoryboard BeginStoryboardName="LoopPassiveCover"/>
                </DataTrigger.ExitActions>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--used for all texts in cells or slots like items, spells etc to have a consistent stroke everywhere -->
    <Style x:Key="CellTextStyle" TargetType="TextBlock" >
        <Setter Property="noesis:Text.Stroke" Value="#FF000000"/>
        <Setter Property="noesis:Text.StrokeThickness" Value="4"/>
        <Setter Property="Foreground" Value="{StaticResource LS_tint100}"/>
    </Style>

    <Style x:Key="EquippedTextStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CellTextStyle}">
        <Setter Property="Foreground" Value="{StaticResource LS_accent75TxtColor}" />
        <Setter Property="Background" Value="#90000000" />
        <Setter Property="IsHitTestVisible" Value="False" />
        <Setter Property="FontSize" Value="{DynamicResource ScaledLargeFontSize}"/>
    </Style>

    <Style x:Key="ItemAmountTextStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CellTextStyle}">
        <Setter Property="noesis:Text.StrokeThickness" Value="8"/>
        <Setter Property="FontSize" Value="{DynamicResource ScaledMediumFontSize}"/>
    </Style>

    <!-- Hotbar slot Representation START-->
    <Style x:Key="HotBarSlotStyle" TargetType="ls:LSButton" >
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="0"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="BoundEvent" Value="{Binding BoundEvent}"/>
        <Setter Property="Command" Value="{Binding DataContext.UseSlotCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
        <Setter Property="CommandParameter" Value="{Binding}"/>
        <Setter Property="SoundID" Value="UI_HUD_HotbarSlot"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ls:LSButton">
                    <ControlTemplate.Resources>
                        <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CellTextStyle}">
                            <Setter Property="FontWeight" Value="Bold" />
                        </Style>
                    </ControlTemplate.Resources>
                    <Grid x:Name="Slot">
                        <b:Interaction.Behaviors>
                            <ls:AdornedBehavior AdornerLayerOwner="{Binding RelativeSource={RelativeSource AncestorType=AdornerDecorator}}">
                                <ls:AdornedBehavior.IsAdornerVisible>
                                    <MultiBinding Converter="{StaticResource BoolAndConverter}">
                                        <Binding Path="IsActive"/>
                                        <Binding Path="IsVisible" ElementName="Slot"/>
                                    </MultiBinding>
                                </ls:AdornedBehavior.IsAdornerVisible>
                                <ls:AdornedBehavior.AdornerStyle>
                                    <Style TargetType="Control">
                                        <Setter Property="Template" Value="{StaticResource HotBarActiveSlotIndicator}"/>
                                        <Setter Property="IsHitTestVisible" Value="False"/>
                                        <Style.Triggers>
                                            <!-- Passives use a border in the template instead of this adorned behavior -->
                                            <DataTrigger Binding="{Binding SlotType}" Value="Passive">
                                                <Setter Property="Template" Value="{x:Null}" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding IconGlowEnabled}" Value="True">
                                                <Setter Property="Template" Value="{x:Null}" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding Passive.IsMetaMagic}" Value="True">
                                                <Setter Property="Template" Value="{StaticResource HotBarActiveSlotIndicatorMetamagic}" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ls:AdornedBehavior.AdornerStyle>
                            </ls:AdornedBehavior>
                        </b:Interaction.Behaviors>
                        <Grid Width="{DynamicResource HotBarSlotWidth}" Height="{DynamicResource HotBarSlotHeight}">
                            <Image Style="{StaticResource RarityFrameBackgroundImageStyle}"/>
                            <Rectangle x:Name="iconHolder" />
                            <Ellipse x:Name="passiveIconHolder" Visibility="{Binding Visibility, ElementName=iconHolder, Converter={StaticResource InvertVisibilityConverter}}"/>
                            <Image Style="{StaticResource RarityFrameForegroundImageStyle}"/>
                        </Grid>
                        <!-- GUS-216305 - Hiding spell slot level, to uncomment or remove according to results -->
                        <TextBlock x:Name="SpellSlotLevel" Text="{Binding Spell.SpellSlotLevel, Converter={StaticResource DecimalToRomanConverter}}" Foreground="{StaticResource LS_specialTxtColor}" VerticalAlignment="Bottom" HorizontalAlignment="Right" Height="35" Margin="0,0,3,0" FontSize="{DynamicResource ScaledMediumFontSize}"  noesis:Text.StrokeThickness="5" Visibility="{Binding (ls:AttachedProperties.InheritedTag), RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource BoolToVisibleConverter}}"/>
                        <TextBlock x:Name="HotKey" IsHitTestVisible="False" Text="{Binding HotKey}" Margin="4,0,0,-6" HorizontalAlignment="Left" VerticalAlignment="Bottom" FontSize="{DynamicResource SmallFontSize}" Visibility="Collapsed" />
                        <TextBlock x:Name="ItemAmount" IsHitTestVisible="False" Text="{Binding Item.Count}"  Margin="0,0,4,-2" HorizontalAlignment="Right" VerticalAlignment="Bottom" Visibility="Collapsed" Style="{StaticResource ItemAmountTextStyle}"/>
                        <TextBlock x:Name="EquippedText" Text="{Binding Source='h9079b9dcgb3b5g4f5cg9ca0gccadfa842d28',Converter={StaticResource TranslatedStringConverter}}" VerticalAlignment="Bottom" HorizontalAlignment="Right" Visibility="Collapsed" Style="{StaticResource EquippedTextStyle}"/>
                        <Image x:Name="SubSelectIndicator" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_spellSubSelectIndicator.png" Stretch="None" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,8,8,0" Visibility="Collapsed" />

                        <Grid x:Name="disCover" Visibility="Hidden" Opacity="0.5" Margin="-2,-2,0,0">
                            <Rectangle x:Name="disRect" Fill="Black"/>
                            <Ellipse Fill="Black" Visibility="{Binding Visibility, ElementName=disRect, Converter={StaticResource InvertVisibilityConverter}}"/>
                        </Grid>

                        <Grid x:Name="hover" Visibility="Hidden" Margin="-2,-2,0,0">
                            <Rectangle x:Name="hoverRect" Fill="#66FFFFFF" />
                            <Ellipse Fill="#66FFFFFF" Visibility="{Binding Visibility, ElementName=hoverRect, Converter={StaticResource InvertVisibilityConverter}}"/>
                        </Grid>

                        <!-- Icon glow animation slot (Metamagic, UnlockSpellVariant) -->
                        <Control IsHitTestVisible="False" Width="{StaticResource HotBarSlotWidth}" Height="{StaticResource HotBarSlotHeight}">
                            <Control.Template>
                                <ControlTemplate>
                                    <Grid>
                                        <!-- The borders are here because only one storyboard can manipulate a property at a time, so even starting a storyboard with a start delay, the storyboard will already take ownership of the property -->
                                        <Border x:Name="FadeFlameEdge" Visibility="Collapsed">
                                            <ls:AnimatedImage x:Name="MetamagicFlameEdge" Template="{StaticResource BaseAnimatedImage}" ClipSize="80,80" LastFrame="45" RepeatBehavior="Forever" Time="0:0:0.033" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/VFX/squareFlameEdge.png"/>
                                        </Border>

                                        <Border x:Name="FadeCover" Visibility="Collapsed">
                                            <Image x:Name="MetamagicCover" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/VFX/squareIconCover.png" />
                                        </Border>
                                        <Border x:Name="EnergyFill" Visibility="Collapsed">
                                            <ls:AnimatedImage x:Name="MetamagicEnergyFill" Template="{StaticResource BaseAnimatedImage}" ClipSize="80,80" RepeatBehavior="1x" Time="0:0:0.033" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/VFX/squareEnergyFill.png"/>
                                        </Border>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IconGlowEnabled}" Value="True"/>
                                                <Condition Binding="{Binding DataContext.CurrentPlayer.SelectedCharacter.CurrentSpellTask, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource NullToBoolTrueConverter}}" Value="True"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Visibility" Value="Visible" TargetName="EnergyFill"/>
                                            <Setter Property="Visibility" Value="Visible" TargetName="FadeFlameEdge"/>
                                            <Setter Property="Visibility" Value="Visible" TargetName="FadeCover"/>
                                            <MultiDataTrigger.EnterActions>
                                                <BeginStoryboard x:Name="EnergyFillControl">
                                                    <Storyboard>
                                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="EnergyFill">
                                                            <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="1"/>
                                                            <EasingDoubleKeyFrame KeyTime="0:0:0.55" Value="1"/>
                                                            <EasingDoubleKeyFrame KeyTime="0:0:0.6" Value="0"/>
                                                        </DoubleAnimationUsingKeyFrames>
                                                    </Storyboard>
                                                </BeginStoryboard>
                                                <BeginStoryboard x:Name="FadeInFlameEdge">
                                                    <Storyboard RepeatBehavior="1x" FillBehavior="Stop">
                                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="FadeFlameEdge">
                                                            <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0"/>
                                                            <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
                                                            <EasingDoubleKeyFrame KeyTime="0:0:0.6" Value="0.9"/>
                                                        </DoubleAnimationUsingKeyFrames>
                                                    </Storyboard>
                                                </BeginStoryboard>
                                                <BeginStoryboard x:Name="FadeInOutCover">
                                                    <Storyboard RepeatBehavior="1x" BeginTime="0:0:0.0" FillBehavior="Stop">
                                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="FadeCover">
                                                            <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0"/>
                                                            <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
                                                            <EasingDoubleKeyFrame KeyTime="0:0:0.6" Value="0.9"/>
                                                        </DoubleAnimationUsingKeyFrames>
                                                    </Storyboard>
                                                </BeginStoryboard>
                                                <BeginStoryboard x:Name="LoopFlameEdge">
                                                    <Storyboard RepeatBehavior="Forever" BeginTime="0:0:0.6">
                                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="MetamagicFlameEdge">
                                                            <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0.9"/>
                                                            <EasingDoubleKeyFrame KeyTime="0:0:1" Value="1"/>
                                                            <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.9"/>
                                                        </DoubleAnimationUsingKeyFrames>
                                                    </Storyboard>
                                                </BeginStoryboard>
                                                <BeginStoryboard x:Name="LoopCover">
                                                    <Storyboard RepeatBehavior="Forever" BeginTime="0:0:0.6">
                                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="MetamagicCover">
                                                            <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0.6"/>
                                                            <EasingDoubleKeyFrame KeyTime="0:0:1" Value="1"/>
                                                            <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.6"/>
                                                        </DoubleAnimationUsingKeyFrames>
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </MultiDataTrigger.EnterActions>
                                            <MultiDataTrigger.ExitActions>
                                                <StopStoryboard BeginStoryboardName="FadeInFlameEdge"/>
                                                <StopStoryboard BeginStoryboardName="FadeInOutCover"/>
                                                <StopStoryboard BeginStoryboardName="LoopFlameEdge"/>
                                                <StopStoryboard BeginStoryboardName="LoopCover"/>
                                                <StopStoryboard BeginStoryboardName="EnergyFillControl"/>
                                            </MultiDataTrigger.ExitActions>
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsActive}" Value="True"/>
                                                <Condition Binding="{Binding SlotType}" Value="Spell"/>
                                                <Condition Binding="{Binding IconGlowEnabled}" Value="True"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Visibility" Value="Visible" TargetName="FadeFlameEdge"/>
                                            <Setter Property="Visibility" Value="Visible" TargetName="FadeCover"/>
                                            <MultiDataTrigger.EnterActions>
                                                <BeginStoryboard x:Name="FixEdge">
                                                    <Storyboard RepeatBehavior="1x">
                                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="MetamagicFlameEdge">
                                                            <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0.9"/>
                                                            <EasingDoubleKeyFrame KeyTime="0:0:1" Value="1"/>
                                                            <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.9"/>
                                                        </DoubleAnimationUsingKeyFrames>
                                                    </Storyboard>
                                                </BeginStoryboard>
                                                <BeginStoryboard x:Name="LoopSpellCover">
                                                    <Storyboard RepeatBehavior="Forever">
                                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="MetamagicCover">
                                                            <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0.6"/>
                                                            <EasingDoubleKeyFrame KeyTime="0:0:1" Value="1"/>
                                                            <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.6"/>
                                                        </DoubleAnimationUsingKeyFrames>
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </MultiDataTrigger.EnterActions>
                                            <MultiDataTrigger.ExitActions>
                                                <StopStoryboard BeginStoryboardName="FixEdge"/>
                                                <StopStoryboard BeginStoryboardName="LoopSpellCover"/>
                                            </MultiDataTrigger.ExitActions>
                                        </MultiDataTrigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Control.Template>
                            <Control.Triggers>
                                <EventTrigger RoutedEvent="FrameworkElement.Unloaded">
                                    <StopStoryboard BeginStoryboardName="FadeInFlameEdge"/>
                                    <StopStoryboard BeginStoryboardName="FadeInOutCover"/>
                                    <StopStoryboard BeginStoryboardName="LoopFlameEdge"/>
                                    <StopStoryboard BeginStoryboardName="LoopCover"/>
                                    <StopStoryboard BeginStoryboardName="FixEdge"/>
                                    <StopStoryboard BeginStoryboardName="LoopSpellCover"/>
                                    <StopStoryboard BeginStoryboardName="EnergyFillControl"/>
                                </EventTrigger>
                            </Control.Triggers>
                        </Control>

                        <Control x:Name="ActiveSlotIndicatorPassive" IsHitTestVisible="False" Visibility="Collapsed" Template="{StaticResource HotBarActiveSlotIndicatorPassive}"/>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding SlotType}" Value="Passive"/>
                                <Condition Binding="{Binding IsActive}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="ActiveSlotIndicatorPassive" Property="Visibility" Value="Visible"/>
                        </MultiDataTrigger>

                        <DataTrigger Binding="{Binding DataContext.Data.UIInputMethod, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Keyboard">
                            <Setter Property="Visibility" Value="Visible" TargetName="HotKey"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Item.Count,Converter={StaticResource GreaterThanConverter},ConverterParameter=1}" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="ItemAmount"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Item.Count,Converter={StaticResource GreaterThanConverter},ConverterParameter=9999}" Value="True">
                            <Setter Property="Margin" Value="0,0,0,-2" TargetName="ItemAmount"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Name}" Value="">
                            <Setter Property="IsEnabled" Value="False"/>
                        </DataTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="hover"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding CanUse}" Value="False">
                            <Setter Property="Visibility" Value="Visible" TargetName="disCover"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Spell.IsContainer}" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="SubSelectIndicator" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding DataContext.PanelContentType, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Spell">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="SubSelectIndicator"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding CanUse}" Value="False"/>
                                <Condition Binding="{Binding Spell.IsContainer}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Command" Value="{x:Null}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding CanUse}" Value="False"/>
                                <Condition Binding="{Binding Spell.IsContainer}" Value="True"/>
                                <Condition Binding="{Binding DataContext.PanelContentType, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Spell"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility" Value="Visible" TargetName="disCover"/>
                            <Setter Property="Command" Value="{x:Null}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsActive}" Value="True"/>
                                <Condition Binding="{Binding SlotType}" Value="Spell"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Command" Value="{x:Null}"/>
                            <Setter Property="IsEnabled" Value="False"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsActive}" Value="True"/>
                                <Condition Binding="{Binding SlotType}" Value="Action"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Command" Value="{x:Null}"/>
                            <Setter Property="IsEnabled" Value="False"/>
                        </MultiDataTrigger>


                        <DataTrigger Binding="{Binding SlotType}" Value="Passive">
                            <!-- GUS-216305 - Hiding spell slot level, to uncomment or remove according to results -->
                            <!--<Setter Property="Visibility" Value="Collapsed" TargetName="SpellSlotLevel"/>-->
                            <Setter Property="Visibility" Value="Collapsed" TargetName="iconHolder"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="disRect"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="hoverRect"/>
                            <Setter TargetName="iconHolder" Property="Fill" Value="{Binding Passive.Icon}" />
                            <Setter TargetName="passiveIconHolder" Property="Fill" Value="{Binding Passive.Icon}" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding SlotType}" Value="Item">
                            <Setter TargetName="iconHolder" Property="Fill" Value="{Binding Item.Icon}" />
                            <Setter TargetName="passiveIconHolder" Property="Fill" Value="{Binding Item.Icon}" />
                        </DataTrigger>
                       
                        <DataTrigger Binding="{Binding SlotType}" Value="Spell">
                            <Setter TargetName="iconHolder" Property="Fill" Value="{Binding Spell.Icon}" />
                            <Setter TargetName="passiveIconHolder" Property="Fill" Value="{Binding Spell.Icon}" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding SlotType}" Value="Action">
                            <Setter TargetName="iconHolder" Property="Fill" Value="{Binding Spell.Icon}" />
                            <Setter TargetName="passiveIconHolder" Property="Fill" Value="{Binding Spell.Icon}" />
                        </DataTrigger>
                        
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding SlotType}" Value="Item"/>
                                <Condition Binding="{Binding Item.Equipped}" Value="ThisEquipped"/>
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter TargetName="EquippedText" Property="Visibility" Value="Visible"/>
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding SlotType}" Value="Item"/>
                                <Condition Binding="{Binding Item.Equipped}" Value="OtherEquipped"/>
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter TargetName="EquippedText" Property="Visibility" Value="Visible"/>
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding SlotType}" Value="Passive"/>
                    <Condition Binding="{Binding IsActive}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="SoundID" Value="UI_HUD_Passive_Untoggle"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding SlotType}" Value="Passive"/>
                    <Condition Binding="{Binding IsActive}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="SoundID" Value="UI_HUD_Passive_Toggle"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <DataTemplate x:Key="HotBarSlot" DataType="ls:VMHotBarSlot">
        <ContentControl x:Name="contentContainer" ToolTipService.IsEnabled="True" ToolTipService.Placement="Top" ls:TooltipExtender.Owner="{Binding DataContext.CurrentPlayer.SelectedCharacter, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
            <ContentControl.ToolTip>
                <ls:LSTooltip x:Name="hbTooltip" Content="" ls:TooltipExtender.Context="Hotbar" VerticalOffset="-60" ls:TooltipExtender.Owner="{Binding Path=(ls:TooltipExtender.Owner), ElementName=contentContainer}"/>
            </ContentControl.ToolTip>
            <b:Interaction.Triggers>
                <b:EventTrigger EventName="MouseEnter">
                    <b:InvokeCommandAction Command="{Binding DataContext.HighlightResourcesCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}"/>
                </b:EventTrigger>
                <b:EventTrigger EventName="MouseEnter">
                    <b:Interaction.Behaviors>
                        <b:ConditionBehavior>
                            <b:ConditionalExpression>
                                <b:ComparisonCondition LeftOperand="{Binding SlotType}" Operator="Equal" RightOperand="Item"/>
                            </b:ConditionalExpression>
                        </b:ConditionBehavior>
                    </b:Interaction.Behaviors>
                    <b:InvokeCommandAction Command="{Binding DataContext.SetDebugUIEntityCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding Item.EntityHandle}"/>
                </b:EventTrigger>
                <b:EventTrigger EventName="MouseLeave">
                    <b:InvokeCommandAction Command="{Binding DataContext.ClearResourceHighlightsCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}"/>
                </b:EventTrigger>
                <b:EventTrigger EventName="MouseLeave">
                    <b:Interaction.Behaviors>
                        <b:ConditionBehavior>
                            <b:ConditionalExpression>
                                <b:ComparisonCondition LeftOperand="{Binding SlotType}" Operator="Equal" RightOperand="Item"/>
                            </b:ConditionalExpression>
                        </b:ConditionBehavior>
                    </b:Interaction.Behaviors>
                    <b:InvokeCommandAction Command="{Binding DataContext.ClearDebugUIEntityCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                </b:EventTrigger>
                <b:EventTrigger EventName="Unloaded">
                    <b:ChangePropertyAction TargetName="HotbarslotBtn" PropertyName="CommandParameter" Value="{x:Null}"/>
                    <b:ChangePropertyAction TargetName="HotbarslotBtn" PropertyName="Tag" Value="{x:Null}"/>
                </b:EventTrigger>
                <!-- Start and stop a UI loop sound when non-passive spells are selected/deselected in the hotbar -->
                <b:DataTrigger Binding="{Binding IsActive}" Value="True">
                    <b:Interaction.Behaviors>
                        <b:ConditionBehavior>
                            <b:ConditionalExpression>
                                <b:ComparisonCondition LeftOperand="{Binding SlotType}" Operator="NotEqual" RightOperand="Passive"/>
                            </b:ConditionalExpression>
                        </b:ConditionBehavior>
                    </b:Interaction.Behaviors>
                    <ls:LSPlaySound Sound="UI_HUD_SkillSelect_Default_LoopOn"/>
                </b:DataTrigger>
                <b:DataTrigger Binding="{Binding IsActive}" Value="False">
                    <b:Interaction.Behaviors>
                        <b:ConditionBehavior>
                            <b:ConditionalExpression>
                                <b:ComparisonCondition LeftOperand="{Binding SlotType}" Operator="NotEqual" RightOperand="Passive"/>
                            </b:ConditionalExpression>
                        </b:ConditionBehavior>
                    </b:Interaction.Behaviors>
                    <ls:LSPlaySound Sound="UI_HUD_SkillSelect_Default_LoopOff"/>
                </b:DataTrigger>
            </b:Interaction.Triggers>
            <ls:LSButton x:Name="HotbarslotBtn">
                <ls:LSButton.Tag>
                    <MultiBinding Converter="{StaticResource PassThroughConverter}">
                        <Binding ElementName="contentContainer" Mode="OneTime" />
                        <Binding Source="Top"/>
                        <Binding Path="DataContext.UseFlyOutSlotCommand" RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}"/>
                    </MultiBinding>
                </ls:LSButton.Tag>
                <ls:LSButton.Style>
                    <Style TargetType="ls:LSButton" BasedOn="{StaticResource HotBarSlotStyle}">
                        <Setter Property="CommandParameter" Value="{Binding Path=Tag,RelativeSource={RelativeSource Mode=Self}}"/>
                    </Style>
                </ls:LSButton.Style>
            </ls:LSButton>
        </ContentControl>

        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding SlotType}" Value="Empty">
                <Setter TargetName="contentContainer" Property="ToolTipService.IsEnabled" Value="False"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SlotIndex, Converter={StaticResource ModuloConverter}, ConverterParameter='2'}" Value="1">
                <Setter TargetName="hbTooltip" Property="VerticalOffset" Value="-148"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SlotType}" Value="Item">
                <Setter TargetName="hbTooltip" Property="Content" Value="{Binding DataContext.Item, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SlotType}" Value="Passive">
                <Setter TargetName="hbTooltip" Property="Content" Value="{Binding DataContext.Passive, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SlotType}" Value="Spell">
                <Setter TargetName="hbTooltip" Property="Content" Value="{Binding DataContext.Spell, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SlotType}" Value="Action">
                <Setter TargetName="hbTooltip" Property="Content" Value="{Binding DataContext.Spell, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding SlotType}" Value="Item"/>
                    <Condition Binding="{Binding DataContext.Item.Count, RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="0"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="contentContainer" Property="Visibility" Value="Hidden"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding DataContext.CurrentActiveSlot.SlotType, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Item"/>
                    <!--GUS-210767: When CanHideActiveSlotFilter is True it means we're in a weapon filter and this is an item there (i.e. an arrow in a bow filter), so we DON'T want to change the owner for the hotbar tooltips-->
                    <Condition Binding="{Binding DataContext.CanHideActiveSlotFilter, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="contentContainer" Property="ls:TooltipExtender.Owner" Value="{Binding DataContext.CurrentActiveSlot.Item, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
            </MultiDataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <!-- Hotbar slot Representation END -->

    <DataTemplate x:Key="TutorialNotification">
        <DataTemplate.Resources>
            <System:TimeSpan x:Key="Lifespan">0:3:0</System:TimeSpan>
        </DataTemplate.Resources>
        <StackPanel x:Name="holder" Orientation="Horizontal" HorizontalAlignment="Right" Visibility="Collapsed">
            <StackPanel.Background>
                <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Tutorial/tutorialNotification_bg.png"/>
            </StackPanel.Background>
            <StackPanel.RenderTransform>
                <TranslateTransform />
            </StackPanel.RenderTransform>
            <TextBlock x:Name="text" Text="{Binding Title}" VerticalAlignment="Center" Margin="20" TextWrapping="Wrap"/>
            <ls:LSButton x:Name="playButton"
                                         Command="{Binding DataContext.OpenTutorialPopup, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                         CommandParameter="{Binding}">
                <ls:LSButton.RenderTransform>
                    <TranslateTransform />
                </ls:LSButton.RenderTransform>
                <Grid>
                    <Image x:Name="BtnBg" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_hudNav_d.png" Stretch="None"/>
                    <Image x:Name="icon" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Tutorial/ico_play_d.png" Stretch="None"/>
                    <Canvas>
                        <Canvas.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform ScaleX="0.86" ScaleY="0.86"/>
                                <RotateTransform Angle="45"/>
                                <TranslateTransform X="38" Y="38"/>
                            </TransformGroup>
                        </Canvas.RenderTransform>
                        <Path x:Name="Path0" Data="F1M0,-36.87a36.87,36.87,0,0,0,0,73.73a36.87,36.87,0,0,0,0,-73.73Z">
                            <Path.Fill>
                                <LinearGradientBrush MappingMode="Absolute" StartPoint="-108.95,39.75" EndPoint="-21.42,42.08">
                                    <GradientStop Offset="0" Color="#00FFFFFF"/>
                                    <GradientStop Offset="0.5" Color="#4CFFFFFF"/>
                                    <GradientStop Offset="1" Color="#00FFFFFF"/>
                                    <GradientStop Offset="0" Color="#00FFFFFF"/>
                                    <GradientStop Offset="0.25" Color="#26FFFFFF"/>
                                    <GradientStop Offset="0.5" Color="#4CFFFFFF"/>
                                    <GradientStop Offset="0.75" Color="#26FFFFFF"/>
                                    <GradientStop Offset="1" Color="#00FFFFFF"/>
                                </LinearGradientBrush>
                            </Path.Fill>
                        </Path>
                        <Path x:Name="Path1" StrokeThickness="4" StrokeMiterLimit="4" Data="M0,-36.87a36.87,36.87,0,0,0,0,73.73a36.87,36.87,0,0,0,0,-73.73Z">
                            <Path.Stroke>
                                <LinearGradientBrush MappingMode="Absolute" StartPoint="-108.95,39.75" EndPoint="-21.42,42.08">
                                    <GradientStop Offset="0" Color="#00FFFFFF"/>
                                    <GradientStop Offset="0.5" Color="#F6FFFFFF"/>
                                    <GradientStop Offset="1" Color="#00FFFFFF"/>
                                    <GradientStop Offset="0" Color="#00FFFFFF"/>
                                    <GradientStop Offset="0.24" Color="#7FFFFFFF"/>
                                    <GradientStop Offset="0.48" Color="#FFFFFFFF"/>
                                    <GradientStop Offset="0.74" Color="#7FFFFFFF"/>
                                    <GradientStop Offset="1" Color="#00FFFFFF"/>
                                </LinearGradientBrush>
                            </Path.Stroke>
                        </Path>

                        <Path x:Name="Path2" Data="F1M0,-36.87a36.87,36.87,0,0,0,0,73.73a36.87,36.87,0,0,0,0,-73.73Z">
                            <Path.Fill>
                                <LinearGradientBrush MappingMode="Absolute" StartPoint="-108.95,39.75" EndPoint="-21.42,42.08">
                                    <GradientStop Offset="0" Color="#00FFFFFF"/>
                                    <GradientStop Offset="0.5" Color="#4CFFFFFF"/>
                                    <GradientStop Offset="1" Color="#00FFFFFF"/>
                                    <GradientStop Offset="0" Color="#00FFFFFF"/>
                                    <GradientStop Offset="0.25" Color="#26FFFFFF"/>
                                    <GradientStop Offset="0.5" Color="#4CFFFFFF"/>
                                    <GradientStop Offset="0.75" Color="#26FFFFFF"/>
                                    <GradientStop Offset="1" Color="#00FFFFFF"/>
                                </LinearGradientBrush>
                            </Path.Fill>
                        </Path>
                        <Path x:Name="Path3" StrokeThickness="4" StrokeMiterLimit="4" Data="M0,-36.87a36.87,36.87,0,0,0,0,73.73a36.87,36.87,0,0,0,0,-73.73Z">
                            <Path.Stroke>
                                <LinearGradientBrush MappingMode="Absolute" StartPoint="-108.95,39.75" EndPoint="-21.42,42.08">
                                    <GradientStop Offset="0" Color="#00FFFFFF"/>
                                    <GradientStop Offset="0.5" Color="#F6FFFFFF"/>
                                    <GradientStop Offset="1" Color="#00FFFFFF"/>
                                    <GradientStop Offset="0" Color="#00FFFFFF"/>
                                    <GradientStop Offset="0.24" Color="#7FFFFFFF"/>
                                    <GradientStop Offset="0.48" Color="#FFFFFFFF"/>
                                    <GradientStop Offset="0.74" Color="#7FFFFFFF"/>
                                    <GradientStop Offset="1" Color="#00FFFFFF"/>
                                </LinearGradientBrush>
                            </Path.Stroke>
                        </Path>
                    </Canvas>
                </Grid>
            </ls:LSButton>
            <b:Interaction.Triggers>
                <b:PropertyChangedTrigger Binding="{Binding Opacity, ElementName=text}">
                    <b:Interaction.Behaviors>
                        <b:ConditionBehavior>
                            <b:ConditionalExpression>
                                <b:ComparisonCondition LeftOperand="{Binding Opacity, ElementName=text}" Operator="Equal" RightOperand="0" />
                            </b:ConditionalExpression>
                        </b:ConditionBehavior>
                    </b:Interaction.Behaviors>
                    <b:InvokeCommandAction Command="{Binding DataContext.RemoveTutorialNotification, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}"/>
                </b:PropertyChangedTrigger>
                <b:EventTrigger EventName="MouseRightButtonDown">
                    <b:InvokeCommandAction Command="{Binding DataContext.RemoveTutorialNotification, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}"/>
                </b:EventTrigger>
                <b:EventTrigger EventName="Loaded">
                    <ls:LSPlaySound Sound="UI_HUD_TooltipNotificationAppear"/>
                </b:EventTrigger>
            </b:Interaction.Triggers>
        </StackPanel>
        <DataTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding InputType}" Value="TutorialInputKeyboard"/>
                    <Condition Binding="{Binding DataContext.Data.UIInputMethod, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Keyboard" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="holder" Property="Visibility" Value="Visible"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding InputType}" Value="TutorialInputGamepad"/>
                    <Condition Binding="{Binding DataContext.Data.UIInputMethod, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Controller" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="holder" Property="Visibility" Value="Visible"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding InputType}" Value="TutorialInputAll"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="holder" Property="Visibility" Value="Visible"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <Trigger Property="Visibility" Value="Visible">
                <Trigger.EnterActions>
                    <BeginStoryboard x:Name="ShowAnimation">
                        <BeginStoryboard.Storyboard>
                            <Storyboard Duration="0:0:2.07">
                                <DoubleAnimation Storyboard.TargetName="holder"
                                                                    Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)"
                                                                    Duration="0:0:0.7" From="700" To="0">
                                    <DoubleAnimation.EasingFunction>
                                        <CubicEase EasingMode="EaseOut"/>
                                    </DoubleAnimation.EasingFunction>
                                </DoubleAnimation>
                                <PointAnimationUsingKeyFrames Storyboard.TargetProperty="Fill.StartPoint" Storyboard.TargetName="Path0">
                                    <DiscretePointKeyFrame KeyTime="0:0:1.13" Value="-108.95,39.75"/>
                                    <LinearPointKeyFrame KeyTime="0:0:1.53" Value="40.25,-0"/>
                                </PointAnimationUsingKeyFrames>
                                <PointAnimationUsingKeyFrames Storyboard.TargetProperty="Fill.EndPoint" Storyboard.TargetName="Path0">
                                    <DiscretePointKeyFrame KeyTime="0:0:1.13" Value="-21.42,42.08"/>
                                    <LinearPointKeyFrame KeyTime="0:0:1.53" Value="100,0"/>
                                </PointAnimationUsingKeyFrames>
                                <PointAnimationUsingKeyFrames Storyboard.TargetProperty="Stroke.StartPoint" Storyboard.TargetName="Path1">
                                    <DiscretePointKeyFrame KeyTime="0:0:1" Value="-108.95,39.75"/>
                                    <LinearPointKeyFrame KeyTime="0:0:1.4" Value="40.25,-0"/>
                                </PointAnimationUsingKeyFrames>
                                <PointAnimationUsingKeyFrames Storyboard.TargetProperty="Stroke.EndPoint" Storyboard.TargetName="Path1">
                                    <DiscretePointKeyFrame KeyTime="0:0:1" Value="-21.42,42.08"/>
                                    <LinearPointKeyFrame KeyTime="0:0:1.4" Value="100,0"/>
                                </PointAnimationUsingKeyFrames>

                                <PointAnimationUsingKeyFrames Storyboard.TargetProperty="Fill.StartPoint" Storyboard.TargetName="Path2">
                                    <DiscretePointKeyFrame KeyTime="0:0:2.67" Value="-108.95,39.75"/>
                                    <LinearPointKeyFrame KeyTime="0:0:3.07" Value="40.25,-0"/>
                                </PointAnimationUsingKeyFrames>
                                <PointAnimationUsingKeyFrames Storyboard.TargetProperty="Fill.EndPoint" Storyboard.TargetName="Path2">
                                    <DiscretePointKeyFrame KeyTime="0:0:2.67" Value="-21.42,42.08"/>
                                    <LinearPointKeyFrame KeyTime="0:0:3.07" Value="100,0"/>
                                </PointAnimationUsingKeyFrames>
                                <PointAnimationUsingKeyFrames Storyboard.TargetProperty="Stroke.StartPoint" Storyboard.TargetName="Path3">
                                    <DiscretePointKeyFrame KeyTime="0:0:2.54" Value="-108.95,39.75"/>
                                    <LinearPointKeyFrame KeyTime="0:0:2.94" Value="40.25,-0"/>
                                </PointAnimationUsingKeyFrames>
                                <PointAnimationUsingKeyFrames Storyboard.TargetProperty="Stroke.EndPoint" Storyboard.TargetName="Path3">
                                    <DiscretePointKeyFrame KeyTime="0:0:2.54" Value="-21.42,42.08"/>
                                    <LinearPointKeyFrame KeyTime="0:0:2.94" Value="100,0"/>
                                </PointAnimationUsingKeyFrames>
                            </Storyboard>
                        </BeginStoryboard.Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
            </Trigger>

            <Trigger Property="ItemsControl.AlternationIndex" Value="0">
                <Trigger.EnterActions>
                    <BeginStoryboard x:Name="HideStoryboard">
                        <BeginStoryboard.Storyboard>
                            <Storyboard>
                                <DoubleAnimation Storyboard.TargetName="text" Storyboard.TargetProperty="Opacity" BeginTime="{StaticResource Lifespan}" Duration="0:0:0.7" From="1" To="0">
                                    <DoubleAnimation.EasingFunction>
                                        <CubicEase EasingMode="EaseIn"/>
                                    </DoubleAnimation.EasingFunction>
                                </DoubleAnimation>
                                <DoubleAnimation Storyboard.TargetName="playButton" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" BeginTime="{StaticResource Lifespan}" Duration="0:0:0.7" To="-185">
                                    <DoubleAnimation.EasingFunction>
                                        <CubicEase EasingMode="EaseIn"/>
                                    </DoubleAnimation.EasingFunction>
                                </DoubleAnimation>
                                <DoubleAnimation Storyboard.TargetName="playButton" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" BeginTime="{StaticResource Lifespan}" Duration="0:0:0.7" To="-130">
                                    <DoubleAnimation.EasingFunction>
                                        <CubicEase EasingMode="EaseIn"/>
                                    </DoubleAnimation.EasingFunction>
                                </DoubleAnimation>
                            </Storyboard>
                        </BeginStoryboard.Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <StopStoryboard BeginStoryboardName="HideStoryboard"/>
                </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True" SourceName="playButton">
                <Setter TargetName="BtnBg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_hudNav_h.png"/>
                <Setter TargetName="icon" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Tutorial/ico_play_h.png" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True" SourceName="playButton">
                <Setter TargetName="BtnBg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_hudNav_p.png" />
                <Setter TargetName="icon" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Tutorial/ico_play_d.png" />
                <Setter TargetName="icon" Property="Margin" Value="0,4,0,0" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!-- Locked bottombar locked bar -->
    <ControlTemplate x:Key="LockHotbarButtonLocked" TargetType="ls:LSButton">
        <Grid>
            <Image x:Name="bg" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_small_round_d.png" Stretch="None"  HorizontalAlignment="Center" VerticalAlignment="Center"/>
            <Image x:Name="img" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/ico_lock_enabled_d.png" Stretch="None"  HorizontalAlignment="Center" VerticalAlignment="Center"/>
        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="bg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_small_round_h.png" />
                <Setter TargetName="img" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/ico_lock_enabled_h.png" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="bg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_small_round_p.png" />
                <Setter TargetName="img" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/ico_lock_enabled_h.png" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!-- Locked bottombar locked END -->

    <!-- Locked bottombar unlocked -->
    <ControlTemplate x:Key="LockHotbarButtonUnlocked" TargetType="ls:LSButton">
        <Grid>
            <Image x:Name="bg" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_small_round_d.png" Stretch="None"  HorizontalAlignment="Center" VerticalAlignment="Center"/>
            <Image x:Name="img" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/ico_lock_disabled_d.png" Stretch="None" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="bg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_small_round_h.png" />
                <Setter TargetName="img" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/ico_lock_disabled_h.png" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="bg" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_small_round_p.png" />
                <Setter TargetName="img" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/ico_lock_disabled_h.png" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!-- Locked bottombar unlocked END -->

    <!--Inactive Dialogue.InactivePortrait Representation -->
    <DataTemplate x:Key="Dialogue.InactivePortrait" DataType="{x:Type ls:Character}">
        <ContentControl >
            <b:Interaction.Behaviors>
                <ls:DropOnCharacterBehavior TargetCharacter="{Binding}"/>
            </b:Interaction.Behaviors>
            <b:Interaction.Triggers>
                <b:EventTrigger EventName="MouseLeftButtonDown">
                    <b:InvokeCommandAction Command="{Binding DataContext.SelectCharacter,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}" />
                </b:EventTrigger>
            </b:Interaction.Triggers>

            <Canvas Style="{DynamicResource Dialogue.MiniPortrait.Canvas}" Opacity="0.55">
                <!-- character image -->
                <Border Style="{DynamicResource Dialogue.MiniPortrait.Canvas.Border}">
                    <ls:LSEntityObject Margin="0" EntityRef="{Binding EntityHandle}" Background="{Binding Icon}"/>
                </Border>
                <!-- border-->
                <Image>
                    <Image.Style>
                        <Style TargetType="Image">
                            <Setter Property="Width" Value="120"/>
                            <Setter Property="Height" Value="188"/>
                            <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_inactive_d.png" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding CharacterType}" Value="Avatar">
                                    <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_active_d.png" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Image.Style>
                </Image>

                <!-- health -->
                <Border Style="{DynamicResource Dialogue.MiniPortrait.Canvas.Health}">
                    <ProgressBar Value="{Binding Stats.Health.PercentValue, Mode=OneWay}" Maximum="1" Minimum="0" Background="Black" Foreground="{StaticResource LS_HealthBarForegound}" BorderBrush="{x:Null}"/>
                </Border>
            </Canvas>
        </ContentControl>
    </DataTemplate>
    <!--Inactive Dialogue.InactivePortrait Representation -->

    <!--Inactive Dialogue.ActivePortrait Representation -->
    <DataTemplate x:Key="Dialogue.ActivePortrait"  DataType="{x:Type ls:Character}">
        <ContentControl>
            <b:Interaction.Behaviors>
                <ls:DropOnCharacterBehavior TargetCharacter="{Binding}"/>
            </b:Interaction.Behaviors>
            <b:Interaction.Triggers>
                <b:EventTrigger EventName="MouseLeftButtonDown">
                    <b:InvokeCommandAction Command="{Binding DataContext.SelectCharacter,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}" />
                </b:EventTrigger>
                <b:EventTrigger EventName="MouseDoubleClick" >
                    <b:InvokeCommandAction Command="{Binding DataContext.SetCameraOnGameObject,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}" />
                </b:EventTrigger>
            </b:Interaction.Triggers>

            <Canvas Style="{DynamicResource Dialogue.MiniPortrait.Canvas}">
                <!-- character image -->
                <Border Style="{DynamicResource Dialogue.MiniPortrait.Canvas.Border}">
                    <ls:LSEntityObject Margin="0" EntityRef="{Binding EntityHandle}" Background="{Binding Icon}"/>
                </Border>

                <!-- border-->
                <Image>
                    <Image.Style>
                        <Style TargetType="Image">
                            <Setter Property="Width" Value="120"/>
                            <Setter Property="Height" Value="188"/>
                            <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_inactive_h.png" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding CharacterType}" Value="Avatar">
                                    <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_active_h.png" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Image.Style>
                </Image>
                <!-- health -->
                <Border Style="{DynamicResource Dialogue.MiniPortrait.Canvas.Health}">
                    <ProgressBar Value="{Binding Stats.Health.PercentValue, Mode=OneWay}" Maximum="1" Minimum="0" Background="Black" Foreground="{StaticResource LS_HealthBarForegound}" BorderBrush="{x:Null}"/>
                </Border>
            </Canvas>
        </ContentControl>
    </DataTemplate>
    <!--Inactive Dialogue.ActivePortrait Representation -->

    <!--MiniPlayerPortraits Representation -->
    <Style x:Key="Dialogue.PlayerPortraits" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource {x:Type ListBoxItem}}">
        <Setter Property="ContentTemplate" Value="{StaticResource Dialogue.InactivePortrait}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="VerticalContentAlignment" Value="Bottom"/>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="ContentTemplate" Value="{StaticResource Dialogue.ActivePortrait}" />
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="Background" Value="Transparent" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="Background" Value="Transparent" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--MiniPlayerPortraits END -->

    <!--Speaker selection BEGIN -->

    <!--Inactive Dialogue.InactivePortrait Representation -->
    <DataTemplate x:Key="Dialogue.InactiveSpeaker">
        <ContentControl>
            <b:Interaction.Behaviors>
                <ls:DropOnCharacterBehavior TargetCharacter="{Binding}"/>
            </b:Interaction.Behaviors>
            <b:Interaction.Triggers>
                <b:EventTrigger EventName="MouseLeftButtonDown">
                    <b:InvokeCommandAction Command="{Binding DataContext.SelectSpeaker,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}" />
                </b:EventTrigger>
            </b:Interaction.Triggers>

            <Canvas Style="{DynamicResource Dialogue.MiniPortrait.Canvas}" Opacity="0.55">

                <!-- character image -->
                <Border Style="{DynamicResource Dialogue.MiniPortrait.Canvas.Border}">
                    <ls:LSEntityObject Margin="0" EntityRef="{Binding EntityHandle}" Background="{Binding Icon}"/>
                </Border>

                <!-- border-->
                <Image>
                    <Image.Style>
                        <Style TargetType="Image">
                            <Setter Property="Width" Value="120"/>
                            <Setter Property="Height" Value="188"/>
                            <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_inactive_h.png" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding CharacterType}" Value="Avatar">
                                    <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_active_h.png" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Image.Style>
                </Image>

                <!-- health -->
                <Border Style="{DynamicResource Dialogue.MiniPortrait.Canvas.Health}">
                    <ProgressBar Value="{Binding Stats.Health.PercentValue, Mode=OneWay}" Maximum="1" Minimum="0" Background="Black" Foreground="{StaticResource LS_HealthBarForegound}" BorderBrush="{x:Null}"/>
                </Border>
            </Canvas>
        </ContentControl>
    </DataTemplate>
    <!--Inactive Dialogue.InactivePortrait Representation -->

    <!--Speaker selection Representation -->
    <Style x:Key="Dialogue.SpeakerPortraits" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource {x:Type ListBoxItem}}">
        <Setter Property="ContentTemplate" Value="{StaticResource Dialogue.InactiveSpeaker}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="VerticalContentAlignment" Value="Bottom"/>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="ContentTemplate" Value="{StaticResource Dialogue.ActivePortrait}" />
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="Background" Value="Transparent" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="Background" Value="Transparent" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--Speaker selection END -->

    <!-- Action resource UI -->
    <Storyboard x:Key="ActionResources.ActionGroup.ActionPoint.PreviewAnimation" RepeatBehavior="Forever">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Image.Opacity)">
            <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
            <EasingDoubleKeyFrame KeyTime="0:0:0.7" Value="0.5">
                <EasingDoubleKeyFrame.EasingFunction>
                    <CubicEase EasingMode="EaseInOut"/>
                </EasingDoubleKeyFrame.EasingFunction>
            </EasingDoubleKeyFrame>
            <EasingDoubleKeyFrame KeyTime="0:0:1.5" Value="1">
                <EasingDoubleKeyFrame.EasingFunction>
                    <CubicEase EasingMode="EaseInOut"/>
                </EasingDoubleKeyFrame.EasingFunction>
            </EasingDoubleKeyFrame>
        </DoubleAnimationUsingKeyFrames>
    </Storyboard>
    
    <DataTemplate x:Key="ActionResources.ActionGroup.ActionPoint">
        <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
            <Image x:Name="image" Stretch="None" Source="{DynamicResource Highlight}" HorizontalAlignment="Center" VerticalAlignment="Center">
                <Image.RenderTransform>
                    <TransformGroup>
                        <SkewTransform/>
                        <ScaleTransform CenterX="12" CenterY="12"/>
                        <RotateTransform/>
                        <TranslateTransform/>
                    </TransformGroup>
                </Image.RenderTransform>
            </Image>
            <Image x:Name="imageExplosion" Stretch="None" Source="{DynamicResource Highlight}" Opacity="0" HorizontalAlignment="Center" VerticalAlignment="Center">
                <Image.RenderTransform>
                    <TransformGroup>
                        <SkewTransform/>
                        <ScaleTransform CenterX="12" CenterY="12"/>
                        <RotateTransform/>
                        <TranslateTransform/>
                    </TransformGroup>
                </Image.RenderTransform>
            </Image>
        </Grid>

        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=ActionPointState, RelativeSource={RelativeSource AncestorType=ls:LSActionPoint}}" Value="Available">
                <Setter TargetName="image" Property="Source" Value="{DynamicResource Available}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=ActionPointState, RelativeSource={RelativeSource AncestorType=ls:LSActionPoint}}" Value="Highlight">
                <Setter TargetName="image" Property="Source" Value="{DynamicResource Highlight}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=ActionPointState, RelativeSource={RelativeSource AncestorType=ls:LSActionPoint}}" Value="Missing">
                <Setter TargetName="image" Property="Source" Value="{DynamicResource Missing}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=ActionPointState, RelativeSource={RelativeSource AncestorType=ls:LSActionPoint}}" Value="Used">
                <Setter TargetName="image" Property="Source" Value="{DynamicResource Used}"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=ActionPointState, RelativeSource={RelativeSource AncestorType=ls:LSActionPoint}}" Value="Used"/>
                    <Condition Binding="{Binding Path=IsActionPointSpent, RelativeSource={RelativeSource AncestorType=ls:LSActionPoint}}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard x:Name="explodeAnim">
                        <Storyboard RepeatBehavior="1x">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="imageExplosion" Storyboard.TargetProperty="(Image.RenderTransform).(TransformGroup.Children)[1].(ScaleTransform.ScaleX)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="2.5"/>
                                <DiscreteDoubleKeyFrame Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="imageExplosion" Storyboard.TargetProperty="(Image.RenderTransform).(TransformGroup.Children)[1].(ScaleTransform.ScaleY)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="2.5"/>
                                <DiscreteDoubleKeyFrame Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="imageExplosion" Storyboard.TargetProperty="(Image.Opacity)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </MultiDataTrigger.EnterActions>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=ActionPointState, RelativeSource={RelativeSource AncestorType=ls:LSActionPoint}}" Value="Highlight"/>
                    <Condition Binding="{Binding Path=DataContext.PreviewState, RelativeSource={RelativeSource AncestorType={x:Type ls:LSActionPointResources}}}" Value="Hover"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard x:Name="previewAnim" Storyboard="{StaticResource ActionResources.ActionGroup.ActionPoint.PreviewAnimation}" Storyboard.TargetName="image"/>
                </MultiDataTrigger.EnterActions>
                <MultiDataTrigger.ExitActions>
                    <StopStoryboard BeginStoryboardName="previewAnim"/>
                </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>

            <DataTrigger Binding="{Binding Path=DataContext.PreviewState, RelativeSource={RelativeSource AncestorType={x:Type ls:LSActionPointResources}}}" Value="Inactive">
                <Setter Property="Opacity" Value="0.5"/>
            </DataTrigger>

        </DataTemplate.Triggers>
    </DataTemplate>

    <ControlTemplate x:Key="ActionResources.ActionGroup.FallbackActionPointGroup">
        <ControlTemplate.Resources>
            <ImageSource x:Key="Highlight">/GustavNoesisGUI;component/Assets/Shared/ico_red_star.png</ImageSource>
            <ImageSource x:Key="Available">/GustavNoesisGUI;component/Assets/Shared/ico_red_star.png</ImageSource>
            <ImageSource x:Key="Used">/GustavNoesisGUI;component/Assets/Shared/ico_red_star.png</ImageSource>
            <ImageSource x:Key="Missing">/GustavNoesisGUI;component/Assets/Shared/ico_red_star.png</ImageSource>
        </ControlTemplate.Resources>
        <ContentControl ContentTemplate="{StaticResource ActionResources.ActionGroup.ActionPoint}"/>
    </ControlTemplate>

    <ControlTemplate x:Key="ActionResources.ActionGroup.DefaultActionPointGroup">
        <ControlTemplate.Resources>
            <ImageSource x:Key="Highlight">/GustavNoesisGUI;component/Assets/Shared/Resources/ap_active.png</ImageSource>
            <ImageSource x:Key="Available">/GustavNoesisGUI;component/Assets/Shared/Resources/ap_d.png</ImageSource>
            <ImageSource x:Key="Used">/GustavNoesisGUI;component/Assets/Shared/Resources/ap_used.png</ImageSource>
            <ImageSource x:Key="Missing">/GustavNoesisGUI;component/Assets/Shared/Resources/ap_used.png</ImageSource>
        </ControlTemplate.Resources>
        <ContentControl ContentTemplate="{StaticResource ActionResources.ActionGroup.ActionPoint}"/>
    </ControlTemplate>

    <ControlTemplate x:Key="ActionResources.ActionGroup.BonusActionPointGroup">
        <ControlTemplate.Resources>
            <ImageSource x:Key="Highlight">/GustavNoesisGUI;component/Assets/Shared/Resources/bap_active.png</ImageSource>
            <ImageSource x:Key="Available">/GustavNoesisGUI;component/Assets/Shared/Resources/bap_d.png</ImageSource>
            <ImageSource x:Key="Used">/GustavNoesisGUI;component/Assets/Shared/Resources/bap_used.png</ImageSource>
            <ImageSource x:Key="Missing">/GustavNoesisGUI;component/Assets/Shared/Resources/bap_used.png</ImageSource>
        </ControlTemplate.Resources>
        <ContentControl ContentTemplate="{StaticResource ActionResources.ActionGroup.ActionPoint}"/>
    </ControlTemplate>

    <ControlTemplate x:Key="ActionResources.ActionGroup.ReactionActionPointGroup">
        <ControlTemplate.Resources>
            <ImageSource x:Key="Highlight">/GustavNoesisGUI;component/Assets/Shared/Resources/rp_active.png</ImageSource>
            <ImageSource x:Key="Available">/GustavNoesisGUI;component/Assets/Shared/Resources/rp_d.png</ImageSource>
            <ImageSource x:Key="Used">/GustavNoesisGUI;component/Assets/Shared/Resources/rp_used.png</ImageSource>
            <ImageSource x:Key="Missing">/GustavNoesisGUI;component/Assets/Shared/Resources/rp_used.png</ImageSource>
        </ControlTemplate.Resources>
        <ContentControl ContentTemplate="{StaticResource ActionResources.ActionGroup.ActionPoint}"/>
    </ControlTemplate>

    <ControlTemplate x:Key="ActionResources.ActionGroup.SorceryPointGroup" TargetType="ls:LSActionPoint">
        <ControlTemplate.Resources>
            <ImageSource x:Key="Highlight">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_sorc_h.png</ImageSource>
            <ImageSource x:Key="Available">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_sorc_d.png</ImageSource>
            <ImageSource x:Key="Used">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_sorc_spent.png</ImageSource>
            <ImageSource x:Key="Missing">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_sorc_missing.png</ImageSource>
        </ControlTemplate.Resources>
        <ContentControl ContentTemplate="{StaticResource ActionResources.ActionGroup.ActionPoint}"/>
    </ControlTemplate>
    
    <!-- MOD START - Custom action resources -->
	<ControlTemplate x:Key="ActionResources.ActionGroup.SneakAttackDieGroup" TargetType="ls:LSActionPoint">
		<ControlTemplate.Resources>
            <ImageSource x:Key="Highlight">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_res_sneakAttack_h.png</ImageSource>
            <ImageSource x:Key="Available">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_res_sneakAttack_d.png</ImageSource>
            <ImageSource x:Key="Used">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_res_sneakAttack_spent.png</ImageSource>
        </ControlTemplate.Resources>
        <ContentControl ContentTemplate="{StaticResource ActionResources.ActionGroup.ActionPoint}"/>
    </ControlTemplate>
	
	<ControlTemplate x:Key="ActionResources.ActionGroup.PsiPointGroup" TargetType="ls:LSActionPoint">
		<ControlTemplate.Resources>
            <ImageSource x:Key="Highlight">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_psi_h.png</ImageSource>
            <ImageSource x:Key="Available">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_psi_d.png</ImageSource>
            <ImageSource x:Key="Used">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_psi_spent.png</ImageSource>
        </ControlTemplate.Resources>
        <ContentControl ContentTemplate="{StaticResource ActionResources.ActionGroup.ActionPoint}"/>
    </ControlTemplate>

    <ControlTemplate x:Key="ActionResources.ActionGroup.HitDiceGroup" TargetType="ls:LSActionPoint">
		<ControlTemplate.Resources>
            <ImageSource x:Key="Highlight">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_hitdice_h.png</ImageSource>
            <ImageSource x:Key="Available">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_hitdice_d.png</ImageSource>
            <ImageSource x:Key="Used">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_hitdice_spent.png</ImageSource>
        </ControlTemplate.Resources>
        <ContentControl ContentTemplate="{StaticResource ActionResources.ActionGroup.ActionPoint}"/>
    </ControlTemplate>

    <ControlTemplate x:Key="ActionResources.ActionGroup.RampageDieGroup" TargetType="ls:LSActionPoint">
		<ControlTemplate.Resources>
            <ImageSource x:Key="Highlight">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_rampagedie_h.png</ImageSource>
            <ImageSource x:Key="Available">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_rampagedie_d.png</ImageSource>
            <ImageSource x:Key="Used">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_rampagedie_spent.png</ImageSource>
        </ControlTemplate.Resources>
        <ContentControl ContentTemplate="{StaticResource ActionResources.ActionGroup.ActionPoint}"/>
    </ControlTemplate>
	
	<ControlTemplate x:Key="ActionResources.ActionGroup.MartialArtsDieGroup1" TargetType="ls:LSActionPoint">
		<ControlTemplate.Resources>
            <ImageSource x:Key="Highlight">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_mad1_d.dds</ImageSource>
            <ImageSource x:Key="Available">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_mad1_d.dds</ImageSource>
            <ImageSource x:Key="Used">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_mad1_d.dds</ImageSource>
        </ControlTemplate.Resources>
        <ContentControl ContentTemplate="{StaticResource ActionResources.ActionGroup.ActionPoint}"/>
    </ControlTemplate>
	
		<ControlTemplate x:Key="ActionResources.ActionGroup.MartialArtsDieGroup2" TargetType="ls:LSActionPoint">
		<ControlTemplate.Resources>
            <ImageSource x:Key="Highlight">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_mad2_d.dds</ImageSource>
            <ImageSource x:Key="Available">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_mad2_d.dds</ImageSource>
            <ImageSource x:Key="Used">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_mad2_d.dds</ImageSource>
        </ControlTemplate.Resources>
        <ContentControl ContentTemplate="{StaticResource ActionResources.ActionGroup.ActionPoint}"/>
    </ControlTemplate>
	
		<ControlTemplate x:Key="ActionResources.ActionGroup.MartialArtsDieGroup3" TargetType="ls:LSActionPoint">
		<ControlTemplate.Resources>
            <ImageSource x:Key="Highlight">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_mad3_d.dds</ImageSource>
            <ImageSource x:Key="Available">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_mad3_d.dds</ImageSource>
            <ImageSource x:Key="Used">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_mad3_d.dds</ImageSource>
        </ControlTemplate.Resources>
        <ContentControl ContentTemplate="{StaticResource ActionResources.ActionGroup.ActionPoint}"/>
    </ControlTemplate>
	
		<ControlTemplate x:Key="ActionResources.ActionGroup.MartialArtsDieGroup4" TargetType="ls:LSActionPoint">
		<ControlTemplate.Resources>
            <ImageSource x:Key="Highlight">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_mad4_d.dds</ImageSource>
            <ImageSource x:Key="Available">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_mad4_d.dds</ImageSource>
            <ImageSource x:Key="Used">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_mad4_d.dds</ImageSource>
        </ControlTemplate.Resources>
        <ContentControl ContentTemplate="{StaticResource ActionResources.ActionGroup.ActionPoint}"/>
    </ControlTemplate>
	
	<ControlTemplate x:Key="ActionResources.ActionGroup.NecroThaumGroup" TargetType="ls:LSActionPoint">
		<ControlTemplate.Resources>
            <ImageSource x:Key="Highlight">/GustavNoesisGUI;component/Assets/Shared/Resources/Resource_Thaumaturgy_Hover.dds</ImageSource>
            <ImageSource x:Key="Available">/GustavNoesisGUI;component/Assets/Shared/Resources/Resource_Thaumaturgy_Icon.dds</ImageSource>
            <ImageSource x:Key="Used">/GustavNoesisGUI;component/Assets/Shared/Resources/Resource_Thaumaturgy_Used.dds</ImageSource>
        </ControlTemplate.Resources>
        <ContentControl ContentTemplate="{StaticResource ActionResources.ActionGroup.ActionPoint}"/>
    </ControlTemplate>
	<!-- MOD END -->
	
    <ControlTemplate x:Key="ActionResources.ActionGroup.KiActionGroup" TargetType="ls:LSActionPoint">
        <ControlTemplate.Resources>
            <ImageSource x:Key="Highlight">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_ki_h.png</ImageSource>
            <ImageSource x:Key="Available">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_ki.png</ImageSource>
            <ImageSource x:Key="Used">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_ki_spent.png</ImageSource>
            <ImageSource x:Key="Missing">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_ki_missing.png</ImageSource>
        </ControlTemplate.Resources>
        <ContentControl ContentTemplate="{StaticResource ActionResources.ActionGroup.ActionPoint}"/>
    </ControlTemplate>

    <ControlTemplate x:Key="ActionResources.ActionGroup.LayOnHandsChargeActionGroup" TargetType="ls:LSActionPoint">
        <ControlTemplate.Resources>
            <ImageSource x:Key="Highlight">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_LayOnHands_h.png</ImageSource>
            <ImageSource x:Key="Available">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_LayOnHands.png</ImageSource>
            <ImageSource x:Key="Used">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_LayOnHands_spent.png</ImageSource>
            <ImageSource x:Key="Missing">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_LayOnHands_missing.png</ImageSource>
        </ControlTemplate.Resources>
        <ContentControl ContentTemplate="{StaticResource ActionResources.ActionGroup.ActionPoint}"/>
    </ControlTemplate>

    <ControlTemplate x:Key="ActionResources.ActionGroup.RageActionGroup" TargetType="ls:LSActionPoint">
        <ControlTemplate.Resources>
            <ImageSource x:Key="Highlight">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_rage_h.png</ImageSource>
            <ImageSource x:Key="Available">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_rage.png</ImageSource>
            <ImageSource x:Key="Used">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_rage_spent.png</ImageSource>
            <ImageSource x:Key="Missing">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_rage_missing.png</ImageSource>
        </ControlTemplate.Resources>
        <ContentControl ContentTemplate="{StaticResource ActionResources.ActionGroup.ActionPoint}"/>
    </ControlTemplate>

    <ControlTemplate x:Key="ActionResources.ActionGroup.DivinityActionGroup" TargetType="ls:LSActionPoint">
        <ControlTemplate.Resources>
            <ImageSource x:Key="Highlight">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_channelDivinity_h.png</ImageSource>
            <ImageSource x:Key="Available">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_channelDivinity_d.png</ImageSource>
            <ImageSource x:Key="Used">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_channelDivinity_spent.png</ImageSource>
            <ImageSource x:Key="Missing">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_channelDivinity_missing.png</ImageSource>
        </ControlTemplate.Resources>
        <ContentControl ContentTemplate="{StaticResource ActionResources.ActionGroup.ActionPoint}"/>
    </ControlTemplate>

    <ControlTemplate x:Key="ActionResources.ActionGroup.OathActionGroup" TargetType="ls:LSActionPoint">
        <ControlTemplate.Resources>
            <ImageSource x:Key="Highlight">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_channelOath_h.png</ImageSource>
            <ImageSource x:Key="Available">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_channelOath.png</ImageSource>
            <ImageSource x:Key="Used">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_channelOath_spent.png</ImageSource>
            <ImageSource x:Key="Missing">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_channelOath_missing.png</ImageSource>
        </ControlTemplate.Resources>
        <ContentControl ContentTemplate="{StaticResource ActionResources.ActionGroup.ActionPoint}"/>
    </ControlTemplate>

    <ControlTemplate x:Key="ActionResources.ActionGroup.SuperiorityDieActionGroup" TargetType="ls:LSActionPoint">
        <ControlTemplate.Resources>
            <ImageSource x:Key="Highlight">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_res_superiorityDice_h.png</ImageSource>
            <ImageSource x:Key="Available">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_res_superiorityDice_d.png</ImageSource>
            <ImageSource x:Key="Used">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_res_superiorityDice_spent.png</ImageSource>
            <ImageSource x:Key="Missing">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_res_superiorityDice_missing.png</ImageSource>
        </ControlTemplate.Resources>
        <ContentControl ContentTemplate="{StaticResource ActionResources.ActionGroup.ActionPoint}"/>
    </ControlTemplate>

    <ControlTemplate x:Key="ActionResources.ActionGroup.ArcaneRecoveryActionGroup" TargetType="ls:LSActionPoint">
        <ControlTemplate.Resources>
            <ImageSource x:Key="Highlight">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_arcaneRecovery_h.png</ImageSource>
            <ImageSource x:Key="Available">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_arcaneRecovery_d.png</ImageSource>
            <ImageSource x:Key="Used">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_arcaneRecovery_spent.png</ImageSource>
            <ImageSource x:Key="Missing">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_arcaneRecovery_missing.png</ImageSource>
        </ControlTemplate.Resources>
        <ContentControl ContentTemplate="{StaticResource ActionResources.ActionGroup.ActionPoint}"/>
    </ControlTemplate>

    <ControlTemplate x:Key="ActionResources.ActionGroup.InspirationActionGroup" TargetType="ls:LSActionPoint">
        <ControlTemplate.Resources>
            <ImageSource x:Key="Highlight">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_inspiration_h.png</ImageSource>
            <ImageSource x:Key="Available">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_inspiration.png</ImageSource>
            <ImageSource x:Key="Used">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_inspiration_spent.png</ImageSource>
            <ImageSource x:Key="Missing">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_inspiration_missing.png</ImageSource>
        </ControlTemplate.Resources>
        <ContentControl ContentTemplate="{StaticResource ActionResources.ActionGroup.ActionPoint}"/>
    </ControlTemplate>

    <ControlTemplate x:Key="ActionResources.ActionGroup.SpellSlot" TargetType="ls:LSActionPoint">
        <ControlTemplate.Resources>
            <ImageSource x:Key="Highlight">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_mini_spellSlot_h.png</ImageSource>
            <ImageSource x:Key="Available">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_mini_spellSlot.png</ImageSource>
            <ImageSource x:Key="Used">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_mini_spellSlot_spent.png</ImageSource>
            <ImageSource x:Key="Missing">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_mini_spellSlot_missing.png</ImageSource>
        </ControlTemplate.Resources>
        <ContentControl ContentTemplate="{StaticResource ActionResources.ActionGroup.ActionPoint}"/>
    </ControlTemplate>

    <ControlTemplate x:Key="ActionResources.ActionGroup.WarlockSpellSlot" TargetType="ls:LSActionPoint">
        <ControlTemplate.Resources>
            <ImageSource x:Key="Highlight">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_mini_spellSlot_warlock_h.png</ImageSource>
            <ImageSource x:Key="Available">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_mini_spellSlot_warlock.png</ImageSource>
            <ImageSource x:Key="Used">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_mini_spellSlot_warlock_spent.png</ImageSource>
            <ImageSource x:Key="Missing">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_mini_spellSlot_warlock_missing.png</ImageSource>
        </ControlTemplate.Resources>
        <ContentControl ContentTemplate="{StaticResource ActionResources.ActionGroup.ActionPoint}"/>
    </ControlTemplate>

    <ControlTemplate x:Key="ActionResources.ActionGroup.RitualPointActionGroup" TargetType="ls:LSActionPoint">
        <ControlTemplate.Resources>
            <ImageSource x:Key="Highlight">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_rituals_h.png</ImageSource>
            <ImageSource x:Key="Available">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_rituals_d.png</ImageSource>
            <ImageSource x:Key="Used">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_rituals_spent.png</ImageSource>
            <ImageSource x:Key="Missing">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_rituals_spent.png</ImageSource>
        </ControlTemplate.Resources>
        <ContentControl ContentTemplate="{StaticResource ActionResources.ActionGroup.ActionPoint}"/>
    </ControlTemplate>

    <ControlTemplate x:Key="ActionResources.ActionGroup.NaturalRecoveryPointActionGroup" TargetType="ls:LSActionPoint">
        <ControlTemplate.Resources>
            <ImageSource x:Key="Highlight">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_NaturalRecovery_h.png</ImageSource>
            <ImageSource x:Key="Available">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_NaturalRecovery.png</ImageSource>
            <ImageSource x:Key="Used">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_NaturalRecovery_spent.png</ImageSource>
            <ImageSource x:Key="Missing">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_NaturalRecovery_missing.png</ImageSource>
        </ControlTemplate.Resources>
        <ContentControl ContentTemplate="{StaticResource ActionResources.ActionGroup.ActionPoint}"/>
    </ControlTemplate>

    <ControlTemplate x:Key="ActionResources.ActionGroup.WildShapeActionGroup" TargetType="ls:LSActionPoint">
        <ControlTemplate.Resources>
            <ImageSource x:Key="Highlight">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_wildshape_h.png</ImageSource>
            <ImageSource x:Key="Available">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_wildshape.png</ImageSource>
            <ImageSource x:Key="Used">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_wildshape_spent.png</ImageSource>
            <ImageSource x:Key="Missing">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_wildshape_missing.png</ImageSource>
        </ControlTemplate.Resources>
        <ContentControl ContentTemplate="{StaticResource ActionResources.ActionGroup.ActionPoint}"/>
    </ControlTemplate>

    <ControlTemplate x:Key="ActionResources.ActionGroup.TidesOfChaosActionGroup" TargetType="ls:LSActionPoint">
        <ControlTemplate.Resources>
            <ImageSource x:Key="Highlight">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_tidesOfChaos_h.png</ImageSource>
            <ImageSource x:Key="Available">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_tidesOfChaos_d.png</ImageSource>
            <ImageSource x:Key="Used">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_tidesOfChaos_spent.png</ImageSource>
            <ImageSource x:Key="Missing">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_tidesOfChaos_missing.png</ImageSource>
        </ControlTemplate.Resources>
        <ContentControl ContentTemplate="{StaticResource ActionResources.ActionGroup.ActionPoint}"/>
    </ControlTemplate>

    <Style x:Key="ActionResourcesTemplateSelector" TargetType="ls:LSActionPointResources">
        <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.FallbackActionPointGroup}"/>
        <Setter Property="MaxGroupActionPoints" Value="4"/>
        <Setter Property="ActionPointSize" Value="44" />
        <Setter Property="LabelForeground" Value="{DynamicResource ActionResource.Default}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="SorceryPoint">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.SorceryPointGroup}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="{StaticResource ActionResources.ActionPointSize}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ActionResource.TypeId}" Value="SorceryPoint"/>
                    <Condition Binding="{Binding ActionResource.Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-15,0,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <!-- MOD START - Custom action resources -->
			<DataTrigger Binding="{Binding ActionResource.TypeId}" Value="SneakAttack">
                <Setter Property="ActionPointTemplate" Value="{DynamicResource ActionResources.ActionGroup.SneakAttackDieGroup}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="{DynamicResource ActionResources.ActionPointSize}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ActionResource.TypeId}" Value="SneakAttack"/>
                    <Condition Binding="{Binding ActionResource.Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-15,0,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="PsiPoint">
                <Setter Property="ActionPointTemplate" Value="{DynamicResource ActionResources.ActionGroup.PsiPointGroup}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="{DynamicResource ActionResources.ActionPointSize}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ActionResource.TypeId}" Value="PsiPoint"/>
                    <Condition Binding="{Binding ActionResource.Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-15,0,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="PsiPointMastery">
                <Setter Property="ActionPointTemplate" Value="{DynamicResource ActionResources.ActionGroup.PsiPointGroup}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="{DynamicResource ActionResources.ActionPointSize}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ActionResource.TypeId}" Value="PsiPointMastery"/>
                    <Condition Binding="{Binding ActionResource.Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-15,0,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="HitDice">
                <Setter Property="ActionPointTemplate" Value="{DynamicResource ActionResources.ActionGroup.HitDiceGroup}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="{DynamicResource ActionResources.ActionPointSize}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ActionResource.TypeId}" Value="HitDice"/>
                    <Condition Binding="{Binding ActionResource.Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-15,0,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="RampageDie">
                <Setter Property="ActionPointTemplate" Value="{DynamicResource ActionResources.ActionGroup.RampageDieGroup}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="{DynamicResource ActionResources.ActionPointSize}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ActionResource.TypeId}" Value="RampageDie"/>
                    <Condition Binding="{Binding ActionResource.Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-15,0,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="MartialArtsDieD4">
                <Setter Property="ActionPointTemplate" Value="{DynamicResource ActionResources.ActionGroup.MartialArtsDieGroup1}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="{DynamicResource ActionResources.ActionPointSize}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ActionResource.TypeId}" Value="MartialArtsDieD4"/>
                    <Condition Binding="{Binding ActionResource.Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-15,0,0"/>
                </MultiDataTrigger.Setters>
			</MultiDataTrigger>
			<DataTrigger Binding="{Binding ActionResource.TypeId}" Value="MartialArtsDieD6">
                <Setter Property="ActionPointTemplate" Value="{DynamicResource ActionResources.ActionGroup.MartialArtsDieGroup2}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="{DynamicResource ActionResources.ActionPointSize}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ActionResource.TypeId}" Value="MartialArtsDieD6"/>
                    <Condition Binding="{Binding ActionResource.Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-15,0,0"/>
                </MultiDataTrigger.Setters>
			</MultiDataTrigger>
			<DataTrigger Binding="{Binding ActionResource.TypeId}" Value="MartialArtsDieD8">
                <Setter Property="ActionPointTemplate" Value="{DynamicResource ActionResources.ActionGroup.MartialArtsDieGroup3}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="{DynamicResource ActionResources.ActionPointSize}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ActionResource.TypeId}" Value="MartialArtsDieD8"/>
                    <Condition Binding="{Binding ActionResource.Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-15,0,0"/>
                </MultiDataTrigger.Setters>
			</MultiDataTrigger>
			<DataTrigger Binding="{Binding ActionResource.TypeId}" Value="MartialArtsDieD10">
                <Setter Property="ActionPointTemplate" Value="{DynamicResource ActionResources.ActionGroup.MartialArtsDieGroup4}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="{DynamicResource ActionResources.ActionPointSize}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ActionResource.TypeId}" Value="MartialArtsDieD10"/>
                    <Condition Binding="{Binding ActionResource.Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-15,0,0"/>
                </MultiDataTrigger.Setters>
			</MultiDataTrigger>
			<DataTrigger Binding="{Binding ActionResource.TypeId}" Value="NecroThaum">
                <Setter Property="ActionPointTemplate" Value="{DynamicResource ActionResources.ActionGroup.NecroThaumGroup}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="{DynamicResource ActionResources.ActionPointSize}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ActionResource.TypeId}" Value="NecroThaum"/>
                    <Condition Binding="{Binding ActionResource.Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-15,0,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
			<!-- MOD END -->
            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="KiPoint">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.KiActionGroup}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="{StaticResource ActionResources.ActionPointSize}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ActionResource.TypeId}" Value="KiPoint"/>
                    <Condition Binding="{Binding ActionResource.Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-15,0,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="LayOnHandsCharge">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.LayOnHandsChargeActionGroup}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="{StaticResource ActionResources.ActionPointSize}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ActionResource.TypeId}" Value="LayOnHandsCharge"/>
                    <Condition Binding="{Binding ActionResource.Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-15,0,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="Rage">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.RageActionGroup}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="{StaticResource ActionResources.ActionPointSize}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ActionResource.TypeId}" Value="Rage"/>
                    <Condition Binding="{Binding ActionResource.Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-15,0,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="BardicInspiration">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.InspirationActionGroup}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="{StaticResource ActionResources.ActionPointSize}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ActionResource.TypeId}" Value="BardicInspiration"/>
                    <Condition Binding="{Binding ActionResource.Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-15,0,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="ChannelDivinity">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.DivinityActionGroup}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="{StaticResource ActionResources.ActionPointSize}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ActionResource.TypeId}" Value="ChannelDivinity"/>
                    <Condition Binding="{Binding ActionResource.Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-15,0,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="ChannelOath">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.OathActionGroup}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="{StaticResource ActionResources.ActionPointSize}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ActionResource.TypeId}" Value="ChannelOath"/>
                    <Condition Binding="{Binding ActionResource.Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-15,0,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="SuperiorityDie">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.SuperiorityDieActionGroup}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="{StaticResource ActionResources.ActionPointSize}" />
                <Setter Property="LabelForeground" Value="{StaticResource ActionResource.SuperiorityDie}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ActionResource.TypeId}" Value="SuperiorityDie"/>
                    <Condition Binding="{Binding ActionResource.Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-15,0,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="ArcaneRecoveryPoint">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.ArcaneRecoveryActionGroup}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="{StaticResource ActionResources.ActionPointSize}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ActionResource.TypeId}" Value="ArcaneRecoveryPoint"/>
                    <Condition Binding="{Binding ActionResource.Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-15,0,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="ActionPoint">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.DefaultActionPointGroup}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="BonusActionPoint">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.BonusActionPointGroup}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="ReactionActionPoint">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.ReactionActionPointGroup}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="SpellSlot">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.SpellSlot}"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ActionResource.TypeId}" Value="SpellSlot"/>
                    <Condition Binding="{Binding ActionResource.Value}" Value="1"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,0,0,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="WarlockSpellSlot">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.WarlockSpellSlot}"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ActionResource.TypeId}" Value="WarlockSpellSlot"/>
                    <Condition Binding="{Binding ActionResource.Value}" Value="1"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,0,0,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="RitualPoint">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.RitualPointActionGroup}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="{StaticResource ActionResources.ActionPointSize}" />
                <Setter Property="LabelForeground" Value="{StaticResource ActionResource.RitualPoint}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ActionResource.TypeId}" Value="RitualPoint"/>
                    <Condition Binding="{Binding ActionResource.Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-15,0,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="NaturalRecoveryPoint">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.NaturalRecoveryPointActionGroup}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="{StaticResource ActionResources.ActionPointSize}" />
                <Setter Property="LabelForeground" Value="{StaticResource ActionResource.NaturalRecovery}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ActionResource.TypeId}" Value="NaturalRecoveryPoint"/>
                    <Condition Binding="{Binding ActionResource.Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-18,0,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="WildShape">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.WildShapeActionGroup}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="{StaticResource ActionResources.ActionPointSize}" />
                <Setter Property="LabelForeground" Value="{StaticResource ActionResource.WildShape}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ActionResource.TypeId}" Value="WildShape"/>
                    <Condition Binding="{Binding ActionResource.Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-18,0,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="TidesOfChaos">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.TidesOfChaosActionGroup}"/>
                <Setter Property="ActionPointSize" Value="{StaticResource ActionResources.ActionPointSize}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <DataTemplate x:Key="ActionResources.Item">
        <DataTemplate.Resources>
            <ImageSource x:Key="BackgroundImg">/GustavNoesisGUI;component/Assets/BottomBar/resource_general_bg.png</ImageSource>
        </DataTemplate.Resources>
        <Grid x:Name="content" Panel.ZIndex="1">
            <Image x:Name="resBg" Source="{DynamicResource BackgroundImg}" Stretch="None"/>
            <Border Width="56" Height="56">
                <Border x:Name="highlightContainer" BorderThickness="2" BorderBrush="Transparent" ToolTipService.IsEnabled="True" ToolTipService.Placement="Top" ToolTip="{StaticResource ManagedTooltip}" DataContext="{Binding}">
                    <ls:LSActionPointResources x:Name="ResourcePoints" VerticalAlignment="Center" HorizontalAlignment="Center" Background="Transparent"
                                               MaxActionPoints="{Binding ActionResource.MaxValue}"
                                               AvailableActionPoints="{Binding ActionResource.Value}"
                                               HighlightedActionPoints="{Binding Cost}"
                                               MaxActionPointGroups="0"
                                               ActionPointSize="{DynamicResource ActionResources.ActionPointSize}"
                                               SmallActionPointSize="{DynamicResource ActionResources.ActionPointSmallSize}"
                                               ActionPointGroupSize="{DynamicResource ActionResources.ActionPointGroupSize}"
                                               Style="{StaticResource ActionResourcesTemplateSelector}"/>
                </Border>
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="MouseEnter">
                        <b:InvokeCommandAction Command="{Binding DataContext.SetHoveredResourceCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}" />
                        <b:InvokeCommandAction Command="{Binding DataContext.PlaySoundEvent, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="UI_Shared_Hover"/>
                    </b:EventTrigger>
                    <b:EventTrigger EventName="MouseLeave">
                        <b:InvokeCommandAction Command="{Binding DataContext.SetHoveredResourceCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="" />
                    </b:EventTrigger>
                </b:Interaction.Triggers>
            </Border>
            <Image VerticalAlignment="Bottom" x:Name="SpellSlotLevels" Stretch="None" Visibility="Hidden" DataContext="{Binding ActionResource}">
                <Image.Style>
                    <Style TargetType="Image" BasedOn="{StaticResource RomanNumeralLevelImage}">
                        <Setter Property="Margin" Value="0,0,0,-4"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding DataContext.Data.UIInputMethod, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Controller">
                                <Setter Property="Margin" Value="0,0,0,-20"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Image.Style>
            </Image>
        </Grid>

        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding ActionResource.MaxValue}" Value="0">
                <Setter Property="Visibility" Value="Collapsed" TargetName="content"/>
            </DataTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="#54ffffff" TargetName="highlightContainer"/>
                <Setter Property="Background" Value="#2affffff" TargetName="highlightContainer"/>
            </Trigger>

            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="SpellSlot">
                <Setter TargetName="SpellSlotLevels" Property="Visibility" Value="Visible"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="WarlockSpellSlot">
                <Setter TargetName="SpellSlotLevels" Property="Visibility" Value="Visible"/>
            </DataTrigger>

        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="ActionResources.TopItem">
        <DataTemplate.Resources>
            <ImageSource x:Key="BackgroundImg">/GustavNoesisGUI;component/Assets/BottomBar/status_bg.png</ImageSource>
        </DataTemplate.Resources>
        <Grid x:Name="content" Panel.ZIndex="1">
            <Ellipse x:Name="romanBg" Width="40" Height="40" VerticalAlignment="Top" Fill="Black" Margin="0,-2,0,0" Visibility="Collapsed"/>
            <Image x:Name="Bg" Source="{DynamicResource BackgroundImg}" Stretch="None"/>
            <Border Width="56" Height="56">
                <Border Margin="0,-2,-2,0" x:Name="highlightContainer" BorderThickness="1" BorderBrush="Transparent" ToolTipService.IsEnabled="True" ToolTipService.Placement="Top" ToolTip="{StaticResource ManagedTooltip}" DataContext="{Binding}">
                    <Grid>
                        <ls:LSActionPointResources x:Name="ResourcePoints" VerticalAlignment="Center" HorizontalAlignment="Center" Background="Transparent"
                                                   MaxActionPoints="{Binding ActionResource.MaxValue}"
                                                   AvailableActionPoints="{Binding ActionResource.Value}"
                                                   HighlightedActionPoints="{Binding Cost}"
                                                   MaxActionPointGroups="0"
                                                   SmallActionPointSize="{DynamicResource ActionResources.ActionPointSmallSize}"
                                                   ActionPointGroupSize="{DynamicResource ActionResources.ActionPointGroupSize}"
                                                   Style="{StaticResource ActionResourcesTemplateSelector}"/>

                        <TextBlock x:Name="ResourcesNumeralDisplay" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,25,0,0"
                                   Foreground="{Binding LabelForeground, ElementName=ResourcePoints}" IsHitTestVisible="False"
                                   FontSize="{DynamicResource MediumFontSize}" Text="{Binding ActionResource.Value}"
                                   noesis:Text.Stroke="{StaticResource LS_PrimaryColorOutlineColor}" noesis:Text.StrokeThickness="4">
                            <b:Interaction.Triggers>
                                <b:PropertyChangedTrigger Binding="{Binding Path=ActionResource.Value}">
                                    <b:Interaction.Behaviors>
                                        <b:ConditionBehavior>
                                            <b:ConditionalExpression>
                                                <b:ComparisonCondition LeftOperand="{Binding ActionResource.MaxValue}" Operator="GreaterThan" RightOperand="{Binding MaxGroupActionPoints, ElementName=ResourcePoints}"/>
                                                <b:ComparisonCondition LeftOperand="{Binding ActionResource.Value}" Operator="GreaterThan" RightOperand="1"/>
                                            </b:ConditionalExpression>
                                        </b:ConditionBehavior>
                                    </b:Interaction.Behaviors>
                                    <b:ChangePropertyAction PropertyName="Visibility" Value="Visible"/>
                                </b:PropertyChangedTrigger>
                                
                                <b:PropertyChangedTrigger Binding="{Binding Path=ActionResource.Value}">
                                    <b:Interaction.Behaviors>
                                        <b:ConditionBehavior>
                                            <b:ConditionalExpression>
                                                <b:ComparisonCondition LeftOperand="{Binding ActionResource.Value}" Operator="LessThanOrEqual" RightOperand="1"/>
                                            </b:ConditionalExpression>
                                        </b:ConditionBehavior>
                                    </b:Interaction.Behaviors>
                                    <b:ChangePropertyAction PropertyName="Visibility" Value="Collapsed"/>
                                </b:PropertyChangedTrigger>
                                <b:PropertyChangedTrigger Binding="{Binding Path=ActionResource.Value}">
                                    <b:Interaction.Behaviors>
                                        <b:ConditionBehavior>
                                            <b:ConditionalExpression>
                                                <b:ComparisonCondition LeftOperand="{Binding ActionResource.MaxValue}" Operator="LessThanOrEqual" RightOperand="{Binding MaxGroupActionPoints, ElementName=ResourcePoints}"/>
                                            </b:ConditionalExpression>
                                        </b:ConditionBehavior>
                                    </b:Interaction.Behaviors>
                                    <b:ChangePropertyAction PropertyName="Visibility" Value="Collapsed"/>
                                </b:PropertyChangedTrigger>
                            </b:Interaction.Triggers>
                        </TextBlock>
                    </Grid>
                </Border>
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="MouseEnter">
                        <b:InvokeCommandAction Command="{Binding DataContext.SetHoveredResourceCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}" />
                        <b:InvokeCommandAction Command="{Binding DataContext.PlaySoundEvent, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="UI_Shared_Hover"/>
                    </b:EventTrigger>
                    <b:EventTrigger EventName="MouseLeave">
                        <b:InvokeCommandAction Command="{Binding DataContext.SetHoveredResourceCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="" />
                    </b:EventTrigger>
                </b:Interaction.Triggers>
            </Border>
            <Image VerticalAlignment="Top" x:Name="SpellSlotLevels" Stretch="None" Visibility="Hidden" DataContext="{Binding ActionResource}">
                <Image.Style>
                    <Style TargetType="Image" BasedOn="{StaticResource RomanNumeralLevelImage}">
                        <Setter Property="Margin" Value="0,-4,0,0"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding DataContext.Data.UIInputMethod, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Controller">
                                <Setter Property="Margin" Value="0,0,0,-20"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Image.Style>
            </Image>
        </Grid>

        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding ActionResource.MaxValue}" Value="0">
                <Setter Property="Visibility" Value="Collapsed" TargetName="content"/>
            </DataTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="#54ffffff" TargetName="highlightContainer"/>
                <Setter Property="Background" Value="#2affffff" TargetName="highlightContainer"/>
            </Trigger>

            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="SpellSlot">
                <Setter TargetName="SpellSlotLevels" Property="Visibility" Value="Visible"/>
                <Setter TargetName="romanBg" Property="Visibility" Value="Visible"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="WarlockSpellSlot">
                <Setter TargetName="SpellSlotLevels" Property="Visibility" Value="Visible"/>
                <Setter TargetName="romanBg" Property="Visibility" Value="Visible"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=(ls:AttachedProperties.InheritedTag), RelativeSource={RelativeSource Self}}" Value="minimalView">
                <Setter TargetName="Bg" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="romanBg" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="SpellSlotLevels" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <!-- Action resource UI END -->

    <Style x:Key="FloralFlairLeftPointing" TargetType="Image">
        <Setter Property="Stretch" Value="None" />
        <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/floralFlair.png" />
        <Setter Property="RenderTransformOrigin" Value="0.5,0.5" />
        <Setter Property="RenderTransform">
            <Setter.Value>
                <ScaleTransform ScaleX="-1"/>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FloralFlairRightPointing" TargetType="Image">
        <Setter Property="Stretch" Value="None" />
        <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/floralFlair.png" />
        <Setter Property="RenderTransformOrigin" Value="0.5,0.5" />
    </Style>

    <ControlTemplate x:Key="FloralFlairTitleTemplate" TargetType="ContentControl">
        <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Background="Transparent">
            <Image HorizontalAlignment="Left" VerticalAlignment="Center" Style="{StaticResource FloralFlairLeftPointing}"/>
            <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Text="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}}" FontSize="{TemplateBinding FontSize}"  Foreground="{DynamicResource LS_SecondaryColor}" />
            <Image HorizontalAlignment="Right" VerticalAlignment="Center" Style="{StaticResource FloralFlairRightPointing}"/>
        </Grid>
    </ControlTemplate>

    <!-- Map marker (outside viewport) -->
    <ImageBrush x:Key="Map.OffscreenArrow.Friendly" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Map/offScreen_ally.png" Stretch="None" />
    <ImageBrush x:Key="Map.OffscreenArrow.Enemy" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Map/offScreen_enemy.png" Stretch="None" />
    <ImageBrush x:Key="Map.OffscreenArrow.Neutral" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Map/offScreen_neutral.png" Stretch="None" />
    <ImageBrush x:Key="Map.OffscreenArrow.Party" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Map/offScreen_party.png" Stretch="None" />
    <ImageBrush x:Key="Map.OffscreenArrow.Selected" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Map/offScreen_selected.png" Stretch="None" />
    <ImageBrush x:Key="Map.OffscreenArrow.Multiplayer" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Map/offScreen_multiplayer.png" Stretch="None" />
    <ImageBrush x:Key="Map.OffscreenArrow.Quest" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Map/offScreen_quest.png" Stretch="None" />
    <ImageBrush x:Key="Map.OffscreenArrow.Location" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Map/offScreen_POI.png" Stretch="None" />
    <ImageBrush x:Key="Map.OffscreenIcon.Quest" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Map/mapSelector_quest.png" Stretch="Uniform" />
    <ImageBrush x:Key="Map.OffscreenIcon.Location" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Map/ico_POI.png" Stretch="Uniform" />

    <ImageBrush x:Key="Map.OffscreenArrow.FriendlyHighlight" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Map/offScreen_ally_h.png" Stretch="None" />
    <ImageBrush x:Key="Map.OffscreenArrow.EnemyHighlight" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Map/offScreen_enemy_h.png" Stretch="None" />
    <ImageBrush x:Key="Map.OffscreenArrow.NeutralHighlight" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Map/offScreen_neutral_h.png" Stretch="None" />
    <ImageBrush x:Key="Map.OffscreenArrow.PartyHighlight" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Map/offScreen_party_h.png" Stretch="None" />
    <ImageBrush x:Key="Map.OffscreenArrow.SelectedHighlight" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Map/offScreen_selected_h.png" Stretch="None" />
    <ImageBrush x:Key="Map.OffscreenArrow.MultiplayerHighlight" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Map/offScreen_multiplayer_h.png" Stretch="None" />
    <ImageBrush x:Key="Map.OffscreenArrow.QuestHighlight" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Map/offScreen_quest_h.png" Stretch="None" />
    <ImageBrush x:Key="Map.OffscreenArrow.LocationHighlight" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Map/offScreen_POI_h.png" Stretch="None" />

    <ImageBrush x:Key="Minimap.OffscreenArrow.Friendly" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Map/offScreen_ico_ally.png" Stretch="None" />
    <ImageBrush x:Key="Minimap.OffscreenArrow.Enemy" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Map/offScreen_ico_enemy.png" Stretch="None" />
    <ImageBrush x:Key="Minimap.OffscreenArrow.Neutral" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Map/offScreen_ico_neutral.png" Stretch="None" />

    <Storyboard x:Key="OutsideViewportPingStoryboard">
        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="GlowEffectIcon" Storyboard.TargetProperty="Visibility">
            <DiscreteObjectKeyFrame KeyTime="0:0:0.0" Value="{x:Static Visibility.Visible}"/>
            <DiscreteObjectKeyFrame KeyTime="0:0:0.9" Value="{x:Static Visibility.Collapsed}"/>
            <DiscreteObjectKeyFrame KeyTime="0:0:1.6" Value="{x:Static Visibility.Visible}"/>
            <DiscreteObjectKeyFrame KeyTime="0:0:2.2" Value="{x:Static Visibility.Collapsed}"/>
            <DiscreteObjectKeyFrame KeyTime="0:0:3.2" Value="{x:Static Visibility.Visible}"/>
            <DiscreteObjectKeyFrame KeyTime="0:0:3.8" Value="{x:Static Visibility.Collapsed}"/>
        </ObjectAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="GlowEffectIcon" Storyboard.TargetProperty="Width">
            <EasingDoubleKeyFrame KeyTime="0:0:0" Value="72"/>
            <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="6"/>
            <EasingDoubleKeyFrame KeyTime="0:0:0.9" Value="170"/>
            <EasingDoubleKeyFrame KeyTime="0:0:1.6" Value="6"/>
            <EasingDoubleKeyFrame KeyTime="0:0:2.2" Value="170"/>
            <EasingDoubleKeyFrame KeyTime="0:0:3.2" Value="6"/>
            <EasingDoubleKeyFrame KeyTime="0:0:3.8" Value="170"/>
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="GlowEffectIcon" Storyboard.TargetProperty="Opacity">
            <SplineDoubleKeyFrame KeyTime="0:0:0" Value="0.6"/>
            <SplineDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
            <SplineDoubleKeyFrame KeyTime="0:0:0.9" Value="0.6"/>
            <EasingDoubleKeyFrame KeyTime="0:0:1.6" Value="1"/>
            <EasingDoubleKeyFrame KeyTime="0:0:2.2" Value="0.6"/>
            <EasingDoubleKeyFrame KeyTime="0:0:3.2" Value="1"/>
            <EasingDoubleKeyFrame KeyTime="0:0:3.8" Value="0.6"/>
        </DoubleAnimationUsingKeyFrames>
        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PingIcon" Storyboard.TargetProperty="Source">
            <DiscreteObjectKeyFrame KeyTime="0:0:0.9">
                <DiscreteObjectKeyFrame.Value>
                    <BitmapImage UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Map/marker_signal_twist.png"/>
                </DiscreteObjectKeyFrame.Value>
            </DiscreteObjectKeyFrame>
            <DiscreteObjectKeyFrame KeyTime="0:0:1.2">
                <DiscreteObjectKeyFrame.Value>
                    <BitmapImage UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Map/marker_signal.png"/>
                </DiscreteObjectKeyFrame.Value>
            </DiscreteObjectKeyFrame>
        </ObjectAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PingIcon" Storyboard.TargetProperty="Opacity">
            <DiscreteDoubleKeyFrame KeyTime="0:0:0.0" Value="0"/>
            <DiscreteDoubleKeyFrame KeyTime="0:0:0.9" Value="1"/>
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PingIcon" Storyboard.TargetProperty="Width">
            <EasingDoubleKeyFrame KeyTime="0:0:0.9" Value="180"/>
            <EasingDoubleKeyFrame KeyTime="0:0:1.2" Value="48"/>
            <EasingDoubleKeyFrame KeyTime="0:0:1.5" Value="48"/>
            <EasingDoubleKeyFrame KeyTime="0:0:1.6" Value="84"/>
            <EasingDoubleKeyFrame KeyTime="0:0:1.7" Value="48"/>
            <EasingDoubleKeyFrame KeyTime="0:0:3.1" Value="48"/>
            <EasingDoubleKeyFrame KeyTime="0:0:3.2" Value="84"/>
            <EasingDoubleKeyFrame KeyTime="0:0:3.3" Value="48"/>
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PingIcon" Storyboard.TargetProperty="Tag">
            <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0"/>
            <EasingDoubleKeyFrame KeyTime="0:0:0.9" Value="0"/>
            <EasingDoubleKeyFrame KeyTime="0:0:1.2" Value="180"/>
            <EasingDoubleKeyFrame KeyTime="0:0:1.3" Value="150"/>
            <EasingDoubleKeyFrame KeyTime="0:0:1.4" Value="160"/>
            <EasingDoubleKeyFrame KeyTime="0:0:1.7" Value="190"/>
            <EasingDoubleKeyFrame KeyTime="0:0:2.0" Value="220"/>
            <EasingDoubleKeyFrame KeyTime="0:0:4.0" Value="420"/>
        </DoubleAnimationUsingKeyFrames>
    </Storyboard>

    <ControlTemplate x:Key="Map.MarkerDataTemplateOutsideViewport" TargetType="{x:Type ls:LSWorldMapMarker}">
        <Canvas x:Name="canvas">
            <Canvas.ToolTip>
                <ls:LSTooltip Content="{Binding Path=DataContext.Name, RelativeSource={RelativeSource Mode=TemplatedParent}}" 
                              Visibility="{Binding Path=DataContext.Name, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource StringToVisibilityConverter}}"/>
            </Canvas.ToolTip>

            <Image x:Name="GlowEffectIcon" Stretch="Uniform" Width="48" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Map/marker_glow.png" RenderTransformOrigin="0.5 0.5"
                   Visibility="Collapsed" Canvas.Left="{Binding ActualWidth, RelativeSource={RelativeSource Self}, Converter={StaticResource MultiplierConverter}, ConverterParameter='-0.5'}"
                   Canvas.Top="{Binding ActualHeight, RelativeSource={RelativeSource Self}, Converter={StaticResource MultiplierConverter}, ConverterParameter='-0.5'}"/>
            <Image x:Name="PingIcon" Stretch="Uniform" Width="48" Tag="0" RenderTransformOrigin="0.5 0.5" Visibility="Collapsed"
                   Canvas.Left="{Binding ActualWidth, RelativeSource={RelativeSource Self}, Converter={StaticResource MultiplierConverter}, ConverterParameter='-0.5'}"
                   Canvas.Top="{Binding ActualHeight, RelativeSource={RelativeSource Self}, Converter={StaticResource MultiplierConverter}, ConverterParameter='-0.5'}">
                <Image.RenderTransform>
                    <RotateTransform Angle="{Binding Path=Tag, ElementName=PingIcon}"/>
                </Image.RenderTransform>
            </Image>

            <Canvas x:Name="IconHolder" Width="112" Height="112" Canvas.Left="-56" RenderTransformOrigin="0.5 0.0">
                <Canvas.RenderTransform>
                    <RotateTransform Angle="{Binding Rotation, RelativeSource={RelativeSource TemplatedParent}}"/>
                </Canvas.RenderTransform>

                <Button x:Name="IconBtn" Background="{x:Null}" Command="{Binding DataContext.SetCameraOnGameObject,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                        CommandParameter="{Binding Path=DataContext.GameObject, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                        Padding="0" RenderTransformOrigin="0.5 0.5" Canvas.Left="15" Canvas.Top="21" >
                    <Button.RenderTransform>
                        <RotateTransform Angle="{Binding CounterRotation, RelativeSource={RelativeSource TemplatedParent}}"/>
                    </Button.RenderTransform>
                    <Ellipse x:Name="Icon"  Fill="{Binding GameObject.Icon}" Width="80" Height="80"/>
                </Button>
            </Canvas>
        </Canvas>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Type}" Value="CharacterFriendly">
                <Setter TargetName="IconHolder" Property="Background" Value="{StaticResource Map.OffscreenArrow.Friendly}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding Type}" Value="CharacterFriendly"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource Map.OffscreenArrow.FriendlyHighlight}" />
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="CharacterEnemy">
                <Setter TargetName="IconHolder" Property="Background" Value="{StaticResource Map.OffscreenArrow.Enemy}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding Type}" Value="CharacterEnemy"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource Map.OffscreenArrow.EnemyHighlight}" />
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="CharacterNeutral">
                <Setter TargetName="IconHolder" Property="Background" Value="{StaticResource Map.OffscreenArrow.Neutral}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding Type}" Value="CharacterNeutral"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource Map.OffscreenArrow.NeutralHighlight}" />
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="CharacterParty">
                <Setter TargetName="IconHolder" Property="Background" Value="{StaticResource Map.OffscreenArrow.Party}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding Type}" Value="CharacterParty"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="IconHolder" Property="Background" Value="{StaticResource Map.OffscreenArrow.PartyHighlight}" />
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="Player">
                <Setter TargetName="IconHolder" Property="Background" Value="{StaticResource Map.OffscreenArrow.Selected}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding Type}" Value="Player"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="IconHolder" Property="Background" Value="{StaticResource Map.OffscreenArrow.SelectedHighlight}" />
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="Multiplayer">
                <Setter Property="Background" Value="{StaticResource Map.OffscreenArrow.Multiplayer}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="PingMarker">
                <Setter TargetName="IconHolder" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="PingIcon" Property="Visibility" Value="Visible"/>
                
                <DataTrigger.EnterActions>
                    <BeginStoryboard x:Name="PingRotateAnimation" Storyboard="{StaticResource OutsideViewportPingStoryboard}">
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <StopStoryboard BeginStoryboardName="PingRotateAnimation"/>
                </DataTrigger.ExitActions>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding Type}" Value="Multiplayer"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="IconHolder" Property="Background" Value="{StaticResource Map.OffscreenArrow.MultiplayerHighlight}" />
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="Map.MiniMarkerDataTemplateOutsideViewport" TargetType="{x:Type ls:LSWorldMapMarker}">
        <Canvas x:Name="canvas">
            <Canvas.ToolTip>
                <ls:LSTooltip Content="{Binding Path=DataContext.Name, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                              Visibility="{Binding Path=DataContext.Name, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource StringToVisibilityConverter}}"/>
            </Canvas.ToolTip>
            <Image x:Name="GlowEffectIcon" Stretch="Uniform" Width="48" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Map/marker_glow.png" RenderTransformOrigin="0.5 0.5"
                   Visibility="Collapsed" Canvas.Left="{Binding ActualWidth, RelativeSource={RelativeSource Self}, Converter={StaticResource MultiplierConverter}, ConverterParameter='-0.5'}"
                   Canvas.Top="{Binding ActualHeight, RelativeSource={RelativeSource Self}, Converter={StaticResource MultiplierConverter}, ConverterParameter='-0.5'}"/>
            <Image x:Name="PingIcon" Stretch="Uniform" Width="48" Tag="0" RenderTransformOrigin="0.5 0.5" Visibility="Collapsed"
                   Canvas.Left="{Binding ActualWidth, RelativeSource={RelativeSource Self}, Converter={StaticResource MultiplierConverter}, ConverterParameter='-0.5'}"
                   Canvas.Top="{Binding ActualHeight, RelativeSource={RelativeSource Self}, Converter={StaticResource MultiplierConverter}, ConverterParameter='-0.5'}">
                <Image.RenderTransform>
                    <RotateTransform Angle="{Binding Path=Tag, ElementName=PingIcon}"/>
                </Image.RenderTransform>
            </Image>

            <Button x:Name="MarkerBtn" Background="{x:Null}" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Padding="0"
                    Command="{Binding DataContext.SetCameraOnGameObject,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                    CommandParameter="{Binding Path=DataContext.GameObject, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                <Canvas x:Name="IconHolder" RenderTransformOrigin="0.5 0.0">
                    <Canvas.RenderTransform>
                        <RotateTransform Angle="{Binding Rotation, RelativeSource={RelativeSource TemplatedParent}}"/>
                    </Canvas.RenderTransform>
                    <Ellipse x:Name="Icon" Fill="{Binding GameObject.Icon}" RenderTransformOrigin="0.5 0.5">
                        <Ellipse.RenderTransform>
                            <RotateTransform Angle="{Binding CounterRotation, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Ellipse.RenderTransform>
                    </Ellipse>
                </Canvas>
            </Button>
        </Canvas>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Type}" Value="QuestMarker">
                <Setter Property="Background" Value="{StaticResource Map.OffscreenArrow.Quest}" TargetName="IconHolder"/>
                <Setter Property="Height" Value="64" TargetName="IconHolder"/>
                <Setter Property="Width" Value="68" TargetName="IconHolder"/>
                <Setter Property="Canvas.Left" Value="-34" TargetName="MarkerBtn"/>
                <Setter Property="Fill" Value="{StaticResource Map.OffscreenIcon.Quest}" TargetName="Icon"/>
                <Setter Property="Height" Value="30" TargetName="Icon"/>
                <Setter Property="Width" Value="30" TargetName="Icon"/>
                <Setter Property="IsEnabled" Value="False" TargetName="IconHolder"/>
                <Setter Property="Canvas.Left" Value="19" TargetName="Icon"/>
                <Setter Property="Canvas.Top" Value="26" TargetName="Icon"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="LocationMarker">
                <Setter Property="Background" Value="{StaticResource Map.OffscreenArrow.Location}" TargetName="IconHolder" />
                <Setter Property="Height" Value="64" TargetName="IconHolder"/>
                <Setter Property="Width" Value="68" TargetName="IconHolder"/>
                <Setter Property="Canvas.Left" Value="-34" TargetName="MarkerBtn"/>
                <Setter Property="Fill" Value="{StaticResource Map.OffscreenIcon.Location}" TargetName="Icon"/>
                <Setter Property="Height" Value="30" TargetName="Icon"/>
                <Setter Property="Width" Value="30" TargetName="Icon"/>
                <Setter Property="Canvas.Left" Value="19" TargetName="Icon"/>
                <Setter Property="Canvas.Top" Value="26" TargetName="Icon"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="CharacterFriendly">
                <Setter Property="Background" Value="{StaticResource Minimap.OffscreenArrow.Friendly}" TargetName="IconHolder"/>
                <Setter Property="Height" Value="60" TargetName="IconHolder"/>
                <Setter Property="Width" Value="44" TargetName="IconHolder"/>
                <Setter Property="Canvas.Left" Value="-22" TargetName="MarkerBtn"/>
                <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="CharacterEnemy">
                <Setter Property="Background" Value="{StaticResource Minimap.OffscreenArrow.Enemy}" TargetName="IconHolder"/>
                <Setter Property="Height" Value="60" TargetName="IconHolder"/>
                <Setter Property="Width" Value="44" TargetName="IconHolder"/>
                <Setter Property="Canvas.Left" Value="-22" TargetName="MarkerBtn"/>
                <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="CharacterNeutral">
                <Setter Property="Visibility" Value="Collapsed" TargetName="canvas"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="PingMarker">
                <Setter TargetName="IconHolder" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="PingIcon" Property="Visibility" Value="Visible"/>

                <DataTrigger.EnterActions>
                    <BeginStoryboard x:Name="PingRotateAnimation" Storyboard="{StaticResource OutsideViewportPingStoryboard}">
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <StopStoryboard BeginStoryboardName="PingRotateAnimation"/>
                </DataTrigger.ExitActions>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Map marker style -->
    <Style TargetType="ls:LSWorldMapMarker">
        <Setter Property="Template" Value="{DynamicResource Map.MarkerDataTemplate}" />
        <Setter Property="Panel.ZIndex" Value="10" />

        <Style.Triggers>
            <Trigger Property="IsInsideViewport" Value="False">
                <Setter Property="Visibility" Value="Collapsed" />
            </Trigger>
            <DataTrigger Binding="{Binding Type}" Value="PingMarker">
                <Setter Property="Panel.ZIndex" Value="55" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="Player">
                <Setter Property="Panel.ZIndex" Value="50" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="Multiplayer">
                <Setter Property="Panel.ZIndex" Value="45" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="CharacterParty">
                <Setter Property="Panel.ZIndex" Value="40" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="CharacterNeutral">
                <Setter Property="Panel.ZIndex" Value="30" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="CharacterEnemy">
                <Setter Property="Panel.ZIndex" Value="30" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="CharacterFriendly">
                <Setter Property="Panel.ZIndex" Value="30" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="QuestMarker">
                <Setter Property="Panel.ZIndex" Value="20" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsInsideViewport, RelativeSource={RelativeSource Self}}" Value="False" />
                    <Condition Binding="{Binding Type}" Value="CharacterFriendly" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Template" Value="{StaticResource Map.MarkerDataTemplateOutsideViewport}" />
                    <Setter Property="IgnoreMapRotation" Value="True" />
                    <Setter Property="Visibility" Value="Visible" />
                    <Setter Property="Panel.ZIndex" Value="2" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsInsideViewport, RelativeSource={RelativeSource Self}}" Value="False" />
                    <Condition Binding="{Binding Type}" Value="CharacterEnemy" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Template" Value="{StaticResource Map.MarkerDataTemplateOutsideViewport}" />
                    <Setter Property="IgnoreMapRotation" Value="True" />
                    <Setter Property="Visibility" Value="Visible" />
                    <Setter Property="Panel.ZIndex" Value="2" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsInsideViewport, RelativeSource={RelativeSource Self}}" Value="False" />
                    <Condition Binding="{Binding Type}" Value="CharacterNeutral" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Template" Value="{StaticResource Map.MarkerDataTemplateOutsideViewport}" />
                    <Setter Property="IgnoreMapRotation" Value="True" />
                    <Setter Property="Visibility" Value="Visible" />
                    <Setter Property="Panel.ZIndex" Value="2" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsInsideViewport, RelativeSource={RelativeSource Self}}" Value="False" />
                    <Condition Binding="{Binding Type}" Value="CharacterParty" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Template" Value="{StaticResource Map.MarkerDataTemplateOutsideViewport}" />
                    <Setter Property="IgnoreMapRotation" Value="True" />
                    <Setter Property="Visibility" Value="Visible" />
                    <Setter Property="Panel.ZIndex" Value="2" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsInsideViewport, RelativeSource={RelativeSource Self}}" Value="False" />
                    <Condition Binding="{Binding Type}" Value="Player" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Template" Value="{StaticResource Map.MarkerDataTemplateOutsideViewport}" />
                    <Setter Property="IgnoreMapRotation" Value="True" />
                    <Setter Property="Visibility" Value="Visible" />
                    <Setter Property="Panel.ZIndex" Value="2" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsInsideViewport, RelativeSource={RelativeSource Self}}" Value="False" />
                    <Condition Binding="{Binding Type}" Value="Multiplayer" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Template" Value="{StaticResource Map.MarkerDataTemplateOutsideViewport}" />
                    <Setter Property="IgnoreMapRotation" Value="True" />
                    <Setter Property="Visibility" Value="Visible" />
                    <Setter Property="Panel.ZIndex" Value="2" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsInsideViewport, RelativeSource={RelativeSource Self}}" Value="False" />
                    <Condition Binding="{Binding Type}" Value="QuestMarker" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Template" Value="{StaticResource Map.MarkerDataTemplateOutsideViewport}" />
                    <Setter Property="IgnoreMapRotation" Value="True" />
                    <Setter Property="Visibility" Value="Visible" />
                    <Setter Property="Panel.ZIndex" Value="2" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsInsideViewport, RelativeSource={RelativeSource Self}}" Value="False" />
                    <Condition Binding="{Binding Type}" Value="LocationMarker" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Template" Value="{StaticResource Map.MarkerDataTemplateOutsideViewport}" />
                    <Setter Property="IgnoreMapRotation" Value="True" />
                    <Setter Property="Visibility" Value="Visible" />
                    <Setter Property="Panel.ZIndex" Value="2" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsInsideViewport, RelativeSource={RelativeSource Self}}" Value="False" />
                    <Condition Binding="{Binding Type}" Value="PingMarker" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Template" Value="{StaticResource Map.MarkerDataTemplateOutsideViewport}" />
                    <Setter Property="IgnoreMapRotation" Value="True" />
                    <Setter Property="Visibility" Value="Visible" />
                    <Setter Property="Panel.ZIndex" Value="2" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <!-- Minimap marker style -->
    <Style x:Key="Minimap.MarkerItemStyle" TargetType="ls:LSWorldMapMarker">
        <Setter Property="Template" Value="{DynamicResource Map.MarkerDataTemplate}" />
        <Setter Property="Panel.ZIndex" Value="10" />

        <Style.Triggers>
            <Trigger Property="IsInsideViewport" Value="False">
                <Setter Property="Visibility" Value="Collapsed" />
            </Trigger>
            <DataTrigger Binding="{Binding Type}" Value="PingMarker">
                <Setter Property="Panel.ZIndex" Value="55" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="Player">
                <Setter Property="Panel.ZIndex" Value="50" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="CharacterParty">
                <Setter Property="Panel.ZIndex" Value="40" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="CharacterNeutral">
                <Setter Property="Panel.ZIndex" Value="30" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="CharacterEnemy">
                <Setter Property="Panel.ZIndex" Value="30" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="CharacterFriendly">
                <Setter Property="Panel.ZIndex" Value="30" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="QuestMarker">
                <Setter Property="Panel.ZIndex" Value="20" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsInsideViewport, RelativeSource={RelativeSource Self}}" Value="False" />
                    <Condition Binding="{Binding Type}" Value="CharacterFriendly" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Template" Value="{StaticResource Map.MiniMarkerDataTemplateOutsideViewport}" />
                    <Setter Property="IgnoreMapRotation" Value="True" />
                    <Setter Property="Visibility" Value="Visible" />
                    <Setter Property="Panel.ZIndex" Value="2" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsInsideViewport, RelativeSource={RelativeSource Self}}" Value="False" />
                    <Condition Binding="{Binding Type}" Value="CharacterEnemy" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Template" Value="{StaticResource Map.MiniMarkerDataTemplateOutsideViewport}" />
                    <Setter Property="IgnoreMapRotation" Value="True" />
                    <Setter Property="Visibility" Value="Visible" />
                    <Setter Property="Panel.ZIndex" Value="2" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsInsideViewport, RelativeSource={RelativeSource Self}}" Value="False" />
                    <Condition Binding="{Binding Type}" Value="CharacterNeutral" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Template" Value="{StaticResource Map.MiniMarkerDataTemplateOutsideViewport}" />
                    <Setter Property="IgnoreMapRotation" Value="True" />
                    <Setter Property="Visibility" Value="Visible" />
                    <Setter Property="Panel.ZIndex" Value="2" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsInsideViewport, RelativeSource={RelativeSource Self}}" Value="False" />
                    <Condition Binding="{Binding Type}" Value="CharacterParty" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Template" Value="{StaticResource Map.MarkerDataTemplateOutsideViewport}" />
                    <Setter Property="IgnoreMapRotation" Value="True" />
                    <Setter Property="Visibility" Value="Visible" />
                    <Setter Property="Panel.ZIndex" Value="2" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsInsideViewport, RelativeSource={RelativeSource Self}}" Value="False" />
                    <Condition Binding="{Binding Type}" Value="Player" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Template" Value="{StaticResource Map.MarkerDataTemplateOutsideViewport}" />
                    <Setter Property="IgnoreMapRotation" Value="True" />
                    <Setter Property="Visibility" Value="Visible" />
                    <Setter Property="Panel.ZIndex" Value="2" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsInsideViewport, RelativeSource={RelativeSource Self}}" Value="False" />
                    <Condition Binding="{Binding Type}" Value="Multiplayer" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Template" Value="{StaticResource Map.MarkerDataTemplateOutsideViewport}" />
                    <Setter Property="IgnoreMapRotation" Value="True" />
                    <Setter Property="Visibility" Value="Visible" />
                    <Setter Property="Panel.ZIndex" Value="2" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsInsideViewport, RelativeSource={RelativeSource Self}}" Value="False" />
                    <Condition Binding="{Binding Type}" Value="QuestMarker" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Template" Value="{StaticResource Map.MiniMarkerDataTemplateOutsideViewport}" />
                    <Setter Property="IgnoreMapRotation" Value="True" />
                    <Setter Property="Visibility" Value="Visible" />
                    <Setter Property="Panel.ZIndex" Value="2" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsInsideViewport, RelativeSource={RelativeSource Self}}" Value="False" />
                    <Condition Binding="{Binding Type}" Value="LocationMarker" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Template" Value="{StaticResource Map.MiniMarkerDataTemplateOutsideViewport}" />
                    <Setter Property="IgnoreMapRotation" Value="True" />
                    <Setter Property="Visibility" Value="Visible" />
                    <Setter Property="Panel.ZIndex" Value="2" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsInsideViewport, RelativeSource={RelativeSource Self}}" Value="False" />
                    <Condition Binding="{Binding Type}" Value="PingMarker" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Template" Value="{StaticResource Map.MarkerDataTemplateOutsideViewport}" />
                    <Setter Property="IgnoreMapRotation" Value="True" />
                    <Setter Property="Visibility" Value="Visible" />
                    <Setter Property="Panel.ZIndex" Value="2" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="ls:LSWorldMapHighlight">
        <Setter Property="Template" Value="{DynamicResource Map.HighlightDataTemplate}" />
        <Setter Property="Panel.ZIndex" Value="0" />
    </Style>

    <ControlTemplate x:Key="SelectorTemplate" TargetType="Control">
        <ls:LSNineSliceImage ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_itemSelector.png" Slices="16" Focusable="False" Margin="-12" Padding="{TemplateBinding Padding}">
            <Border Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" MinHeight="10" MinWidth="10"  VerticalAlignment="Top" HorizontalAlignment="Left" Margin="12"/>
        </ls:LSNineSliceImage>
    </ControlTemplate>

    <ControlTemplate x:Key="InspirationProgressBar" TargetType="ls:LSProgressBar">
        <StackPanel Name="PART_Track" Orientation="Horizontal" ClipToBounds="True">
            <Rectangle Name="PART_Indicator">
                <Rectangle.Fill>
                    <ImageBrush x:Name="ImgValue" ImageSource="/GustavNoesisGUI;component/Assets/Shared/ico_resource_inspirationPoint_tile.png" TileMode="Tile" ViewportUnits="Absolute" Viewport="0,0,38,38" />
                </Rectangle.Fill>
            </Rectangle>
            <Rectangle Name="PART_SubIndicator">
                <Rectangle.Fill>
                    <ImageBrush x:Name="ImgCost" ImageSource="/GustavNoesisGUI;component/Assets/Shared/ico_resource_inspirationPoint_inactive_tile.png" TileMode="Tile" ViewportUnits="Absolute" Viewport="0,0,38,38" />
                </Rectangle.Fill>
            </Rectangle>
            <Rectangle Name="PART_IndicatorRemaining">
                <Rectangle.Fill>
                    <ImageBrush x:Name="ImgEmpty" ImageSource="/GustavNoesisGUI;component/Assets/Shared/ico_resource_inspirationPoint_inactive_tile.png" TileMode="Tile" ViewportUnits="Absolute" Viewport="0,0,38,38" />
                </Rectangle.Fill>
            </Rectangle>
        </StackPanel>
    </ControlTemplate>

    <ControlTemplate x:Key="HeaderInspirationPointsGold" TargetType="Control">
        <ControlTemplate.Resources>
            <Style x:Key="LabelStyle" TargetType="TextBlock">
                <Setter Property="Visibility" Value="Visible"/>
            </Style>
        </ControlTemplate.Resources>
        <StackPanel x:Name="root" Orientation="Horizontal" >
            <StackPanel x:Name="SuppliesHolder" Orientation="Horizontal" Background="Transparent" ToolTipService.IsEnabled="True" ToolTipService.Placement="Bottom">
                <StackPanel.ToolTip>
                    <ls:LSTooltip Content="{Binding Path=DataContext,ElementName=SuppliesHolder}" ls:TooltipExtender.Owner="{Binding Path=DataContext.SelectedCharacter, ElementName=root}">
                        <ls:LSTooltip.ContentTemplate>
                            <DataTemplate>
                                <TextBlock Width="{DynamicResource MaxTooltipContentWidth}" TextWrapping="Wrap" Margin="0,20,0,20">
                            <ls:TextBlockFormatter.SourceText>
                                <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                    <Binding Source="hd7341f92g766ag4d6fg81a6gb5006d22a44b"/>
                                    <Binding Path="RequiredPartySupplies"/>
                                </MultiBinding>
                            </ls:TextBlockFormatter.SourceText>
                                </TextBlock>
                            </DataTemplate>
                        </ls:LSTooltip.ContentTemplate>
                    </ls:LSTooltip>
                </StackPanel.ToolTip>

                <TextBlock VerticalAlignment="Center" TextAlignment="Right"  Foreground="{DynamicResource LS_baseTxtColor}" Background="Transparent"  Text="{Binding Source='h7708bf73ge1fcg40a0gbc51g5128c57ef782',Converter={StaticResource TranslatedStringConverter}}" Style="{DynamicResource LabelStyle}"/>
                <TextBlock VerticalAlignment="Center" TextAlignment="Right" Margin="10, 0, 0, 0" Foreground="{DynamicResource LS_tint100}" Background="Transparent" Text="{Binding PartySupplies}"/>
                <Image VerticalAlignment="Center" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_suppliesAquired.png" Stretch="None">
                    <b:Interaction.Triggers>
                        <b:PropertyChangedTrigger Binding="{Binding Path=PartySupplies}">
                            <b:Interaction.Behaviors>
                                <b:ConditionBehavior>
                                    <b:ConditionalExpression>
                                        <b:ComparisonCondition LeftOperand="{Binding PartySupplies}" Operator="LessThan" RightOperand="{Binding RequiredPartySupplies}"/>
                                    </b:ConditionalExpression>
                                </b:ConditionBehavior>
                            </b:Interaction.Behaviors>
                            <b:ChangePropertyAction PropertyName="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_supplies.png"/>
                        </b:PropertyChangedTrigger>
                    </b:Interaction.Triggers>
                </Image>
            </StackPanel>

            <StackPanel x:Name="InspirationHolder" Orientation="Horizontal" Background="Transparent" Margin="20,0,0,0" ToolTipService.IsEnabled="True" ToolTipService.Placement="Bottom">
                <StackPanel.ToolTip>
                    <ls:LSTooltip Content="{Binding .}" ls:TooltipExtender.Owner="{Binding Path=DataContext.SelectedCharacter, ElementName=root}">
                        <ls:LSTooltip.ContentTemplate>
                            <DataTemplate>
                                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='hd14181dbgc234g48f9gbb1dg4a014583669e',Converter={StaticResource TranslatedStringConverter}}" Width="{DynamicResource MaxTooltipContentWidth}" TextWrapping="Wrap" Margin="0,20,0,20"/>
                            </DataTemplate>
                        </ls:LSTooltip.ContentTemplate>
                    </ls:LSTooltip>
                </StackPanel.ToolTip>

                <TextBlock VerticalAlignment="Center" TextAlignment="Right" Foreground="{DynamicResource LS_baseTxtColor}" Background="Transparent" Text="{Binding Source='h62619d26gd851g48a3g9c91ge21ad5928086',Converter={StaticResource TranslatedStringConverter}}" Style="{DynamicResource LabelStyle}"/>
                <!-- For the value, as the inspiration points is defined in each character and synced across all the party members,
                     we can check the inspiration points value on any party character controlled (they will be the same).-->

                <TextBlock Text="{Binding SelectedCharacter.Stats.InspirationPointsResource.Value}" Foreground="{DynamicResource LS_tint100}" Background="Transparent" VerticalAlignment="Center" TextAlignment="Right" Margin="10,0,10,0"/>
                    <Image VerticalAlignment="Center" Stretch="None">
                    <Image.Style>
                        <Style TargetType="Image">
                            <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_resource_inspirationPoint_tile.png"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding SelectedCharacter.Stats.InspirationPointsResource.Value}" Value="0">
                                    <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_resource_inspirationPoint_inactive_tile.png"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Image.Style>
                </Image>
            </StackPanel>

            <StackPanel x:Name="PartyGoldHolder" Orientation="Horizontal" Background="Transparent" Margin="20,0,0,0">
                <StackPanel.ToolTip>
                    <ls:LSTooltip>
                        <ls:LSTooltip.Content>
                            <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h1e646e86g3c05g4c96g9fd8g9c521871d554',Converter={StaticResource TranslatedStringConverter}}" MaxWidth="{DynamicResource MaxTooltipContentWidth}" TextWrapping="Wrap" Margin="0,20,0,20"/>
                        </ls:LSTooltip.Content>
                    </ls:LSTooltip>
                </StackPanel.ToolTip>
                <TextBlock VerticalAlignment="Center" TextAlignment="Right"  Foreground="{DynamicResource LS_baseTxtColor}" Background="Transparent"  Text="{Binding Source='h4ef69730g7c3fg424ag8a7cge91e33fe7cee',Converter={StaticResource TranslatedStringConverter}}" Style="{DynamicResource LabelStyle}"/>
                <TextBlock VerticalAlignment="Center" TextAlignment="Right" Margin="10 0 10 0" Foreground="{DynamicResource LS_tint100}" Background="Transparent"  Text="{Binding PartyGold, StringFormat={}{0:N0}}" FontSize="{DynamicResource DefaultFontSize}"/>
                <Image VerticalAlignment="Center"  Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_ico_gold.png"  Stretch="None"/>
            </StackPanel>
        </StackPanel>
    </ControlTemplate>

    <Style x:Key="StatusDurationTextStyle" TargetType="TextBlock">
        <Setter Property="Text" Value="-" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding DurationType}" Value="Permanent">
                <Setter Property="Text" Value="{Binding Source='h82302eb4g8ff2g4ffegbe60gc579e1ae23af',Converter={StaticResource TranslatedStringConverter}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding DurationType}" Value="Timer">
                <Setter Property="Text">
                    <Setter.Value>
                        <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                            <Binding Source="h2dc60835g9000g440fga70fg330291eda7eb"/>
                            <Binding Path="DataContext.Duration" RelativeSource="{RelativeSource Mode=Self}"/>
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Duration}" Value="1" />
                    <Condition Binding="{Binding DurationType}" Value="Timer" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Text">
                        <Setter.Value>
                            <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                <Binding Source="h134a812fgc09eg43d7gbaadg9cb153532707"/>
                                <Binding Path="DataContext.Duration" RelativeSource="{RelativeSource Mode=Self}"/>
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding DurationType}" Value="FromSurface">
                <Setter Property="Text" Value="{Binding Source='hb2a148a4g90e3g4726g91a4g6f75d101d8a9',Converter={StaticResource TranslatedStringConverter}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding DurationType}" Value="Aura">
                <Setter Property="Text" Value="{Binding Source='h51826368gf983g41a8gaf5cg0b141e1a1239',Converter={StaticResource TranslatedStringConverter}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding DurationType}" Value="UntilRest">
                <Setter Property="Text" Value="{Binding Source='h50ea69dagf61eg466fga47eg530c55933114',Converter={StaticResource TranslatedStringConverter}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding DurationType}" Value="Environment">
                <Setter Property="Text" Value="{Binding Source='hffed1068gce4cg4b81g99c0g9e7967ed129c',Converter={StaticResource TranslatedStringConverter}}" />
            </DataTrigger>

        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="InventoryViewBlocker">
        <Rectangle x:Name="InventoryBlocker" Fill="{StaticResource LS_DisabledPanelColor}" 
                   Visibility="{Binding IsContentEditable, Mode=OneWay, Converter={StaticResource BoolToCollapsedConverter}}"/>
    </ControlTemplate>

    <Style x:Key="TutorialCategoryStyle" TargetType="TextBlock">
        <Setter Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='he162765ega290g4934ga287g65430dcac222', Converter={StaticResource TranslatedStringConverter}}"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Tutorial.Category}" Value="Combat">
                <Setter Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='h470a1dcfg4daag4f70g8f74g7c40dd9e56fe', Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Tutorial.Category}" Value="Gameplay">
                <Setter Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='h1e323305g61b3g4f01gb4dag9f9e4d9cf670', Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Tutorial.Category}" Value="Character">
                <Setter Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='h3c4dec9bgf673g4967gb69ag4a143056e291', Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Tutorial.Category}" Value="Exploration">
                <Setter Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='h4447b265g36e8g4ed2g9f91g96dcd20dd041', Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>