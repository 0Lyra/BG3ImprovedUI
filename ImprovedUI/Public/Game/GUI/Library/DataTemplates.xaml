<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:System="clr-namespace:System;assembly=mscorlib"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
					xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
			        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
                    xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
                    xmlns:ls="clr-namespace:ls;assembly=SharedGUI"
                    xmlns:noesis="clr-namespace:NoesisGUIExtensions;assembly=Noesis.GUI.Extensions"
					mc:Ignorable="d">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/GustavNoesisGUI;component/Library/PanelAnimations.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/GustavNoesisGUI;component/Library/Tooltips.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <System:Double x:Key="HotBarSlotWidth">80</System:Double>
    <System:Double x:Key="HotBarSlotHeight">80</System:Double>
    <System:Int16 x:Key="MaxVisibleStatuses">3</System:Int16>

    <Style x:Key="VendorAttitudeImageStyle" TargetType="Image" >
        <Setter Property="DockPanel.Dock" Value="Left"/>
        <Setter Property="Stretch" Value="None"/>
        <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/vendorAttitude_02.png" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Attitude, Converter={StaticResource LessThanConverter}, ConverterParameter=-29}" Value="True">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/vendorAttitude_01.png" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Attitude, Converter={StaticResource LessThanConverter}, ConverterParameter=25}" Value="False">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/vendorAttitude_03.png" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Attitude, Converter={StaticResource GreaterThanConverter}, ConverterParameter=69}" Value="True">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/vendorAttitude_04.png" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="CharacterClassList">
        <ItemsControl AlternationCount="{Binding Stats.ClassList.Count}" ItemsSource="{Binding Stats.ClassList}" HorizontalAlignment="Center">
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Horizontal"/>
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <TextBlock Text="{Binding ClassDisplayName}" Foreground="{DynamicResource LS_ActivePanelFontColor}"/>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
    </ControlTemplate>

    <Style x:Key="PortraitGridStyle" TargetType="Grid">
        <Setter Property="Opacity" Value="1"/>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsCurrentTurn}" Value="False"/>
                    <Condition Binding="{Binding InTurnBasedMode}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Opacity" Value="0.65"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="AbilityIconStyle" TargetType="Image">
        <Setter Property="Stretch" Value="None"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Ability}" Value="Strength">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/AbilityIcons/strength.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Ability}" Value="Constitution">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/AbilityIcons/constitution.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Ability}" Value="Dexterity">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/AbilityIcons/dexterity.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Ability}" Value="Intelligence">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/AbilityIcons/intelligence.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Ability}" Value="Wisdom">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/AbilityIcons/wisdom.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Ability}" Value="Charisma">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/AbilityIcons/charisma.png"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="AbilityIconStatStyle" TargetType="Image">
        <Setter Property="Stretch" Value="None"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding IDString}" Value="Strength">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/AbilityIcons/strength.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Constitution">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/AbilityIcons/constitution.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Dexterity">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/AbilityIcons/dexterity.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Intelligence">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/AbilityIcons/intelligence.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Wisdom">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/AbilityIcons/wisdom.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Charisma">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/AbilityIcons/charisma.png"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="MainClassIconStyle" TargetType="Image" >
        <Setter Property="Stretch" Value="None"/>
        <!-- MOD START - Generic icon for no class selected -->
        <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/Generic.png"/>
        <!-- MOD END -->
        <Style.Triggers>
            <DataTrigger Binding="{Binding IDString}" Value="Cleric">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/cleric.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Druid">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/druid.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Fighter">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/fighter.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Ranger">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/ranger.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Rogue">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/rogue.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Sorcerer">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/sorcerer.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Warlock">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/warlock.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Wizard">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/wizard.png"/>
            </DataTrigger>
            <!-- MOD START - Custom Class icons -->
            <DataTrigger Binding="{Binding IDString}" Value="Paladin">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/OathPaladin.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Oathbound">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/Oathbound.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Oathbreaker">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/Oathbreaker.png"/>
            </DataTrigger>
            <!-- MOD END -->
        </Style.Triggers>

    </Style>

    <Style x:Key="ClassIconStyle" TargetType="Image" BasedOn="{StaticResource MainClassIconStyle}">
        <Style.Triggers>
            <!-- Subclass -->
            <DataTrigger Binding="{Binding SubclassIDString}" Value="LifeDomain">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/cleric_life.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="TrickeryDomain">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/cleric_trickery.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="LightDomain">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/cleric_light.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="Fiend">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/warlock_fiend.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="GreatOldOne">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/warlock_greatOldOne.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="EvocationSchool">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/wizard_evocation.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="AbjurationSchool">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/wizard_abjuration.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="Thief">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/rogue_thief.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="Arcane Trickster">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/rogue_trickster.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="Hunter">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/ranger_hunter.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="BeastMaster">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/ranger_beastmaster.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="BattleMaster">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/fighter_battlemaster.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="EldritchKnight">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/fighter_eldritchKnight.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="CircleOfTheLand">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/druid_circleOfLand.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="CircleOfTheMoon">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/druid_circleOfMoon.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="CircleOfTheMoon">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/druid_circleOfMoon.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="DraconicBloodline">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/sorcerer_draconicBloodline.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SubclassIDString}" Value="WildMagic">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/ClassIcons/sorcerer_wildMagic.png"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="MainClassSmallIconStyle" TargetType="Image" >
        <Setter Property="Stretch" Value="None"/>
        <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Class/ico_class_m_barbarian.png"/>
        <Style.Triggers>

            <!-- No Subclass-->
            <DataTrigger Binding="{Binding IDString}" Value="Bard">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Class/ico_class_m_bard.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Cleric">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Class/ico_class_m_cleric.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Druid">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Class/ico_class_m_druid.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Fighter">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Class/ico_class_m_fighter.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Monk">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Class/ico_class_m_monk.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Paladin">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Class/ico_class_m_paladin.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Ranger">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Class/ico_class_m_ranger.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Rogue">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Class/ico_class_m_rogue.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Sorcerer">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Class/ico_class_m_sorcerer.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Warlock">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Class/ico_class_m_warlock.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IDString}" Value="Wizard">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Class/ico_class_m_wizard.png"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="ClassIconSmall" TargetType="Control">
        <Image Stretch="None" Style="{StaticResource MainClassSmallIconStyle}" />
    </ControlTemplate>

    <ControlTemplate x:Key="OtherPlayerPanelWithoutLock">
        <Grid>
            <Grid.ToolTip>
                <ls:LSTooltip Content="{Binding Name}"/>
            </Grid.ToolTip>
            <Ellipse Fill="{Binding CommunityIcon}"/>
            <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/playerProfileFrame.png" Stretch="None"/>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="OtherPlayerPanelWithLock">
        <Grid>
            <Control Template="{StaticResource OtherPlayerPanelWithoutLock}"/>
            <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_lockMultiplayerCharacter.png" Stretch="None" IsHitTestVisible="False" VerticalAlignment="Bottom" HorizontalAlignment="Right" Margin="0,0,-14,-10"/>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="OnFrameCharacterType">
        <TextBlock x:Name="text" 
                   Text="{Binding Source='hf9de073cgfc9bg498cg97c5ga20d486d9e3a',Converter={StaticResource TranslatedStringConverter}, ConverterParameter='ToUpper'}" 
                   FontSize="{DynamicResource TinyFontSize}" 
                   Foreground="{DynamicResource LS_LabelColor1}"/>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=CharacterType}" Value="Avatar">
                <Setter  TargetName="text" Property="Text" Value="{Binding Source='hefe0dbf0geb1ag48f8g88b0gba0c5e053381',Converter={StaticResource TranslatedStringConverter}, ConverterParameter='ToUpper'}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=CharacterType}" Value="Companion">
                <Setter TargetName="text" Property="Text" Value="{Binding Source='h1971457egef06g4b81g971egf30997b9bd22',Converter={StaticResource TranslatedStringConverter}, ConverterParameter='ToUpper'}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=CharacterType}" Value="Summon">
                <Setter TargetName="text" Property="Text" Value="{Binding Source='h329b540dgbab9g4999g999dg371e10359d25',Converter={StaticResource TranslatedStringConverter}, ConverterParameter='ToUpper'}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=CharacterType}" Value="Follower">
                <Setter TargetName="text" Property="Text" Value="{Binding Source='hc6195bc3g1dfcg4e77gb619g147fd0f74ec8',Converter={StaticResource TranslatedStringConverter}, ConverterParameter='ToUpper'}" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Character View, Party View Mode Switch Buttons-->
    <ControlTemplate x:Key="SwitchToCharacterOverview">
        <StackPanel Orientation="Horizontal">
            <ls:LSButton BoundEvent="TogglePartyCharacterView" Content="{Binding Source='ha4177187gddecg4e4dg8870g01827a52f589',Converter={StaticResource TranslatedStringConverter}, ConverterParameter='ToUpper'}" Style="{DynamicResource ModeSwitchButtonLeftInactive}" Command="{Binding CustomEvent}" CommandParameter="ToggleCharacterOverview" SoundID="UI_HUD_Panel_CharacterView"/>
            <ls:LSButton Content="{Binding Source='h33dc9b01gb34eg455cg890cgcd09e4a2ba2e',Converter={StaticResource TranslatedStringConverter}, ConverterParameter='ToUpper'}" Style="{DynamicResource ModeSwitchButtonRightActive}" SoundID="UI_HUD_Panel_PartyView"/>
        </StackPanel>
    </ControlTemplate>

    <ControlTemplate x:Key="BottomHealthBar">
        <ls:LSProgressBar VerticalAlignment="Bottom" HorizontalAlignment="Center" Margin="0,0,0,82"
                          Width="564" Height="12" 
                          Value="{Binding CurrentPlayer.SelectedCharacter.Stats.Health.PercentValue, Mode=OneWay}" 
                          Minimum="0" Maximum="1" 
                          Background="Transparent" BorderBrush="Transparent">
            <ls:LSProgressBar.Foreground>
                <ImageBrush ImageSource="/GustavNoesisGUI;component/Assets/BottomBar/health_bar.png" />
            </ls:LSProgressBar.Foreground>
        </ls:LSProgressBar>
    </ControlTemplate>

    <ControlTemplate x:Key="InventoryFilterButtons">
        <ls:LSListBox x:Name="invViewList"  
                      ActionPrevEvent="UITabPrev" ActionNextEvent="UITabNext"
                      ItemsSource="{Binding CurrentPlayer.UIData.InventoryTabList}" 
                      SelectedItem="{Binding CurrentPlayer.UIData.CurrentInventoryTab, Mode=OneWay}" 
                      ItemContainerStyle="{DynamicResource InventoryViewTabStyle}" 
                      Background="Transparent" BorderBrush="Transparent" 
                      ScrollViewer.HorizontalScrollBarVisibility="Disabled" 
                      ScrollViewer.VerticalScrollBarVisibility="Disabled">
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="SelectionChanged">
                    <i:InvokeCommandAction Command="{Binding SetPartyInventoryViewCommand}" CommandParameter="{Binding ElementName=invViewList, Path=SelectedItem}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>
            <ls:LSListBox.ItemsPanel>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel IsItemsHost="True" Orientation="Horizontal" KeyboardNavigation.TabNavigation="Cycle" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                </ItemsPanelTemplate>
            </ls:LSListBox.ItemsPanel>
        </ls:LSListBox>
    </ControlTemplate>

    <Style x:Key="RarityFrameForegroundImageStyle" TargetType="Image">
        <Setter Property="IsHitTestVisible" Value="False"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Item.Rarity}" Value="Uncommon">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/rarityFrame_uncommon_front.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Item.Rarity}" Value="Rare">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/rarityFrame_rare_front.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Item.Rarity}" Value="VeryRare">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/rarityFrame_veryrare_front.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Item.Rarity}" Value="Legendary">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/rarityFrame_legendary_front.png"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding RitualCastEnabled}" Value="True">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/frame_ritual_h.png"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="RarityFrameBackgroundRectangleStyle" TargetType="Rectangle">
        <Setter Property="IsHitTestVisible" Value="False"/>
        <Setter Property="Opacity" Value="0.5"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Item.Rarity}" Value="Uncommon">
                <Setter Property="Fill">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                            <GradientStop Color="{DynamicResource ItemRarityColour.UncommonGradientTop}" Offset="0" />
                            <GradientStop Color="{DynamicResource ItemRarityColour.UncommonGradientBottom}" Offset="1" />
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Item.Rarity}" Value="Rare">
                <Setter Property="Fill">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                            <GradientStop Color="{DynamicResource ItemRarityColour.RareGradientTop}" Offset="0" />
                            <GradientStop Color="{DynamicResource ItemRarityColour.RareGradientBottom}" Offset="1" />
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Item.Rarity}" Value="VeryRare">
                <Setter Property="Fill">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                            <GradientStop Color="{DynamicResource ItemRarityColour.VeryRareGradientTop}" Offset="0" />
                            <GradientStop Color="{DynamicResource ItemRarityColour.VeryRareGradientBottom}" Offset="1" />
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Item.Rarity}" Value="Legendary">
                <Setter Property="Fill">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                            <GradientStop Color="{DynamicResource ItemRarityColour.LegendaryGradientTop}" Offset="0" />
                            <GradientStop Color="{DynamicResource ItemRarityColour.LegendaryGradientBottom}" Offset="1" />
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="InvContainerListBoxItemStyle" TargetType="ListBoxItem"  BasedOn="{StaticResource {x:Type ListBoxItem}}">
        <Setter Property="Padding" Value="0"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <ContentControl ToolTipService.Placement ="Right">
                        <ContentControl.ToolTip>
                            <ls:LSTooltip CustomData="{Binding Item}"/>
                        </ContentControl.ToolTip>
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="MouseDoubleClick" >
                                <i:InvokeCommandAction Command="{Binding DataContext.TakeItemCommand.ActionCommand,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding Item}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                        <Grid  Width="{DynamicResource ContInvSlotSize}" Height="{DynamicResource ContInvSlotSize}">
                            <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Inventory/inventorySlot_filledOverlay.png"/>
                            <ContentPresenter />
                            <Image  x:Name="SelectedImg" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Inventory/selector_slot_inv.png" IsHitTestVisible="False" Visibility="Hidden" Opacity="1.0" />
                        </Grid>
                    </ContentControl>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="SelectedImg" Property="Visibility" Value="Visible" />
                            <Setter TargetName="SelectedImg" Property="Opacity" Value="1.0"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="InventoryCellItemImageStyle" TargetType="Image">
        <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_tab_wares.png" />
        <Setter Property="IsHitTestVisible" Value="False" />
        <Setter Property="Visibility" Value="Hidden" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Item.IsWare}" Value="True">
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="NewInventoryCellItemImageStyle" TargetType="Image">
        <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_newItem.png" />
        <Setter Property="Stretch" Value="None" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="IsHitTestVisible" Value="False" />
        <Setter Property="Visibility" Value="Collapsed" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Item.IsNew}" Value="True">
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="InventoryCellLabelStyle" TargetType="Label"  BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Content" Value="{Binding ItemViewAmount}" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="VerticalAlignment" Value="Bottom" />
        <Setter Property="Foreground" Value="{DynamicResource LS_PrimaryColor}" />
        <Setter Property="FontSize" Value="{DynamicResource MediumFontSize}" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Background" Value="{x:Null}" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="noesis:Text.Stroke" Value="Black" />
        <Setter Property="noesis:Text.StrokeThickness" Value="4" />
        <Setter Property="Visibility" Value="Visible" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding ItemViewAmount}" Value="1">
                <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="InventoryInUseSlotIndicator">
        <Rectangle Name="active" Fill="White" Visibility="{Binding Item.IsInUse, Converter={StaticResource BoolToVisibleConverter}}">
            <Rectangle.Triggers>
                <EventTrigger RoutedEvent="Rectangle.Unloaded">
                    <StopStoryboard BeginStoryboardName="InUseSlotIndicatorAnim" />
                </EventTrigger>
            </Rectangle.Triggers>
        </Rectangle>
        <ControlTemplate.Triggers>
            <Trigger Property="Visibility" Value="Visible" SourceName="active">
                <Trigger.EnterActions>
                    <BeginStoryboard x:Name="InUseSlotIndicatorAnim">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="active" Storyboard.TargetProperty="Opacity" From="0.70" To="0.50" Duration="0:0:0.5" AutoReverse="True" RepeatBehavior="Forever">
                                <DoubleAnimation.EasingFunction>
                                    <PowerEase EasingMode="EaseInOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <StopStoryboard BeginStoryboardName="InUseSlotIndicatorAnim" />
                </Trigger.ExitActions>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <DataTemplate x:Key="InventoryItemCellTemplate">
        <Grid Width="{DynamicResource ItemIconSize}" Height="{DynamicResource ItemIconSize}">
            <Rectangle Style="{StaticResource RarityFrameBackgroundRectangleStyle}"/>
            <ls:LSEntityObject Context="Inventory" EntityRef="{Binding Item.EntityHandle}" Background="{Binding Item.Icon}">
                <Image Style="{StaticResource InventoryCellItemImageStyle}"/>
                <Label Style="{StaticResource InventoryCellLabelStyle}" IsHitTestVisible="False"/>
                <Image Style="{StaticResource NewInventoryCellItemImageStyle}"/>

                <!-- Disable slot if the item is in use -->
                <ContentControl IsHitTestVisible="True">
                    <ContentControl.Style>
                        <Style TargetType="ContentControl">
                            <Setter Property="Template" Value="{StaticResource InventoryInUseSlotIndicator}" />
                        </Style>
                    </ContentControl.Style>
                </ContentControl>

            </ls:LSEntityObject>
            <Image Style="{StaticResource RarityFrameForegroundImageStyle}"/>
        </Grid>
    </DataTemplate>


    <DataTemplate x:Key="Template.ContainerCell">
        <Grid Width="{DynamicResource ContItemIconSize}" Height="{DynamicResource ContItemIconSize}">
            <Rectangle Style="{StaticResource RarityFrameBackgroundRectangleStyle}"/>
            <ls:LSEntityObject EntityRef="{Binding Item.EntityHandle}" Context="{Binding DataContext.ContainerContext,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Background="{Binding Item.Icon}">
                <Image Style="{StaticResource InventoryCellItemImageStyle}"/>
                <Label Style="{StaticResource InventoryCellLabelStyle}" IsHitTestVisible="False"/>
            </ls:LSEntityObject>
            <Image Style="{StaticResource RarityFrameForegroundImageStyle}"/>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="MouseEnter">
                    <ls:LSPlaySound Sound="UI_HUD_Inventory_Over"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>
        </Grid>
    </DataTemplate>

    <!-- Empty cell Representation -->
    <DataTemplate x:Key="EmptyCellTemplate">
        <Image Source="{DynamicResource InventoryCellImage}" Stretch="None"/>
    </DataTemplate>

    <ControlTemplate x:Key="InventoryCellTemplate" >
        <!-- This is a ContentControl to facilitate the interaction eventtriggers -->
        <ContentControl ToolTipService.Placement="Right" Tag="{Binding DataContext,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" ToolTip="{StaticResource ManagedTooltip}">
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="MouseLeftButtonUp">
                    <i:InvokeCommandAction Command="{Binding DataContext.ToggleWare, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding Item}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseDoubleClick" >
                    <i:Interaction.Behaviors>
                        <ei:ConditionBehavior >
                            <ei:ConditionalExpression>
                                <ei:ComparisonCondition LeftOperand="{Binding DataContext.CurrentPlayer.UIData.CurrentExtractedPanelContext, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, FallbackValue=None}"
                                                        Operator="Equal" RightOperand="None"/>
                            </ei:ConditionalExpression>
                        </ei:ConditionBehavior>
                    </i:Interaction.Behaviors>
                    <i:InvokeCommandAction Command="{Binding DataContext.UseGameObject,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding Item}" />
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseDoubleClick" >
                    <i:Interaction.Behaviors>
                        <ei:ConditionBehavior >
                            <ei:ConditionalExpression>
                                <ei:ComparisonCondition LeftOperand="{Binding DataContext.CurrentPlayer.UIData.CurrentExtractedPanelContext, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                                        Operator="Equal" RightOperand="Combine"/>
                            </ei:ConditionalExpression>
                        </ei:ConditionBehavior>
                    </i:Interaction.Behaviors>
                    <i:InvokeCommandAction Command="{Binding DataContext.AddToCombine,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding Item}" />
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseEnter">
                    <i:InvokeCommandAction Command="{Binding DataContext.ClearItemNewFlag, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding Item}"/>
                    <ls:LSPlaySound Sound="UI_HUD_Inventory_Over"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>
            <Grid>
                <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Inventory/inventorySlot_filledOverlay.png" Width="{DynamicResource InvSlotSize}" Height="{DynamicResource InvSlotSize}"/>
                <ContentPresenter ContentTemplate="{StaticResource InventoryItemCellTemplate}"/>
                <Image  x:Name="SelectedImg" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Inventory/selector_slot_inv.png" IsHitTestVisible="False" Visibility="Hidden" Stretch="None"/>
            </Grid>
        </ContentControl>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="SelectedImg" Property="Visibility" Value="Visible" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--Inventory Grid-->
    <Style TargetType="ListBox" x:Key="InventoryGrid" BasedOn="{StaticResource {x:Type ListBox}}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Visible" />
        <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Recycling"/>
        <Setter Property="VirtualizingPanel.ScrollUnit" Value="Pixel"/>
        <Setter Property="ItemsPanel" >
            <Setter.Value>
                <ItemsPanelTemplate>
                    <ls:LSGrid x:Name="InvGrid" Background="{StaticResource InventoryCell2x2Brush}" noesis:Element.PPAAMode="Disabled" SnapsToDevicePixels="True" ContainerData="{Binding }" 
                               Columns="{DynamicResource invCols}" Rows="{DynamicResource invRows}" ScrollAmount="114"
                               CellWidth="{DynamicResource InvSlotSize}" CellHeight="{DynamicResource InvSlotSize}" VerticalSpacing="{DynamicResource InvSpacing}" HorizontalSpacing="{DynamicResource InvSpacing}" 
                               ActionUpEvent="UIUp" ActionDownEvent="UIDown" ActionRightEvent="UIRight" ActionLeftEvent="UILeft">
                        <ls:LSGrid.Style>
                            <Style TargetType="ls:LSGrid">
                                <Setter Property="Margin" Value="0,4,0,0" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding DataContext.Data.UIMode, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Controller">
                                        <Setter Property="Margin" Value="0,0,0,0" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ls:LSGrid.Style>
                        <i:Interaction.Behaviors>
                            <ls:DropOnInventoryGridBehavior />
                            <ls:DragGameObjectGridBehavior/>
                        </i:Interaction.Behaviors>
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="WidgetClosing">
                                <i:InvokeCommandAction Command="{Binding DataContext.ClearInventoryNewFlags, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding }"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </ls:LSGrid>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="ListBoxItem">
                    <Setter Property="Template" Value="{StaticResource InventoryCellTemplate}" />
                    <Setter Property="BorderBrush" Value="Transparent" />
                    <Setter Property="Background" Value="Transparent" />
                    <Setter Property="Width" Value="{DynamicResource InvSlotSize}" />
                    <Setter Property="Height" Value="{DynamicResource InvSlotSize}" />
                    <Setter Property="Padding" Value="0" />
                    <Setter Property="BorderThickness" Value="0" />
                    <Setter Property="VerticalContentAlignment" Value="Top"/>
                    <Style.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="BorderBrush" Value="Transparent" />
                            <Setter Property="Background" Value="Transparent" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="Transparent" />
                            <Setter Property="Background" Value="Transparent" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Character type textbox -->
    <DataTemplate x:Key="CharacterTypeTextbox">
        <TextBlock Height="20" Foreground="Black" FontSize="{DynamicResource TinyFontSize}">
            <TextBlock.Style>
                <Style TargetType="{x:Type TextBlock}">
                    <Setter Property="Text" Value="{x:Null}"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding CharacterType}" Value="Avatar">
                            <Setter Property="Text" Value="{Binding Source='ha635e2bfga0f5g4d71g8a1bg80dfebf93101', Converter={StaticResource TranslatedStringConverter}, ConverterParameter='ToUpper'}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding CharacterType}" Value="Companion">
                            <Setter Property="Text" Value="{Binding Source='h0f49a5c4g802ag496dg9fc0g6e6224307f51', Converter={StaticResource TranslatedStringConverter}, ConverterParameter='ToUpper'}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding CharacterType}" Value="Summon">
                            <Setter Property="Text" Value="{Binding Source='hce7e00b6ge11dg41f8ga991gf3eca0afb89f', Converter={StaticResource TranslatedStringConverter}, ConverterParameter='ToUpper'}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding CharacterType}" Value="Follower">
                            <Setter Property="Text" Value="{Binding Source='hd0338633ga351g4d67gac56ge2c21883f875', Converter={StaticResource TranslatedStringConverter}, ConverterParameter='ToUpper'}"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </TextBlock.Style>
        </TextBlock>
    </DataTemplate>

    <!-- HotBar BEGIN -->

    <ControlTemplate x:Key="HotBarActiveSlotIndicator">
        <Grid>
            <Rectangle Name="active" Fill="White" Visibility="{Binding IsActive, Converter={StaticResource BoolToVisibleConverter}}">
                <Rectangle.Triggers>
                    <EventTrigger RoutedEvent="Rectangle.Unloaded">
                        <StopStoryboard BeginStoryboardName="ActiveSlotIndicatorAnim" />
                    </EventTrigger>
                </Rectangle.Triggers>
            </Rectangle>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="Visibility" Value="Visible" SourceName="active">
                <Trigger.EnterActions>
                    <BeginStoryboard x:Name="ActiveSlotIndicatorAnim">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="active" Storyboard.TargetProperty="Opacity" From="0.25" To="0.60" Duration="0:0:1" AutoReverse="True" RepeatBehavior="Forever">
                                <DoubleAnimation.EasingFunction>
                                    <PowerEase EasingMode="EaseInOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <StopStoryboard BeginStoryboardName="ActiveSlotIndicatorAnim" />
                </Trigger.ExitActions>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="HotBarActiveSlotIndicatorPassive">
        <Ellipse Name="PassiveSlotAnimFrame" StrokeThickness="4" Visibility="{Binding IsActive, Converter={StaticResource BoolToVisibleConverter}}">
            <Ellipse.Stroke>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="White" Offset="0"/>
                    <GradientStop Color="Transparent" Offset="1"/>
                </LinearGradientBrush>
            </Ellipse.Stroke>
            <Ellipse.Triggers>
                <EventTrigger RoutedEvent="FrameworkElement.Unloaded">
                    <StopStoryboard BeginStoryboardName="Bsb_Passive"/>
                </EventTrigger>
            </Ellipse.Triggers>
        </Ellipse>
        <ControlTemplate.Triggers>
            <Trigger Property="Visibility" Value="Visible" SourceName="PassiveSlotAnimFrame">
                <Trigger.EnterActions>
                    <BeginStoryboard x:Name="Bsb_Passive" Storyboard="{StaticResource GradientChaser}"/>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <StopStoryboard BeginStoryboardName="Bsb_Passive"/>
                </Trigger.ExitActions>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="HotBarActiveSlotIndicatorMetamagic">
        <Grid Width="{StaticResource HotBarSlotWidth}" Height="{StaticResource HotBarSlotHeight}">
            <ls:AnimatedImage x:Name="PassiveEnergyFill" Template="{StaticResource BaseAnimatedImage}" ClipSize="80,80" RepeatBehavior="1x" Time="0:0:0.033" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/VFX/roundEnergyFill.png" Visibility="Collapsed"/>
            <ls:AnimatedImage x:Name="PassiveFlameEdge" Template="{StaticResource BaseAnimatedImage}" ClipSize="80,80" LastFrame="41" RepeatBehavior="Forever" Time="0:0:0.033" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/VFX/roundFlameEdge.png" Opacity="0" Visibility="Collapsed"/>
            <Image x:Name="PassiveCover" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/VFX/roundIconCover.png" Visibility="Collapsed" Opacity="0"/>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding IsActive}" Value="True">
                <Setter Property="Visibility" Value="Visible" TargetName="PassiveEnergyFill"/>
                <Setter Property="Visibility" Value="Visible" TargetName="PassiveFlameEdge"/>
                <Setter Property="Visibility" Value="Visible" TargetName="PassiveCover"/>
                <DataTrigger.EnterActions>
                    <BeginStoryboard x:Name="FadeInPassiveFlameEdge">
                        <Storyboard RepeatBehavior="1x">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="PassiveFlameEdge">
                                <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0.0"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                    <BeginStoryboard x:Name="FadeInOutPassiveCover">
                        <Storyboard RepeatBehavior="1x">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="PassiveCover">
                                <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0.0"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>

                    <BeginStoryboard x:Name="LoopPassiveCover">
                        <Storyboard RepeatBehavior="Forever" BeginTime="0:0:0.5">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="PassiveCover">
                                <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:1" Value="0.6"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:2" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <StopStoryboard BeginStoryboardName="FadeInPassiveFlameEdge"/>
                    <StopStoryboard BeginStoryboardName="FadeInOutPassiveCover"/>
                    <StopStoryboard BeginStoryboardName="LoopPassiveCover"/>
                </DataTrigger.ExitActions>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Hotbar slot Representation START-->
    <Style x:Key="HotBarSlotStyle" TargetType="ls:LSButton" >
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="0"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="BoundEvent" Value="{Binding BoundEvent}"/>
        <Setter Property="Command" Value="{Binding DataContext.UseSlotCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
        <Setter Property="CommandParameter" Value="{Binding}"/>
        <Setter Property="SoundID" Value="UI_HUD_HotbarSlot"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ls:LSButton">
                    <Grid>
                        <Grid Width="{DynamicResource HotBarSlotWidth}" Height="{DynamicResource HotBarSlotHeight}">
                            <Rectangle Style="{StaticResource RarityFrameBackgroundRectangleStyle}"/>
                            <Rectangle x:Name="iconHolder" Fill="{Binding Icon}">
                                <Rectangle.Style>
                                    <Style TargetType="Rectangle">
                                        <Setter Property="Visibility" Value="Visible"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding SlotType}" Value="Passive">
                                                <Setter Property="Visibility" Value="Collapsed"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Rectangle.Style>
                            </Rectangle>
                            <Image Style="{StaticResource RarityFrameForegroundImageStyle}"/>
                        </Grid>

                        <Ellipse Fill="{Binding Icon}" Width="{StaticResource HotBarSlotWidth}" Height="{StaticResource HotBarSlotHeight}" Visibility="{Binding Visibility, ElementName=iconHolder, Converter={StaticResource InvertVisibilityConverter}}"/>

                        <Label IsHitTestVisible="False" Content="{Binding HotKey}" Margin="4,0,0,-6" HorizontalAlignment="Left" VerticalAlignment="Bottom" Foreground="{StaticResource LS_tint100}" FontWeight="Bold" FontSize="{DynamicResource SmallFontSize}" noesis:Text.Stroke="Black" noesis:Text.StrokeThickness="4" >
                            <Label.Style>
                                <Style TargetType="{x:Type Label}" BasedOn="{StaticResource {x:Type Label}}" >
                                    <Setter Property="Visibility" Value="Visible" />
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding DataContext.Data.UIMode, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Controller">
                                            <Setter Property="Visibility" Value="Hidden" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding DataContext.Data.UIMode, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="TouchSmall">
                                            <Setter Property="Visibility" Value="Hidden" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding DataContext.Data.UIMode, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="TouchBig">
                                            <Setter Property="Visibility" Value="Hidden" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HotKey}" Value="null">
                                            <Setter Property="Visibility" Value="Hidden" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Label.Style>
                        </Label>
                        <Label IsHitTestVisible="False" Content="{Binding Item.Count}" Margin="0,0,4,-2" HorizontalAlignment="Right" VerticalAlignment="Bottom" Foreground="{StaticResource LS_tint100}" FontWeight="Bold" FontSize="{DynamicResource LargeFontSize}" noesis:Text.Stroke="Black" noesis:Text.StrokeThickness="4" >
                            <Label.Style>
                                <Style TargetType="{x:Type Label}" BasedOn="{StaticResource {x:Type Label}}" >
                                    <Setter Property="Visibility" Value="Visible"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding SlotType}" Value="Spell">
                                            <Setter Property="Visibility" Value="Hidden" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding SlotType}" Value="Action">
                                            <Setter Property="Visibility" Value="Hidden" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding SlotType}" Value="Passive">
                                            <Setter Property="Visibility" Value="Hidden" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding SlotType}" Value="Empty">
                                            <Setter Property="Visibility" Value="Hidden" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding Item.Count}" Value="1">
                                            <Setter Property="Visibility" Value="Hidden" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Label.Style>
                        </Label>

                        <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_spellSubSelectIndicator.png" Stretch="None" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,8,8,0">
                            <Image.Style>
                                <Style TargetType="{x:Type Image}" >
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Spell.IsContainer}" Value="True">
                                            <Setter Property="Visibility" Value="Visible" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding DataContext.PanelContentType, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Spell">
                                            <Setter Property="Visibility" Value="Collapsed" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Image.Style>
                        </Image>

                        <Grid x:Name="hover" Visibility="Hidden" Margin="-2,-2,0,0">
                            <Rectangle x:Name="hoverRect" Fill="#55FFFFFF">
                                <Rectangle.Style>
                                    <Style TargetType="Rectangle">
                                        <Setter Property="Visibility" Value="Visible"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding SlotType}" Value="Passive">
                                                <Setter Property="Visibility" Value="Collapsed"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Rectangle.Style>
                            </Rectangle>
                            <Ellipse Fill="#55FFFFFF" Visibility="{Binding Visibility, ElementName=hoverRect, Converter={StaticResource InvertVisibilityConverter}}"/>
                        </Grid>

                        <Grid x:Name="disCover" Visibility="Hidden" Opacity="0.5" Margin="-2,-2,0,0">
                            <Rectangle x:Name="disRect" Fill="Black">
                                <Rectangle.Style>
                                    <Style TargetType="Rectangle">
                                        <Setter Property="Visibility" Value="Visible"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding SlotType}" Value="Passive">
                                                <Setter Property="Visibility" Value="Collapsed"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Rectangle.Style>
                            </Rectangle>
                            <Ellipse  Fill="Black" Visibility="{Binding Visibility, ElementName=disRect, Converter={StaticResource InvertVisibilityConverter}}"/>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Name}" Value="">
                            <Setter Property="IsEnabled" Value="False"/>
                        </DataTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="hover"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding CanUse}" Value="False">
                            <Setter Property="Visibility" Value="Visible" TargetName="disCover"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding CanUse}" Value="False"/>
                                <Condition Binding="{Binding Spell.IsContainer}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Command" Value="{x:Null}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding CanUse}" Value="False"/>
                                <Condition Binding="{Binding Spell.IsContainer}" Value="True"/>
                                <Condition Binding="{Binding DataContext.PanelContentType, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Spell"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility" Value="Visible" TargetName="disCover"/>
                            <Setter Property="Command" Value="{x:Null}"/>
                        </MultiDataTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding SlotType}" Value="Passive"/>
                    <Condition Binding="{Binding IsActive}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="SoundID" Value="UI_HUD_Passive_Untoggle"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding SlotType}" Value="Passive"/>
                    <Condition Binding="{Binding IsActive}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="SoundID" Value="UI_HUD_Passive_Toggle"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <DataTemplate x:Key="HotBarSlot">
        <Grid>
            <ContentControl x:Name="contentContainer" ToolTip="{StaticResource ManagedTooltip}" ToolTipService.IsEnabled="True" ToolTipService.Placement="Top" ToolTipService.VerticalOffset="0">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MouseEnter">
                        <i:InvokeCommandAction Command="{Binding DataContext.HighlightResourcesCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}"/>
                    </i:EventTrigger>
                    <i:EventTrigger EventName="MouseLeave">
                        <i:InvokeCommandAction Command="{Binding DataContext.ClearResourceHighlightsCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}"/>
                    </i:EventTrigger>
                    <i:EventTrigger EventName="Unloaded">
                        <ei:ChangePropertyAction TargetName="HotbarslotBtn" PropertyName="CommandParameter" Value="{x:Null}"/>
                        <ei:ChangePropertyAction TargetName="HotbarslotBtn" PropertyName="Tag" Value="{x:Null}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <ls:LSButton x:Name="HotbarslotBtn">
                    <ls:LSButton.Tag>
                        <MultiBinding Converter="{StaticResource PassThroughConverter}">
                            <Binding ElementName="contentContainer" Mode="OneTime" />
                            <Binding Source="Top"/>
                        </MultiBinding>
                    </ls:LSButton.Tag>
                    <ls:LSButton.Style>
                        <Style TargetType="ls:LSButton" BasedOn="{StaticResource HotBarSlotStyle}">
                            <Setter Property="CommandParameter" Value="{Binding Path=Tag,RelativeSource={RelativeSource Mode=Self}}"/>
                        </Style>
                    </ls:LSButton.Style>
                </ls:LSButton>
            </ContentControl>

            <!-- Metamagic animation slot -->
            <Control IsHitTestVisible="False" Width="{StaticResource HotBarSlotWidth}" Height="{StaticResource HotBarSlotHeight}">
                <Control.Template>
                    <ControlTemplate>
                        <Grid>
                            <!-- The borders are here because only one storyboard can manipulate a property at a time, so even starting a storyboard with a start delay, the storyboard will already take ownership of the property -->
                            <Border x:Name="FadeFlameEdge" Visibility="Collapsed">
                                <ls:AnimatedImage x:Name="MetamagicFlameEdge" Template="{StaticResource BaseAnimatedImage}" ClipSize="80,80" LastFrame="45" RepeatBehavior="Forever" Time="0:0:0.033" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/VFX/squareFlameEdge.png"/>
                            </Border>

                            <Border x:Name="FadeCover" Visibility="Collapsed">
                                <Image x:Name="MetamagicCover" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/VFX/squareIconCover.png" />
                            </Border>
                            <Border x:Name="EnergyFill" Visibility="Collapsed">
                                <ls:AnimatedImage x:Name="MetamagicEnergyFill" Template="{StaticResource BaseAnimatedImage}" ClipSize="80,80" RepeatBehavior="1x" Time="0:0:0.033" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/VFX/squareEnergyFill.png"/>
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding MetaMagicEnabled}" Value="True"/>
                                    <Condition Binding="{Binding DataContext.CurrentPlayer.SelectedCharacter.IsSpellCasting, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value=""/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Visibility" Value="Visible" TargetName="EnergyFill"/>
                                <Setter Property="Visibility" Value="Visible" TargetName="FadeFlameEdge"/>
                                <Setter Property="Visibility" Value="Visible" TargetName="FadeCover"/>
                                <MultiDataTrigger.EnterActions>
                                    <BeginStoryboard x:Name="EnergyFillControl">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="EnergyFill">
                                                <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="1"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.55" Value="1"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.6" Value="0"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </BeginStoryboard>
                                    <BeginStoryboard x:Name="FadeInFlameEdge">
                                        <Storyboard RepeatBehavior="1x" FillBehavior="Stop">
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="FadeFlameEdge">
                                                <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.6" Value="0.9"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </BeginStoryboard>
                                    <BeginStoryboard x:Name="FadeInOutCover">
                                        <Storyboard RepeatBehavior="1x" BeginTime="0:0:0.0" FillBehavior="Stop">
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="FadeCover">
                                                <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.6" Value="0.9"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </BeginStoryboard>
                                    <BeginStoryboard x:Name="LoopFlameEdge">
                                        <Storyboard RepeatBehavior="Forever" BeginTime="0:0:0.6">
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="MetamagicFlameEdge">
                                                <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0.9"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:1" Value="1"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.9"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </BeginStoryboard>
                                    <BeginStoryboard x:Name="LoopCover">
                                        <Storyboard RepeatBehavior="Forever" BeginTime="0:0:0.6">
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="MetamagicCover">
                                                <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0.6"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:1" Value="1"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.6"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiDataTrigger.EnterActions>
                                <MultiDataTrigger.ExitActions>
                                    <StopStoryboard BeginStoryboardName="FadeInFlameEdge"/>
                                    <StopStoryboard BeginStoryboardName="FadeInOutCover"/>
                                    <StopStoryboard BeginStoryboardName="LoopFlameEdge"/>
                                    <StopStoryboard BeginStoryboardName="LoopCover"/>
                                    <StopStoryboard BeginStoryboardName="EnergyFillControl"/>
                                </MultiDataTrigger.ExitActions>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsActive}" Value="True"/>
                                    <Condition Binding="{Binding SlotType}" Value="Spell"/>
                                    <Condition Binding="{Binding MetaMagicEnabled}" Value="True"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Visibility" Value="Visible" TargetName="FadeFlameEdge"/>
                                <Setter Property="Visibility" Value="Visible" TargetName="FadeCover"/>
                                <MultiDataTrigger.EnterActions>
                                    <BeginStoryboard x:Name="FixEdge">
                                        <Storyboard RepeatBehavior="1x">
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="MetamagicFlameEdge">
                                                <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0.9"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:1" Value="1"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.9"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </BeginStoryboard>
                                    <BeginStoryboard x:Name="LoopSpellCover">
                                        <Storyboard RepeatBehavior="Forever">
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="MetamagicCover">
                                                <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0.6"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:1" Value="1"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.6"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiDataTrigger.EnterActions>
                                <MultiDataTrigger.ExitActions>
                                    <StopStoryboard BeginStoryboardName="FixEdge"/>
                                    <StopStoryboard BeginStoryboardName="LoopSpellCover"/>
                                </MultiDataTrigger.ExitActions>
                            </MultiDataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Control.Template>
                <Control.Triggers>
                    <EventTrigger RoutedEvent="FrameworkElement.Unloaded">
                        <StopStoryboard BeginStoryboardName="FadeInFlameEdge"/>
                        <StopStoryboard BeginStoryboardName="FadeInOutCover"/>
                        <StopStoryboard BeginStoryboardName="LoopFlameEdge"/>
                        <StopStoryboard BeginStoryboardName="LoopCover"/>
                        <StopStoryboard BeginStoryboardName="FixEdge"/>
                        <StopStoryboard BeginStoryboardName="LoopSpellCover"/>
                        <StopStoryboard BeginStoryboardName="EnergyFillControl"/>
                    </EventTrigger>
                </Control.Triggers>
            </Control>

            <!-- active states -->
            <Control IsHitTestVisible="False">
                <Control.Style>
                    <Style TargetType="Control">
                        <Setter Property="Template" Value="{StaticResource HotBarActiveSlotIndicator}"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding SlotType}" Value="Passive">
                                <Setter Property="Template" Value="{StaticResource HotBarActiveSlotIndicatorPassive}" />
                            </DataTrigger>

                            <DataTrigger Binding="{Binding Passive.IsMetaMagic}" Value="True">
                                <Setter Property="Template" Value="{StaticResource HotBarActiveSlotIndicatorMetamagic}" />
                            </DataTrigger>

                            <DataTrigger Binding="{Binding MetaMagicEnabled}" Value="True">
                                <Setter Property="Template" Value="{x:Null}" />
                            </DataTrigger>

                        </Style.Triggers>
                    </Style>
                </Control.Style>
            </Control>

        </Grid>

        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding SlotType}" Value="Empty">
                <Setter TargetName="contentContainer" Property="ToolTipService.IsEnabled" Value="False"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <!-- Hotbar slot Representation END -->

    <!-- Locked bottombar locked bar -->
    <ControlTemplate x:Key="LockHotbarButtonLocked" TargetType="ls:LSButton">
        <Grid>
            <Image HorizontalAlignment="Left" x:Name="img" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_lock_2_d.png" Stretch="None"/>
        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="img" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_lock_2_h.png" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!-- Locked bottombar locked END -->

    <!-- Locked bottombar unlocked -->
    <ControlTemplate x:Key="LockHotbarButtonUnlocked" TargetType="ls:LSButton">
        <Image x:Name="img" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_lock_1_d.png" Stretch="None"/>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="img" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_lock_1_h.png" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!-- Locked bottombar unlocked END -->

    <!--Hotbar Representation -->
    <ControlTemplate x:Key="LSHotBar" TargetType="ContentControl">
        <StackPanel x:Name="ParentGrid" Orientation="Horizontal">
            <ls:LSScrollViewer x:Name="SlotHolder" VerticalScrollBarVisibility="Hidden" Height="{Binding ViewPortHeight}" ScrollOffset="{Binding ScrollTo}" ScrollWheelEnabled="False" >
                <ContentPresenter/>
            </ls:LSScrollViewer>
            <StackPanel x:Name="ButtonPanel" Width="28" Margin="5,36,0,0">
                <ls:LSButton Margin="0,0,-8,0" Command="{Binding DataContext.LockHotBarCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding }" ToolTipService.Placement="Top" ToolTipService.VerticalOffset="4">
                    <ls:LSButton.RenderTransform>
                        <ScaleTransform ScaleX="0.75" ScaleY="0.75"/>
                    </ls:LSButton.RenderTransform>
                    <ls:LSButton.ToolTip>
                        <ls:LSTooltip Content="{Binding Source='h6fed2e67g5cc1g4834gaf05ga5c1af5ede0c', Converter={StaticResource TranslatedStringConverter}}"/>
                    </ls:LSButton.ToolTip>
                    <ls:LSButton.Style>
                        <Style TargetType="ls:LSButton">
                            <Setter Property="Template" Value="{StaticResource LockHotbarButtonUnlocked}"/>
                            <Setter Property="SoundID" Value="UI_HUD_Hotbar_Unlocked"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding HotBarUnLocked}" Value="False">
                                    <Setter Property="Template" Value="{StaticResource LockHotbarButtonLocked}"/>
                                    <Setter Property="SoundID" Value="UI_HUD_Hotbar_Locked"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </ls:LSButton.Style>
                </ls:LSButton>

                <Label x:Name="PageNumber" Content="{Binding CurrentIndex}" VerticalContentAlignment="Center" HorizontalContentAlignment="Center" FontSize="{DynamicResource SmallFontSize}" Foreground="{StaticResource LS_tint100}" Margin="0,0,0,0"/>
                <ls:LSButton x:Name="UpButton" Template="{DynamicResource UpButton}" IsEnabled="{Binding CanGoToPrevPage}" Command="{Binding DownCommand}" SoundID="UI_HUD_Hotbar_PrevPage" Margin="-2,0,0,-8"/>
                <ls:LSButton x:Name="DownButton" Template="{DynamicResource DownButton}" IsEnabled="{Binding CanGoToNextPage}" Command="{Binding UpCommand}" SoundID="UI_HUD_Hotbar_NextPage" Margin="-2,0,0,0"/>
                <StackPanel.Style>
                    <Style TargetType="StackPanel">
                        <Setter Property="Visibility" Value="Visible"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding NumberOfBars}" Value="1">
                                <Setter Property="Visibility" Value="Collapsed"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </StackPanel.Style>
            </StackPanel>
        </StackPanel>
        <ControlTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding CanGoToPrevPage}" Value="False"/>
                    <Condition Binding="{Binding CanGoToNextPage}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="UpButton" Property="Visibility" Value="Hidden"/>
                <Setter TargetName="DownButton" Property="Visibility" Value="Hidden"/>
                <Setter TargetName="PageNumber" Property="Visibility" Value="Hidden"/>
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--HotBar END -->

    <Style x:Key="CombatLog.Entry.ParamRun" TargetType="ls:LSRun">
        <Style.Triggers>
            <!-- Enemy character (MISSING COLOR CODE) -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Type}" Value="Character" />
                    <Condition Binding="{Binding RelationType}" Value="Enemy" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="Red" />
            </MultiDataTrigger>
            <!-- Ally character (MISSING COLOR CODE) -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Type}" Value="Character" />
                    <Condition Binding="{Binding RelationType}" Value="Ally" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="MediumAquamarine" />
            </MultiDataTrigger>
            <!-- Damage type: None -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Type}" Value="Damage" />
                    <Condition Binding="{Binding DamageType}" Value="None" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="#aaaaaa" />
            </MultiDataTrigger>
            <!-- Damage type: Slashing -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Type}" Value="Damage" />
                    <Condition Binding="{Binding DamageType}" Value="Slashing" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="#aaaaaa" />
            </MultiDataTrigger>
            <!-- Damage type: Piercing -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Type}" Value="Damage" />
                    <Condition Binding="{Binding DamageType}" Value="Piercing" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="#aaaaaa" />
            </MultiDataTrigger>
            <!-- Damage type: Bludgeoning -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Type}" Value="Damage" />
                    <Condition Binding="{Binding DamageType}" Value="Bludgeoning" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="#aaaaaa" />
            </MultiDataTrigger>
            <!-- Damage type: Force -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Type}" Value="Damage" />
                    <Condition Binding="{Binding DamageType}" Value="Force" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="#dc1c24" />
            </MultiDataTrigger>
            <!-- Damage type: Psychic -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Type}" Value="Damage" />
                    <Condition Binding="{Binding DamageType}" Value="Psychic" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="#efacdf" />
            </MultiDataTrigger>
            <!-- Damage type: Thunder -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Type}" Value="Damage" />
                    <Condition Binding="{Binding DamageType}" Value="Thunder" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="#7e46ae" />
            </MultiDataTrigger>
            <!-- Damage type: Lightning -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Type}" Value="Damage" />
                    <Condition Binding="{Binding DamageType}" Value="Lightning" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="#877eff" />
            </MultiDataTrigger>
            <!-- Damage type: Cold -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Type}" Value="Damage" />
                    <Condition Binding="{Binding DamageType}" Value="Cold" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="#4197e2" />
            </MultiDataTrigger>
            <!-- Damage type: Necrotic -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Type}" Value="Damage" />
                    <Condition Binding="{Binding DamageType}" Value="Necrotic" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="#a5f280" />
            </MultiDataTrigger>
            <!-- Damage type: Poison -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Type}" Value="Damage" />
                    <Condition Binding="{Binding DamageType}" Value="Poison" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="#c8f000" />
            </MultiDataTrigger>
            <!-- Damage type: Acid -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Type}" Value="Damage" />
                    <Condition Binding="{Binding DamageType}" Value="Acid" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="#f7ff09" />
            </MultiDataTrigger>
            <!-- Damage type: Radiant -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Type}" Value="Damage" />
                    <Condition Binding="{Binding DamageType}" Value="Radiant" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="#ffc000" />
            </MultiDataTrigger>
            <!-- Damage type: Fire -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Type}" Value="Damage" />
                    <Condition Binding="{Binding DamageType}" Value="Fire" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="#ff6600" />
            </MultiDataTrigger>
            <!-- Spell (MISSING COLOR CODE) -->
            <DataTrigger Binding="{Binding Type}" Value="Spell">
                <Setter Property="Foreground" Value="Green" />
            </DataTrigger>
            <!-- Experience (MISSING COLOR CODE) -->
            <DataTrigger Binding="{Binding Type}" Value="Experience">
                <Setter Property="Foreground" Value="{DynamicResource LS_ExperienceTextColor}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="ExperienceOverflow">
                <Setter Property="Foreground" Value="{DynamicResource LS_ExperienceOverflowTextColor}" />
            </DataTrigger>
            <!-- Status (MISSING COLOR CODE) -->
            <DataTrigger Binding="{Binding Type}" Value="Status">
                <Setter Property="Foreground" Value="GreenYellow" />
            </DataTrigger>
            <!-- Surface (MISSING COLOR CODE) -->
            <DataTrigger Binding="{Binding Type}" Value="Surface">
                <Setter Property="ToolTip">
                    <Setter.Value>
                        <ls:LSTooltip IsHitTestVisible="False" Template="{StaticResource BaseSurfaceTooltipTemplate}" ContentTemplate="{StaticResource SurfaceTooltipContentTemplate}"
                                      Content="{Binding SurfaceInformation}" Placement="Top" VerticalOffset="-6" HorizontalOffset="-14"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TextBlock}}}" Value="True">
                <Setter Property="TextDecorations" Value="Underline" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding TooltipEntries.Count}" Value="0" />
                    <Condition Binding="{Binding ManagedTooltip}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="TextDecorations" Value="None" />
            </MultiDataTrigger>

        </Style.Triggers>
    </Style>

    <Style x:Key="TargetNotification.Entry.ParamRun" TargetType="ls:LSRun" BasedOn="{StaticResource CombatLog.Entry.ParamRun}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Type}" Value="Spell">
                <Setter Property="Foreground" Value="Gold" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!--Inactive Dialogue.InactivePortrait Representation -->
    <DataTemplate x:Key="Dialogue.InactivePortrait">
        <ContentControl>
            <i:Interaction.Behaviors>
                <ls:DropOnCharacterBehavior TargetCharacter="{Binding}"/>
            </i:Interaction.Behaviors>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="MouseLeftButtonDown">
                    <i:InvokeCommandAction Command="{Binding DataContext.SelectCharacter,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}" />
                </i:EventTrigger>
            </i:Interaction.Triggers>

            <Canvas Style="{DynamicResource Dialogue.MiniPortrait.Canvas}" Opacity="0.55">
                <!-- character image -->
                <Border Style="{DynamicResource Dialogue.MiniPortrait.Canvas.Border}">
                    <ls:LSEntityObject Margin="0" EntityRef="{Binding EntityHandle}" Background="{Binding Icon}"/>
                </Border>
                <!-- border-->
                <Image>
                    <Image.Style>
                        <Style TargetType="Image">
                            <Setter Property="Width" Value="120"/>
                            <Setter Property="Height" Value="188"/>
                            <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_inactive_d.png" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding CharacterType}" Value="Avatar">
                                    <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_active_d.png" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Image.Style>
                </Image>

                <!-- health -->
                <Border Style="{DynamicResource Dialogue.MiniPortrait.Canvas.Health}">
                    <ProgressBar Value="{Binding Stats.Health.PercentValue, Mode=OneWay}" Maximum="1" Minimum="0" Background="Black" Foreground="{StaticResource LS_HealthBarForegound}" BorderBrush="{x:Null}"/>
                </Border>
            </Canvas>
        </ContentControl>
    </DataTemplate>
    <!--Inactive Dialogue.InactivePortrait Representation -->

    <!--Inactive Dialogue.ActivePortrait Representation -->
    <DataTemplate x:Key="Dialogue.ActivePortrait">
        <ContentControl>
            <i:Interaction.Behaviors>
                <ls:DropOnCharacterBehavior TargetCharacter="{Binding}"/>
            </i:Interaction.Behaviors>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="MouseLeftButtonDown">
                    <i:InvokeCommandAction Command="{Binding DataContext.SelectCharacter,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}" />
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseDoubleClick" >
                    <i:InvokeCommandAction Command="{Binding DataContext.SetCameraOnGameObject,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}" />
                </i:EventTrigger>
            </i:Interaction.Triggers>

            <Canvas Style="{DynamicResource Dialogue.MiniPortrait.Canvas}">
                <!-- character image -->
                <Border Style="{DynamicResource Dialogue.MiniPortrait.Canvas.Border}">
                    <ls:LSEntityObject Margin="0" EntityRef="{Binding EntityHandle}" Background="{Binding Icon}"/>
                </Border>

                <!-- border-->
                <Image>
                    <Image.Style>
                        <Style TargetType="Image">
                            <Setter Property="Width" Value="120"/>
                            <Setter Property="Height" Value="188"/>
                            <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_inactive_h.png" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding CharacterType}" Value="Avatar">
                                    <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_active_h.png" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Image.Style>
                </Image>
                <!-- health -->
                <Border Style="{DynamicResource Dialogue.MiniPortrait.Canvas.Health}">
                    <ProgressBar Value="{Binding Stats.Health.PercentValue, Mode=OneWay}" Maximum="1" Minimum="0" Background="Black" Foreground="{StaticResource LS_HealthBarForegound}" BorderBrush="{x:Null}"/>
                </Border>
            </Canvas>
        </ContentControl>
    </DataTemplate>
    <!--Inactive Dialogue.ActivePortrait Representation -->

    <!--MiniPlayerPortraits Representation -->
    <Style x:Key="Dialogue.PlayerPortraits" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource {x:Type ListBoxItem}}">
        <Setter Property="ContentTemplate" Value="{StaticResource Dialogue.InactivePortrait}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="VerticalContentAlignment" Value="Bottom"/>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="ContentTemplate" Value="{StaticResource Dialogue.ActivePortrait}" />
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="Background" Value="Transparent" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="Background" Value="Transparent" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--MiniPlayerPortraits END -->

    <!--Speaker selection BEGIN -->

    <!--Inactive Dialogue.InactivePortrait Representation -->
    <DataTemplate x:Key="Dialogue.InactiveSpeaker">
        <ContentControl>
            <i:Interaction.Behaviors>
                <ls:DropOnCharacterBehavior TargetCharacter="{Binding}"/>
            </i:Interaction.Behaviors>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="MouseLeftButtonDown">
                    <i:InvokeCommandAction Command="{Binding DataContext.SelectSpeaker,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}" />
                </i:EventTrigger>
            </i:Interaction.Triggers>

            <Canvas Style="{DynamicResource Dialogue.MiniPortrait.Canvas}" Opacity="0.55">

                <!-- character image -->
                <Border Style="{DynamicResource Dialogue.MiniPortrait.Canvas.Border}">
                    <ls:LSEntityObject Margin="0" EntityRef="{Binding EntityHandle}" Background="{Binding Icon}"/>
                </Border>

                <!-- border-->
                <Image>
                    <Image.Style>
                        <Style TargetType="Image">
                            <Setter Property="Width" Value="120"/>
                            <Setter Property="Height" Value="188"/>
                            <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_inactive_h.png" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding CharacterType}" Value="Avatar">
                                    <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_active_h.png" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Image.Style>
                </Image>

                <!-- health -->
                <Border Style="{DynamicResource Dialogue.MiniPortrait.Canvas.Health}">
                    <ProgressBar Value="{Binding Stats.Health.PercentValue, Mode=OneWay}" Maximum="1" Minimum="0" Background="Black" Foreground="{StaticResource LS_HealthBarForegound}" BorderBrush="{x:Null}"/>
                </Border>
            </Canvas>
        </ContentControl>
    </DataTemplate>
    <!--Inactive Dialogue.InactivePortrait Representation -->

    <!--Speaker selection Representation -->
    <Style x:Key="Dialogue.SpeakerPortraits" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource {x:Type ListBoxItem}}">
        <Setter Property="ContentTemplate" Value="{StaticResource Dialogue.InactiveSpeaker}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="VerticalContentAlignment" Value="Bottom"/>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="ContentTemplate" Value="{StaticResource Dialogue.ActivePortrait}" />
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="Background" Value="Transparent" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="Background" Value="Transparent" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--Speaker selection END -->

    <!-- Action resource UI -->
    <DataTemplate x:Key="ActionResources.ActionGroup.ActionPoint">
        <Grid>
            <Image x:Name="image" Stretch="None" Source="{DynamicResource Highlight}">
                <Image.RenderTransform>
                    <TransformGroup>
                        <SkewTransform/>
                        <ScaleTransform CenterX="12" CenterY="12"/>
                        <RotateTransform/>
                        <TranslateTransform/>
                    </TransformGroup>
                </Image.RenderTransform>
            </Image>
            <Image x:Name="imageExplosion" Stretch="None" Source="{DynamicResource Highlight}" Opacity="0">
                <Image.RenderTransform>
                    <TransformGroup>
                        <SkewTransform/>
                        <ScaleTransform CenterX="12" CenterY="12"/>
                        <RotateTransform/>
                        <TranslateTransform/>
                    </TransformGroup>
                </Image.RenderTransform>
            </Image>
        </Grid>

        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=ActionPointState, RelativeSource={RelativeSource AncestorType=ls:LSActionPoint}}" Value="Available">
                <Setter TargetName="image" Property="Source" Value="{DynamicResource Available}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=ActionPointState, RelativeSource={RelativeSource AncestorType=ls:LSActionPoint}}" Value="Highlight">
                <Setter TargetName="image" Property="Source" Value="{DynamicResource Highlight}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=ActionPointState, RelativeSource={RelativeSource AncestorType=ls:LSActionPoint}}" Value="Used">
                <Setter TargetName="image" Property="Source" Value="{DynamicResource Used}"/>
                <DataTrigger.EnterActions>
                    <BeginStoryboard x:Name="explodeAnim">
                        <Storyboard RepeatBehavior="1x">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="imageExplosion" Storyboard.TargetProperty="(Image.RenderTransform).(TransformGroup.Children)[1].(ScaleTransform.ScaleX)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="2.5"/>
                                <DiscreteDoubleKeyFrame Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="imageExplosion" Storyboard.TargetProperty="(Image.RenderTransform).(TransformGroup.Children)[1].(ScaleTransform.ScaleY)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="2.5"/>
                                <DiscreteDoubleKeyFrame Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="imageExplosion" Storyboard.TargetProperty="(Image.Opacity)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=ActionPointState, RelativeSource={RelativeSource AncestorType=ls:LSActionPoint}}" Value="Highlight"/>
                    <Condition Binding="{Binding Path=DataContext.PreviewState, RelativeSource={RelativeSource AncestorType={x:Type ls:LSActionPointResources}}}" Value="Hover"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard x:Name="previewAnim">
                        <Storyboard RepeatBehavior="Forever">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Image.Opacity)" Storyboard.TargetName="image">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.7" Value="0.5">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CubicEase EasingMode="EaseInOut"/>
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:1.5" Value="1">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CubicEase EasingMode="EaseInOut"/>
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </MultiDataTrigger.EnterActions>
                <MultiDataTrigger.ExitActions>
                    <StopStoryboard BeginStoryboardName="previewAnim"/>
                </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>

            <DataTrigger Binding="{Binding Path=DataContext.PreviewState, RelativeSource={RelativeSource AncestorType={x:Type ls:LSActionPointResources}}}" Value="Inactive">
                <Setter Property="Opacity" Value="0.5"/>
            </DataTrigger>

        </DataTemplate.Triggers>
    </DataTemplate>

    <ControlTemplate x:Key="ActionResources.ActionGroup.FallbackActionPointGroup">
        <ControlTemplate.Resources>
            <ImageSource x:Key="Highlight">/GustavNoesisGUI;component/Assets/Shared/ico_red_star.png</ImageSource>
            <ImageSource x:Key="Available">/GustavNoesisGUI;component/Assets/Shared/ico_red_star.png</ImageSource>
            <ImageSource x:Key="Used">/GustavNoesisGUI;component/Assets/Shared/ico_red_star.png</ImageSource>
        </ControlTemplate.Resources>
        <ContentControl ContentTemplate="{StaticResource ActionResources.ActionGroup.ActionPoint}"/>
    </ControlTemplate>

    <ControlTemplate x:Key="ActionResources.ActionGroup.DefaultActionPointGroup">
        <ControlTemplate.Resources>
            <ImageSource x:Key="Highlight">/GustavNoesisGUI;component/Assets/Shared/Resources/ap_active.png</ImageSource>
            <ImageSource x:Key="Available">/GustavNoesisGUI;component/Assets/Shared/Resources/ap_d.png</ImageSource>
            <ImageSource x:Key="Used">/GustavNoesisGUI;component/Assets/Shared/Resources/ap_used.png</ImageSource>
        </ControlTemplate.Resources>
        <ContentControl ContentTemplate="{StaticResource ActionResources.ActionGroup.ActionPoint}"/>
    </ControlTemplate>

    <ControlTemplate x:Key="ActionResources.ActionGroup.BonusActionPointGroup">
        <ControlTemplate.Resources>
            <ImageSource x:Key="Highlight">/GustavNoesisGUI;component/Assets/Shared/Resources/bap_active.png</ImageSource>
            <ImageSource x:Key="Available">/GustavNoesisGUI;component/Assets/Shared/Resources/bap_d.png</ImageSource>
            <ImageSource x:Key="Used">/GustavNoesisGUI;component/Assets/Shared/Resources/bap_used.png</ImageSource>
        </ControlTemplate.Resources>
        <ContentControl ContentTemplate="{StaticResource ActionResources.ActionGroup.ActionPoint}"/>
    </ControlTemplate>

    <ControlTemplate x:Key="ActionResources.ActionGroup.ReactionActionPointGroup">
        <ControlTemplate.Resources>
            <ImageSource x:Key="Highlight">/GustavNoesisGUI;component/Assets/Shared/Resources/rp_active.png</ImageSource>
            <ImageSource x:Key="Available">/GustavNoesisGUI;component/Assets/Shared/Resources/rp_d.png</ImageSource>
            <ImageSource x:Key="Used">/GustavNoesisGUI;component/Assets/Shared/Resources/rp_used.png</ImageSource>
        </ControlTemplate.Resources>
        <ContentControl ContentTemplate="{StaticResource ActionResources.ActionGroup.ActionPoint}"/>
    </ControlTemplate>

    <ControlTemplate x:Key="ActionResources.ActionGroup.SorceryPointGroup" TargetType="ls:LSActionPoint">
        <ControlTemplate.Resources>
            <ImageSource x:Key="Highlight">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_sorc_h.png</ImageSource>
            <ImageSource x:Key="Available">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_sorc_d.png</ImageSource>
            <ImageSource x:Key="Used">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_sorc_spent.png</ImageSource>
        </ControlTemplate.Resources>
        <ContentControl ContentTemplate="{StaticResource ActionResources.ActionGroup.ActionPoint}"/>
    </ControlTemplate>

    <ControlTemplate x:Key="ActionResources.ActionGroup.KiActionGroup" TargetType="ls:LSActionPoint">
        <ControlTemplate.Resources>
            <ImageSource x:Key="Highlight">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_ki_h.png</ImageSource>
            <ImageSource x:Key="Available">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_ki.png</ImageSource>
            <ImageSource x:Key="Used">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_ki_spent.png</ImageSource>
        </ControlTemplate.Resources>
        <ContentControl ContentTemplate="{StaticResource ActionResources.ActionGroup.ActionPoint}"/>
    </ControlTemplate>

    <ControlTemplate x:Key="ActionResources.ActionGroup.RageActionGroup" TargetType="ls:LSActionPoint">
        <ControlTemplate.Resources>
            <ImageSource x:Key="Highlight">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_rage_h.png</ImageSource>
            <ImageSource x:Key="Available">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_rage.png</ImageSource>
            <ImageSource x:Key="Used">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_rage_spent.png</ImageSource>
        </ControlTemplate.Resources>
        <ContentControl ContentTemplate="{StaticResource ActionResources.ActionGroup.ActionPoint}"/>
    </ControlTemplate>

    <ControlTemplate x:Key="ActionResources.ActionGroup.DivinityActionGroup" TargetType="ls:LSActionPoint">
        <ControlTemplate.Resources>
            <ImageSource x:Key="Highlight">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_channelDivinity_h.png</ImageSource>
            <ImageSource x:Key="Available">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_channelDivinity_d.png</ImageSource>
            <ImageSource x:Key="Used">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_channelDivinity_spent.png</ImageSource>
        </ControlTemplate.Resources>
        <ContentControl ContentTemplate="{StaticResource ActionResources.ActionGroup.ActionPoint}"/>
    </ControlTemplate>

    <ControlTemplate x:Key="ActionResources.ActionGroup.SuperiorityDieActionGroup" TargetType="ls:LSActionPoint">
        <ControlTemplate.Resources>
            <ImageSource x:Key="Highlight">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_res_superiorityDice_h.png</ImageSource>
            <ImageSource x:Key="Available">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_res_superiorityDice_d.png</ImageSource>
            <ImageSource x:Key="Used">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_res_superiorityDice_spent.png</ImageSource>
        </ControlTemplate.Resources>
        <ContentControl ContentTemplate="{StaticResource ActionResources.ActionGroup.ActionPoint}"/>
    </ControlTemplate>

    <ControlTemplate x:Key="ActionResources.ActionGroup.ArcaneRecoveryActionGroup" TargetType="ls:LSActionPoint">
        <ControlTemplate.Resources>
            <ImageSource x:Key="Highlight">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_arcaneRecovery_h.png</ImageSource>
            <ImageSource x:Key="Available">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_arcaneRecovery_d.png</ImageSource>
            <ImageSource x:Key="Used">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_arcaneRecovery_spent.png</ImageSource>
        </ControlTemplate.Resources>
        <ContentControl ContentTemplate="{StaticResource ActionResources.ActionGroup.ActionPoint}"/>
    </ControlTemplate>

    <ControlTemplate x:Key="ActionResources.ActionGroup.InspirationActionGroup" TargetType="ls:LSActionPoint">
        <ControlTemplate.Resources>
            <ImageSource x:Key="Highlight">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_inspiration_h.png</ImageSource>
            <ImageSource x:Key="Available">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_inspiration.png</ImageSource>
            <ImageSource x:Key="Used">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_inspiration_spent.png</ImageSource>
        </ControlTemplate.Resources>
        <ContentControl ContentTemplate="{StaticResource ActionResources.ActionGroup.ActionPoint}"/>
    </ControlTemplate>

    <ControlTemplate x:Key="ActionResources.ActionGroup.SpellSlot" TargetType="ls:LSActionPoint">
        <ControlTemplate.Resources>
            <ImageSource x:Key="Highlight">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_mini_spellSlot_h.png</ImageSource>
            <ImageSource x:Key="Available">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_mini_spellSlot.png</ImageSource>
            <ImageSource x:Key="Used">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_mini_spellSlot_spent.png</ImageSource>
        </ControlTemplate.Resources>
        <ContentControl ContentTemplate="{StaticResource ActionResources.ActionGroup.ActionPoint}"/>
    </ControlTemplate>

    <ControlTemplate x:Key="ActionResources.ActionGroup.WarlockSpellSlot" TargetType="ls:LSActionPoint">
        <ControlTemplate.Resources>
            <ImageSource x:Key="Highlight">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_mini_spellSlot_warlock_h.png</ImageSource>
            <ImageSource x:Key="Available">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_mini_spellSlot_warlock.png</ImageSource>
            <ImageSource x:Key="Used">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_mini_spellSlot_warlock_spent.png</ImageSource>
        </ControlTemplate.Resources>
        <ContentControl ContentTemplate="{StaticResource ActionResources.ActionGroup.ActionPoint}"/>
    </ControlTemplate>

    <ControlTemplate x:Key="ActionResources.ActionGroup.RitualPointActionGroup" TargetType="ls:LSActionPoint">
        <ControlTemplate.Resources>
            <ImageSource x:Key="Highlight">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_rituals_h.png</ImageSource>
            <ImageSource x:Key="Available">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_rituals_d.png</ImageSource>
            <ImageSource x:Key="Used">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_rituals_spent.png</ImageSource>
        </ControlTemplate.Resources>
        <ContentControl ContentTemplate="{StaticResource ActionResources.ActionGroup.ActionPoint}"/>
    </ControlTemplate>

    <ControlTemplate x:Key="ActionResources.ActionGroup.NaturalRecoveryPointActionGroup" TargetType="ls:LSActionPoint">
        <ControlTemplate.Resources>
            <ImageSource x:Key="Highlight">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_NaturalRecovery_h.png</ImageSource>
            <ImageSource x:Key="Available">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_NaturalRecovery.png</ImageSource>
            <ImageSource x:Key="Used">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_NaturalRecovery_spent.png</ImageSource>
        </ControlTemplate.Resources>
        <ContentControl ContentTemplate="{StaticResource ActionResources.ActionGroup.ActionPoint}"/>
    </ControlTemplate>

    <ControlTemplate x:Key="ActionResources.ActionGroup.WildShapeActionGroup" TargetType="ls:LSActionPoint">
        <ControlTemplate.Resources>
            <ImageSource x:Key="Highlight">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_wildshape_h.png</ImageSource>
            <ImageSource x:Key="Available">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_wildshape.png</ImageSource>
            <ImageSource x:Key="Used">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_wildshape_spent.png</ImageSource>
        </ControlTemplate.Resources>
        <ContentControl ContentTemplate="{StaticResource ActionResources.ActionGroup.ActionPoint}"/>
    </ControlTemplate>

    <ControlTemplate x:Key="ActionResources.ActionGroup.TidesOfChaosActionGroup" TargetType="ls:LSActionPoint">
        <ControlTemplate.Resources>
            <ImageSource x:Key="Highlight">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_tidesOfChaos_h.png</ImageSource>
            <ImageSource x:Key="Available">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_tidesOfChaos_d.png</ImageSource>
            <ImageSource x:Key="Used">/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_tidesOfChaos_spent.png</ImageSource>
        </ControlTemplate.Resources>
        <ContentControl ContentTemplate="{StaticResource ActionResources.ActionGroup.ActionPoint}"/>
    </ControlTemplate>

    <Style x:Key="ActionResourcesTemplateSelector" TargetType="ls:LSActionPointResources">
        <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.FallbackActionPointGroup}"/>
        <Setter Property="MaxGroupActionPoints" Value="4"/>
        <Setter Property="ActionPointSize" Value="44" />
        <Setter Property="LabelForeground" Value="{DynamicResource ActionResource.Default}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="SorceryPoint">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.SorceryPointGroup}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="48" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ActionResource.TypeId}" Value="SorceryPoint"/>
                    <Condition Binding="{Binding ActionResource.Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-15,0,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="KiPoint">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.KiActionGroup}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="48" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ActionResource.TypeId}" Value="KiPoint"/>
                    <Condition Binding="{Binding ActionResource.Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-15,0,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="Rage">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.RageActionGroup}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="48" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ActionResource.TypeId}" Value="Rage"/>
                    <Condition Binding="{Binding ActionResource.Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-15,0,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="BardicInspiration">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.InspirationActionGroup}"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ActionResource.TypeId}" Value="BardicInspiration"/>
                    <Condition Binding="{Binding ActionResource.Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-15,0,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="ChannelDivinity">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.DivinityActionGroup}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="48" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ActionResource.TypeId}" Value="ChannelDivinity"/>
                    <Condition Binding="{Binding ActionResource.Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-15,0,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="SuperiorityDie">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.SuperiorityDieActionGroup}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="48" />
                <Setter Property="LabelForeground" Value="{DynamicResource ActionResource.SuperiorityDie}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ActionResource.TypeId}" Value="SuperiorityDie"/>
                    <Condition Binding="{Binding ActionResource.Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-15,0,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="ArcaneRecoveryPoint">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.ArcaneRecoveryActionGroup}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="48" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ActionResource.TypeId}" Value="ArcaneRecoveryPoint"/>
                    <Condition Binding="{Binding ActionResource.Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-15,0,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="ActionPoint">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.DefaultActionPointGroup}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="BonusActionPoint">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.BonusActionPointGroup}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="ReactionActionPoint">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.ReactionActionPointGroup}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="SpellSlot">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.SpellSlot}"/>
                <Setter Property="Margin" Value="0,-5,7,0"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ActionResource.TypeId}" Value="SpellSlot"/>
                    <Condition Binding="{Binding ActionResource.Value}" Value="1"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,0,0,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="WarlockSpellSlot">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.WarlockSpellSlot}"/>
                <Setter Property="Margin" Value="0,-5,7,0"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ActionResource.TypeId}" Value="WarlockSpellSlot"/>
                    <Condition Binding="{Binding ActionResource.Value}" Value="1"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,0,0,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="RitualPoint">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.RitualPointActionGroup}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="48" />
                <Setter Property="LabelForeground" Value="{DynamicResource ActionResource.RitualPoint}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ActionResource.TypeId}" Value="RitualPoint"/>
                    <Condition Binding="{Binding ActionResource.Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-15,0,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="NaturalRecoveryPoint">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.NaturalRecoveryPointActionGroup}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="48" />
                <Setter Property="LabelForeground" Value="{DynamicResource ActionResource.NaturalRecovery}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ActionResource.TypeId}" Value="NaturalRecoveryPoint"/>
                    <Condition Binding="{Binding ActionResource.Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-18,0,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="WildShape">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.WildShapeActionGroup}"/>
                <Setter Property="MaxGroupActionPoints" Value="1"/>
                <Setter Property="ActionPointSize" Value="48" />
                <Setter Property="LabelForeground" Value="{DynamicResource ActionResource.WildShape}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ActionResource.TypeId}" Value="WildShape"/>
                    <Condition Binding="{Binding ActionResource.Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin" Value="0,-18,0,0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="TidesOfChaos">
                <Setter Property="ActionPointTemplate" Value="{StaticResource ActionResources.ActionGroup.TidesOfChaosActionGroup}"/>
                <Setter Property="ActionPointSize" Value="48" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <DataTemplate x:Key="ActionResources.Item">
        <DataTemplate.Resources>
            <ImageSource x:Key="BackgroundImg">/GustavNoesisGUI;component/Assets/BottomBar/resource_general_bg.png</ImageSource>
        </DataTemplate.Resources>
        <Grid x:Name="content" Panel.ZIndex="1">
            <Image x:Name="resBg" Source="{DynamicResource BackgroundImg}" Stretch="None"/>
            <Border Width="56" Height="56">
                <Border x:Name="highlightContainer" BorderThickness="2" BorderBrush="Transparent" ToolTipService.IsEnabled="True" ToolTipService.Placement="Top" ToolTip="{StaticResource ManagedTooltip}" DataContext="{Binding}">
                    <ls:LSActionPointResources x:Name="ResourcePoints" VerticalAlignment="Center" HorizontalAlignment="Center" Background="Transparent"
                                               MaxActionPoints="{Binding ActionResource.MaxValue}"
                                               AvailableActionPoints="{Binding ActionResource.Value}"
                                               HighlightedActionPoints="{Binding Cost}"
                                               MaxActionPointGroups="0"
                                               ActionPointSize="48"
                                               SmallActionPointSize="25"
                                               ActionPointGroupSize="56"
                                               Style="{StaticResource ActionResourcesTemplateSelector}"/>
                </Border>
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MouseEnter">
                        <i:InvokeCommandAction Command="{Binding DataContext.SetHoveredResourceCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}" />
                        <i:InvokeCommandAction Command="{Binding DataContext.PlaySoundEvent, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="UI_HUD_Shared_Over"/>
                    </i:EventTrigger>
                    <i:EventTrigger EventName="MouseLeave">
                        <i:InvokeCommandAction Command="{Binding DataContext.SetHoveredResourceCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </Border>
            <Image VerticalAlignment="Bottom" x:Name="SpellSlotLevels" Stretch="None" Visibility="Hidden" DataContext="{Binding ActionResource}">
                <Image.Style>
                    <Style TargetType="Image" BasedOn="{StaticResource RomanNumeralLevelImage}">
                        <Setter Property="Margin" Value="0,0,0,-4"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding DataContext.Data.UIMode, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Controller">
                                <Setter Property="Margin" Value="0,0,0,-20"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Image.Style>
            </Image>
        </Grid>

        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding ActionResource.MaxValue}" Value="0">
                <Setter Property="Visibility" Value="Collapsed" TargetName="content"/>
            </DataTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="#54ffffff" TargetName="highlightContainer"/>
                <Setter Property="Background" Value="#2affffff" TargetName="highlightContainer"/>
            </Trigger>

            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="SpellSlot">
                <Setter TargetName="SpellSlotLevels" Property="Visibility" Value="Visible"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="WarlockSpellSlot">
                <Setter TargetName="SpellSlotLevels" Property="Visibility" Value="Visible"/>
            </DataTrigger>

        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="ActionResources.TopItem">
        <DataTemplate.Resources>
            <ImageSource x:Key="BackgroundImg">/GustavNoesisGUI;component/Assets/BottomBar/status_bg.png</ImageSource>
        </DataTemplate.Resources>
        <Grid x:Name="content" Panel.ZIndex="1">
            <Ellipse x:Name="romanBg" Width="40" Height="40" VerticalAlignment="Top" Fill="Black" Margin="0,-2,0,0" Visibility="Collapsed"/>
            <Image Source="{DynamicResource BackgroundImg}" Stretch="None"/>
            <Border Width="56" Height="56">
                <Border Margin="0,-2,-2,0" x:Name="highlightContainer" BorderThickness="1" BorderBrush="Transparent" ToolTipService.IsEnabled="True" ToolTipService.Placement="Top" ToolTip="{StaticResource ManagedTooltip}" DataContext="{Binding}">
                    <Grid>
                        <ls:LSActionPointResources x:Name="ResourcePoints" VerticalAlignment="Center" HorizontalAlignment="Center" Background="Transparent"
                                                   MaxActionPoints="{Binding ActionResource.MaxValue}"
                                                   AvailableActionPoints="{Binding ActionResource.Value}"
                                                   HighlightedActionPoints="{Binding Cost}"
                                                   MaxActionPointGroups="0"
                                                   SmallActionPointSize="24"
                                                   ActionPointGroupSize="56"
                                                   Style="{StaticResource ActionResourcesTemplateSelector}"/>

                        <TextBlock x:Name="ResourcesNumeralDisplay" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,25,0,0"
                                   Foreground="{Binding LabelForeground, ElementName=ResourcePoints}"
                                   FontSize="{DynamicResource MediumFontSize}" Text="{Binding ActionResource.Value}"
                                   noesis:Text.Stroke="{StaticResource LS_PrimaryColorOutlineColor}" noesis:Text.StrokeThickness="4">
                            <i:Interaction.Triggers>
                                <ei:PropertyChangedTrigger Binding="{Binding Path=ActionResource.Value}">
                                    <i:Interaction.Behaviors>
                                        <ei:ConditionBehavior>
                                            <ei:ConditionalExpression>
                                                <ei:ComparisonCondition LeftOperand="{Binding ActionResource.MaxValue}" Operator="GreaterThan" RightOperand="{Binding MaxGroupActionPoints, ElementName=ResourcePoints}"/>
                                                <ei:ComparisonCondition LeftOperand="{Binding ActionResource.Value}" Operator="GreaterThan" RightOperand="1"/>
                                            </ei:ConditionalExpression>
                                        </ei:ConditionBehavior>
                                    </i:Interaction.Behaviors>
                                    <ei:ChangePropertyAction PropertyName="Visibility" Value="Visible"/>
                                </ei:PropertyChangedTrigger>
                                
                                <ei:PropertyChangedTrigger Binding="{Binding Path=ActionResource.Value}">
                                    <i:Interaction.Behaviors>
                                        <ei:ConditionBehavior>
                                            <ei:ConditionalExpression>
                                                <ei:ComparisonCondition LeftOperand="{Binding ActionResource.Value}" Operator="LessThanOrEqual" RightOperand="1"/>
                                            </ei:ConditionalExpression>
                                        </ei:ConditionBehavior>
                                    </i:Interaction.Behaviors>
                                    <ei:ChangePropertyAction PropertyName="Visibility" Value="Collapsed"/>
                                </ei:PropertyChangedTrigger>
                                <ei:PropertyChangedTrigger Binding="{Binding Path=ActionResource.Value}">
                                    <i:Interaction.Behaviors>
                                        <ei:ConditionBehavior>
                                            <ei:ConditionalExpression>
                                                <ei:ComparisonCondition LeftOperand="{Binding ActionResource.MaxValue}" Operator="LessThanOrEqual" RightOperand="{Binding MaxGroupActionPoints, ElementName=ResourcePoints}"/>
                                            </ei:ConditionalExpression>
                                        </ei:ConditionBehavior>
                                    </i:Interaction.Behaviors>
                                    <ei:ChangePropertyAction PropertyName="Visibility" Value="Collapsed"/>
                                </ei:PropertyChangedTrigger>
                            </i:Interaction.Triggers>
                        </TextBlock>
                    </Grid>
                </Border>
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MouseEnter">
                        <i:InvokeCommandAction Command="{Binding DataContext.SetHoveredResourceCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}" />
                        <i:InvokeCommandAction Command="{Binding DataContext.PlaySoundEvent, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="UI_HUD_Shared_Over"/>
                    </i:EventTrigger>
                    <i:EventTrigger EventName="MouseLeave">
                        <i:InvokeCommandAction Command="{Binding DataContext.SetHoveredResourceCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </Border>
            <Image VerticalAlignment="Top" x:Name="SpellSlotLevels" Stretch="None" Visibility="Hidden" DataContext="{Binding ActionResource}">
                <Image.Style>
                    <Style TargetType="Image" BasedOn="{StaticResource RomanNumeralLevelImage}">
                        <Setter Property="Margin" Value="0,-4,0,0"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding DataContext.Data.UIMode, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Controller">
                                <Setter Property="Margin" Value="0,0,0,-20"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Image.Style>
            </Image>
        </Grid>

        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding ActionResource.MaxValue}" Value="0">
                <Setter Property="Visibility" Value="Collapsed" TargetName="content"/>
            </DataTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="#54ffffff" TargetName="highlightContainer"/>
                <Setter Property="Background" Value="#2affffff" TargetName="highlightContainer"/>
            </Trigger>

            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="SpellSlot">
                <Setter TargetName="SpellSlotLevels" Property="Visibility" Value="Visible"/>
                <Setter TargetName="romanBg" Property="Visibility" Value="Visible"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ActionResource.TypeId}" Value="WarlockSpellSlot">
                <Setter TargetName="SpellSlotLevels" Property="Visibility" Value="Visible"/>
                <Setter TargetName="romanBg" Property="Visibility" Value="Visible"/>
            </DataTrigger>

        </DataTemplate.Triggers>
    </DataTemplate>
    <!-- Action resource UI END -->

    <Style x:Key="FloralFlairLeftPointing" TargetType="Image">
        <Setter Property="Stretch" Value="None" />
        <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/floralFlair.png" />
        <Setter Property="RenderTransformOrigin" Value="0.5,0.5" />
        <Setter Property="RenderTransform">
            <Setter.Value>
                <ScaleTransform ScaleX="-1"/>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FloralFlairRightPointing" TargetType="Image">
        <Setter Property="Stretch" Value="None" />
        <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/floralFlair.png" />
        <Setter Property="RenderTransformOrigin" Value="0.5,0.5" />
    </Style>

    <ControlTemplate x:Key="FloralFlairTitleTemplate" TargetType="ContentControl">
        <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Background="Transparent">
            <Image HorizontalAlignment="Left" VerticalAlignment="Center" Style="{StaticResource FloralFlairLeftPointing}"/>
            <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Text="{TemplateBinding Content}" FontSize="{TemplateBinding FontSize}"  Foreground="{DynamicResource LS_SecondaryColor}" />
            <Image HorizontalAlignment="Right" VerticalAlignment="Center" Style="{StaticResource FloralFlairRightPointing}"/>
        </Grid>
    </ControlTemplate>

    <!-- Map marker (outside viewport) -->
    <ImageBrush x:Key="Map.OffscreenArrow.Friendly" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Map/offScreen_ally.png" Stretch="None" />
    <ImageBrush x:Key="Map.OffscreenArrow.Enemy" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Map/offScreen_enemy.png" Stretch="None" />
    <ImageBrush x:Key="Map.OffscreenArrow.Neutral" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Map/offScreen_neutral.png" Stretch="None" />
    <ImageBrush x:Key="Map.OffscreenArrow.Party" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Map/offScreen_party.png" Stretch="None" />
    <ImageBrush x:Key="Map.OffscreenArrow.Selected" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Map/offScreen_selected.png" Stretch="None" />

    <ControlTemplate x:Key="Map.MarkerDataTemplateOutsideViewport" TargetType="{x:Type ls:LSWorldMapMarker}">
        <Canvas x:Name="canvas">
            <Canvas.ToolTip>
                <ls:LSTooltip Content="{Binding Name}"/>
            </Canvas.ToolTip>

            <Canvas x:Name="PART_Rotation" Width="112" Height="112" Canvas.Left="-56" RenderTransformOrigin="0.5 0.0">

                <Ellipse x:Name="PART_InverseRotation" Canvas.Left="15" Canvas.Top="21" Width="80" Height="80" Fill="{Binding GameObject.Icon}" RenderTransformOrigin="0.5 0.5"/>

                <Canvas.Style>
                    <Style TargetType="Canvas">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Type}" Value="CharacterFriendly">
                                <Setter Property="Background" Value="{StaticResource Map.OffscreenArrow.Friendly}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Type}" Value="CharacterEnemy">
                                <Setter Property="Background" Value="{StaticResource Map.OffscreenArrow.Enemy}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Type}" Value="CharacterNeutral">
                                <Setter Property="Background" Value="{StaticResource Map.OffscreenArrow.Neutral}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Type}" Value="CharacterParty">
                                <Setter Property="Background" Value="{StaticResource Map.OffscreenArrow.Party}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Type}" Value="Player">
                                <Setter Property="Background" Value="{StaticResource Map.OffscreenArrow.Selected}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Canvas.Style>
            </Canvas>
        </Canvas>
    </ControlTemplate>

    <!-- Map marker style -->
    <Style x:Key="Map.MarkerItemStyle" TargetType="ls:LSWorldMapMarker">
        <Setter Property="Template" Value="{DynamicResource Map.MarkerDataTemplate}" />
        <Setter Property="EnableIconRotation" Value="False" />

        <Style.Triggers>
            <Trigger Property="IsInsideViewport" Value="False">
                <Setter Property="Visibility" Value="Collapsed" />
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsInsideViewport, RelativeSource={RelativeSource Self}}" Value="False" />
                    <Condition Binding="{Binding Type}" Value="CharacterFriendly" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Template" Value="{StaticResource Map.MarkerDataTemplateOutsideViewport}" />
                    <Setter Property="EnableIconRotation" Value="True" />
                    <Setter Property="IgnoreMapRotation" Value="True" />
                    <Setter Property="Visibility" Value="Visible" />
                    <Setter Property="Panel.ZIndex" Value="2" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsInsideViewport, RelativeSource={RelativeSource Self}}" Value="False" />
                    <Condition Binding="{Binding Type}" Value="CharacterEnemy" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Template" Value="{StaticResource Map.MarkerDataTemplateOutsideViewport}" />
                    <Setter Property="EnableIconRotation" Value="True" />
                    <Setter Property="IgnoreMapRotation" Value="True" />
                    <Setter Property="Visibility" Value="Visible" />
                    <Setter Property="Panel.ZIndex" Value="2" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsInsideViewport, RelativeSource={RelativeSource Self}}" Value="False" />
                    <Condition Binding="{Binding Type}" Value="CharacterNeutral" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Template" Value="{StaticResource Map.MarkerDataTemplateOutsideViewport}" />
                    <Setter Property="EnableIconRotation" Value="True" />
                    <Setter Property="IgnoreMapRotation" Value="True" />
                    <Setter Property="Visibility" Value="Visible" />
                    <Setter Property="Panel.ZIndex" Value="2" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsInsideViewport, RelativeSource={RelativeSource Self}}" Value="False" />
                    <Condition Binding="{Binding Type}" Value="CharacterParty" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Template" Value="{StaticResource Map.MarkerDataTemplateOutsideViewport}" />
                    <Setter Property="EnableIconRotation" Value="True" />
                    <Setter Property="IgnoreMapRotation" Value="True" />
                    <Setter Property="Visibility" Value="Visible" />
                    <Setter Property="Panel.ZIndex" Value="2" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsInsideViewport, RelativeSource={RelativeSource Self}}" Value="False" />
                    <Condition Binding="{Binding Type}" Value="Player" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Template" Value="{StaticResource Map.MarkerDataTemplateOutsideViewport}" />
                    <Setter Property="EnableIconRotation" Value="True" />
                    <Setter Property="IgnoreMapRotation" Value="True" />
                    <Setter Property="Visibility" Value="Visible" />
                    <Setter Property="Panel.ZIndex" Value="2" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="Player">
                <Setter Property="EnableIconRotation" Value="True" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="CharacterParty">
                <Setter Property="EnableIconRotation" Value="True" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="SelectorTemplate" TargetType="Control">
        <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" >
            <Grid noesis:Element.PPAAMode="Disabled" Margin="{TemplateBinding Padding}">
                <Grid.Resources>
                    <ImageBrush x:Key="TL" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_itemSelector_01.png" Stretch="None"/>
                    <ImageBrush x:Key="CL" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_itemSelector_04.png" Stretch="Fill"/>
                    <ImageBrush x:Key="BL" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_itemSelector_07.png" Stretch="None"/>
                    <ImageBrush x:Key="TC" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_itemSelector_02.png" Stretch="Fill"/>
                    <ImageBrush x:Key="CC" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_itemSelector_05.png" Stretch="Fill"/>
                    <ImageBrush x:Key="BC" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_itemSelector_08.png" Stretch="Fill"/>
                    <ImageBrush x:Key="TR" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_itemSelector_03.png" Stretch="None"/>
                    <ImageBrush x:Key="CR" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_itemSelector_06.png" Stretch="Fill"/>
                    <ImageBrush x:Key="BR" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_itemSelector_09.png" Stretch="None"/>
                </Grid.Resources>
                <Grid.RowDefinitions>
                    <RowDefinition Height="16"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="16"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="16"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="16"/>
                </Grid.ColumnDefinitions>
                <Rectangle Grid.Row ="0" Grid.Column ="0" Fill="{DynamicResource TL}"/>
                <Rectangle Grid.Row ="1" Grid.Column ="0" Fill="{DynamicResource CL}"/>
                <Rectangle Grid.Row ="2" Grid.Column ="0" Fill="{DynamicResource BL}"/>
                <Rectangle Grid.Row ="0" Grid.Column ="1" Fill="{DynamicResource TC}"/>
                <Rectangle Grid.Row ="1" Grid.Column ="1" Fill="{DynamicResource CC}"/>
                <Rectangle Grid.Row ="2" Grid.Column ="1" Fill="{DynamicResource BC}"/>
                <Rectangle Grid.Row ="0" Grid.Column ="2" Fill="{DynamicResource TR}"/>
                <Rectangle Grid.Row ="1" Grid.Column ="2" Fill="{DynamicResource CR}"/>
                <Rectangle Grid.Row ="2" Grid.Column ="2" Fill="{DynamicResource BR}"/>
            </Grid>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="InspirationProgressBar" TargetType="ls:LSProgressBar">
        <StackPanel Name="PART_Track" Orientation="Horizontal" ClipToBounds="True">
            <Rectangle Name="PART_Indicator">
                <Rectangle.Fill>
                    <ImageBrush x:Name="ImgValue" ImageSource="/GustavNoesisGUI;component/Assets/Shared/ico_resource_inspirationPoint_tile.png" TileMode="Tile" ViewportUnits="Absolute" Viewport="0,0,38,38" />
                </Rectangle.Fill>
            </Rectangle>
            <Rectangle Name="PART_SubIndicator">
                <Rectangle.Fill>
                    <ImageBrush x:Name="ImgCost" ImageSource="/GustavNoesisGUI;component/Assets/Shared/ico_resource_inspirationPoint_inactive_tile.png" TileMode="Tile" ViewportUnits="Absolute" Viewport="0,0,38,38" />
                </Rectangle.Fill>
            </Rectangle>
            <Rectangle Name="PART_IndicatorRemaining">
                <Rectangle.Fill>
                    <ImageBrush x:Name="ImgEmpty" ImageSource="/GustavNoesisGUI;component/Assets/Shared/ico_resource_inspirationPoint_inactive_tile.png" TileMode="Tile" ViewportUnits="Absolute" Viewport="0,0,38,38" />
                </Rectangle.Fill>
            </Rectangle>
        </StackPanel>
    </ControlTemplate>

    <ControlTemplate x:Key="HeaderInspirationPointsGold" TargetType="Control">
        <StackPanel Orientation="Horizontal">
            <StackPanel x:Name="SuppliesHolder" Orientation="Horizontal" Background="Transparent" ToolTipService.IsEnabled="True" ToolTipService.Placement="Bottom">
                <StackPanel.ToolTip>
                    <ls:LSTooltip Content="{Binding .}">
                        <ls:LSTooltip.ContentTemplate>
                            <DataTemplate>
                                <TextBlock Width="{DynamicResource MaxTooltipContentWidth}" TextWrapping="Wrap" Margin="0,20,0,20">
                            <ls:TextBlockFormatter.SourceText>
                                <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                    <Binding Source="hd7341f92g766ag4d6fg81a6gb5006d22a44b"/>
                                    <Binding Path="RequiredPartySupplies"/>
                                </MultiBinding>
                            </ls:TextBlockFormatter.SourceText>
                                </TextBlock>
                            </DataTemplate>
                        </ls:LSTooltip.ContentTemplate>
                    </ls:LSTooltip>
                </StackPanel.ToolTip>
                <TextBlock VerticalAlignment="Center" TextAlignment="Right"  Foreground="{DynamicResource LS_baseTxtColor}" Background="Transparent"  Text="{Binding Source='h7708bf73ge1fcg40a0gbc51g5128c57ef782',Converter={StaticResource TranslatedStringConverter}}"/>
                <TextBlock VerticalAlignment="Center" TextAlignment="Right" Margin="10, 0, 0, 0" Foreground="{DynamicResource LS_tint100}" Background="Transparent" Text="{Binding PartySupplies}"/>
                <Image VerticalAlignment="Center" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_suppliesAquired.png" Stretch="None">
                    <i:Interaction.Triggers>
                        <ei:PropertyChangedTrigger Binding="{Binding Path=PartySupplies}">
                            <i:Interaction.Behaviors>
                                <ei:ConditionBehavior>
                                    <ei:ConditionalExpression>
                                        <ei:ComparisonCondition LeftOperand="{Binding PartySupplies}" Operator="LessThan" RightOperand="{Binding RequiredPartySupplies}"/>
                                    </ei:ConditionalExpression>
                                </ei:ConditionBehavior>
                            </i:Interaction.Behaviors>
                            <ei:ChangePropertyAction PropertyName="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_supplies.png"/>
                        </ei:PropertyChangedTrigger>
                    </i:Interaction.Triggers>
                </Image>
            </StackPanel>

            <StackPanel x:Name="InspirationHolder" Orientation="Horizontal" Background="Transparent" Margin="20,0,0,0" ToolTipService.IsEnabled="True" ToolTipService.Placement="Bottom">
                <StackPanel.ToolTip>
                    <ls:LSTooltip Content="{Binding .}">
                        <ls:LSTooltip.ContentTemplate>
                            <DataTemplate>
                                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='hd14181dbgc234g48f9gbb1dg4a014583669e',Converter={StaticResource TranslatedStringConverter}}" Width="{DynamicResource MaxTooltipContentWidth}" TextWrapping="Wrap" Margin="0,20,0,20"/>
                            </DataTemplate>
                        </ls:LSTooltip.ContentTemplate>
                    </ls:LSTooltip>
                </StackPanel.ToolTip>

                <TextBlock VerticalAlignment="Center" TextAlignment="Right" Foreground="{DynamicResource LS_baseTxtColor}" Background="Transparent" Text="{Binding Source='h62619d26gd851g48a3g9c91ge21ad5928086',Converter={StaticResource TranslatedStringConverter}}"/>
                <!-- For the value, as the inspiration points is defined in each character and synced across all the party members,
                     we can check the inspiration points value on any party character controlled (they will be the same).-->

                <TextBlock Text="{Binding SelectedCharacter.Stats.InspirationPointsResource.Value}" Foreground="{DynamicResource LS_tint100}" Background="Transparent" VerticalAlignment="Center" TextAlignment="Right" Margin="10,0,10,0">
                    <Run Text="{Binding SelectedCharacter.Stats.InspirationPointsResource.Value}"/><Run Text="/"/><Run Text="{Binding SelectedCharacter.Stats.InspirationPointsResource.MaxValue}"/>
                </TextBlock>
                <Image VerticalAlignment="Center" Stretch="None">
                    <Image.Style>
                        <Style TargetType="Image">
                            <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_resource_inspirationPoint_tile.png"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding SelectedCharacter.Stats.InspirationPointsResource.Value}" Value="0">
                                    <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_resource_inspirationPoint_inactive_tile.png"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Image.Style>
                </Image>
            </StackPanel>

            <StackPanel x:Name="PartyGoldHolder" Orientation="Horizontal" Background="Transparent" Margin="20,0,0,0">
                <StackPanel.ToolTip>
                    <ls:LSTooltip>
                        <ls:LSTooltip.Content>
                            <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h1e646e86g3c05g4c96g9fd8g9c521871d554',Converter={StaticResource TranslatedStringConverter}}" MaxWidth="{DynamicResource MaxTooltipContentWidth}" TextWrapping="Wrap" Margin="0,20,0,20"/>
                        </ls:LSTooltip.Content>
                    </ls:LSTooltip>
                </StackPanel.ToolTip>
                <TextBlock VerticalAlignment="Center" TextAlignment="Right"  Foreground="{DynamicResource LS_baseTxtColor}" Background="Transparent"  Text="{Binding Source='h4ef69730g7c3fg424ag8a7cge91e33fe7cee',Converter={StaticResource TranslatedStringConverter}}"/>
                <TextBlock VerticalAlignment="Center" TextAlignment="Right" Margin="10 0 10 0" Foreground="{DynamicResource LS_tint100}" Background="Transparent"  Text="{Binding PartyGold}" FontSize="{DynamicResource DefaultFontSize}"/>
                <Image VerticalAlignment="Center"  Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_ico_gold.png"  Stretch="None"/>
            </StackPanel>
        </StackPanel>
    </ControlTemplate>

    <Style x:Key="StatusDurationTextStyle" TargetType="TextBlock">
        <Setter Property="Text" Value="-" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding DurationType}" Value="Permanent">
                <Setter Property="Text" Value="{Binding Source='hd66a6a7dg38bcg4d92g9f55g080c1b215e6a',Converter={StaticResource TranslatedStringConverter}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding DurationType}" Value="Timer">
                <Setter Property="Text">
                    <Setter.Value>
                        <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                            <Binding Source="h2dc60835g9000g440fga70fg330291eda7eb"/>
                            <Binding Path="DataContext.Duration" RelativeSource="{RelativeSource Mode=Self}"/>
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Duration}" Value="1" />
                    <Condition Binding="{Binding DurationType}" Value="Timer" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Text">
                        <Setter.Value>
                            <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                <Binding Source="h134a812fgc09eg43d7gbaadg9cb153532707"/>
                                <Binding Path="DataContext.Duration" RelativeSource="{RelativeSource Mode=Self}"/>
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding DurationType}" Value="FromSurface">
                <Setter Property="Text" Value="{Binding Source='hccd39823g9eb7g4854g99d5g8d106b3a8d80',Converter={StaticResource TranslatedStringConverter}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding DurationType}" Value="Aura">
                <Setter Property="Text" Value="{Binding Source='h70c7fe6agaf87g4d00ga78age516108f3aa1',Converter={StaticResource TranslatedStringConverter}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding DurationType}" Value="UntilRest">
                <Setter Property="Text" Value="{Binding Source='h89f4e7f5gcd9ag449aga50ag64fe766c675d',Converter={StaticResource TranslatedStringConverter}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding DurationType}" Value="Environment">
                <Setter Property="Text" Value="{Binding Source='h616e456bg93f5g4a9dg98ebgde1f059e0f68',Converter={StaticResource TranslatedStringConverter}}" />
            </DataTrigger>

        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="InventoryViewBlocker">
        <Rectangle x:Name="InventoryBlocker" Fill="{StaticResource LS_DisabledPanelColor}" 
                   Visibility="{Binding IsContentEditable, Mode=OneWay, Converter={StaticResource BoolToCollapsedConverter}}"/>
    </ControlTemplate>

</ResourceDictionary>